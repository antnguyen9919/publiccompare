{"version":3,"file":"mixedPlugin.ec7deb84f65ee765b2e6.js","sources":["webpack:///./public/app/plugins/datasource/mixed/MixedDataSource.ts","webpack:///./public/app/plugins/datasource/mixed/module.ts"],"sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport groupBy from 'lodash/groupBy';\nimport { from, of, Observable, merge } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  LoadingState,\n  DataSourceApi,\n  DataQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n} from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { mergeMap, map } from 'rxjs/operators';\n\nexport const MIXED_DATASOURCE_NAME = '-- Mixed --';\n\nexport interface BatchedQueries {\n  datasource: Promise<DataSourceApi>;\n  targets: DataQuery[];\n}\n\nexport class MixedDatasource extends DataSourceApi<DataQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(request: DataQueryRequest<DataQuery>): Observable<DataQueryResponse> {\n    // Remove any invalid queries\n    const queries = request.targets.filter(t => {\n      return t.datasource !== MIXED_DATASOURCE_NAME;\n    });\n\n    if (!queries.length) {\n      return of({ data: [] } as DataQueryResponse); // nothing\n    }\n\n    // Build groups of queries to run in parallel\n    const sets: { [key: string]: DataQuery[] } = groupBy(queries, 'datasource');\n    const mixed: BatchedQueries[] = [];\n    for (const key in sets) {\n      const targets = sets[key];\n      const dsName = targets[0].datasource;\n      mixed.push({\n        datasource: getDataSourceSrv().get(dsName),\n        targets,\n      });\n    }\n    return this.batchQueries(mixed, request);\n  }\n\n  batchQueries(mixed: BatchedQueries[], request: DataQueryRequest<DataQuery>): Observable<DataQueryResponse> {\n    const observables: Array<Observable<DataQueryResponse>> = [];\n    let runningSubRequests = 0;\n\n    for (let i = 0; i < mixed.length; i++) {\n      const query = mixed[i];\n      if (!query.targets || !query.targets.length) {\n        continue;\n      }\n      const observable = from(query.datasource).pipe(\n        mergeMap((dataSourceApi: DataSourceApi) => {\n          const datasourceRequest = cloneDeep(request);\n\n          datasourceRequest.requestId = `mixed-${i}-${datasourceRequest.requestId || ''}`;\n          datasourceRequest.targets = query.targets;\n\n          runningSubRequests++;\n          let hasCountedAsDone = false;\n\n          return from(dataSourceApi.query(datasourceRequest)).pipe(\n            tap(\n              (response: DataQueryResponse) => {\n                if (\n                  hasCountedAsDone ||\n                  response.state === LoadingState.Streaming ||\n                  response.state === LoadingState.Loading\n                ) {\n                  return;\n                }\n                runningSubRequests--;\n                hasCountedAsDone = true;\n              },\n              () => {\n                if (hasCountedAsDone) {\n                  return;\n                }\n                hasCountedAsDone = true;\n                runningSubRequests--;\n              }\n            ),\n            map((response: DataQueryResponse) => {\n              return {\n                ...response,\n                data: response.data || [],\n                state: runningSubRequests === 0 ? LoadingState.Done : LoadingState.Loading,\n                key: `mixed-${i}-${response.key || ''}`,\n              } as DataQueryResponse;\n            })\n          );\n        })\n      );\n\n      observables.push(observable);\n    }\n\n    return merge(...observables);\n  }\n\n  testDatasource() {\n    return Promise.resolve({});\n  }\n}\n","import { MixedDatasource } from './MixedDataSource';\nexport { MixedDatasource, MixedDatasource as Datasource };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAQA;AACA;AAEA;AAOA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAMA;AAEA;AAGA;;AAhDA;AAAA;AAiDA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;ACjHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;A","sourceRoot":""}
{"version":3,"file":"testDataDSPlugin.ec7deb84f65ee765b2e6.js","sources":["webpack:///./public/app/plugins/datasource/testdata/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/LogIpsum.ts","webpack:///./public/app/plugins/datasource/testdata/TestInfoTab.tsx","webpack:///./public/app/plugins/datasource/testdata/datasource.ts","webpack:///./public/app/plugins/datasource/testdata/metricTree.ts","webpack:///./public/app/plugins/datasource/testdata/module.tsx","webpack:///./public/app/plugins/datasource/testdata/query_ctrl.ts","webpack:///./public/app/plugins/datasource/testdata/runStreams.ts"],"sourcesContent":["// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\n\ntype Props = DataSourcePluginOptionsEditorProps<any>;\n\n/**\n * Empty Config Editor -- settings to save\n */\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return <div />;\n  }\n}\n","import { LogLevel } from '@grafana/data';\n\nlet index = 0;\n\nexport function getRandomLogLevel(): LogLevel {\n  const v = Math.random();\n  if (v > 0.9) {\n    return LogLevel.critical;\n  }\n  if (v > 0.8) {\n    return LogLevel.error;\n  }\n  if (v > 0.7) {\n    return LogLevel.warning;\n  }\n  if (v > 0.4) {\n    return LogLevel.info;\n  }\n  if (v > 0.3) {\n    return LogLevel.debug;\n  }\n  if (v > 0.1) {\n    return LogLevel.trace;\n  }\n  return LogLevel.unknown;\n}\n\nexport function getNextWord() {\n  index = (index + Math.floor(Math.random() * 5)) % words.length;\n  return words[index];\n}\n\nexport function getRandomLine(length = 60) {\n  let line = getNextWord();\n  while (line.length < length) {\n    line += ' ' + getNextWord();\n  }\n  return line;\n}\n\nconst words = [\n  'At',\n  'vero',\n  'eos',\n  'et',\n  'accusamus',\n  'et',\n  'iusto',\n  'odio',\n  'dignissimos',\n  'ducimus',\n  'qui',\n  'blanditiis',\n  'praesentium',\n  'voluptatum',\n  'deleniti',\n  'atque',\n  'corrupti',\n  'quos',\n  'dolores',\n  'et',\n  'quas',\n  'molestias',\n  'excepturi',\n  'sint',\n  'occaecati',\n  'cupiditate',\n  'non',\n  'provident',\n  'similique',\n  'sunt',\n  'in',\n  'culpa',\n  'qui',\n  'officia',\n  'deserunt',\n  'mollitia',\n  'animi',\n  'id',\n  'est',\n  'laborum',\n  'et',\n  'dolorum',\n  'fuga',\n  'Et',\n  'harum',\n  'quidem',\n  'rerum',\n  'facilis',\n  'est',\n  'et',\n  'expedita',\n  'distinctio',\n  'Nam',\n  'libero',\n  'tempore',\n  'cum',\n  'soluta',\n  'nobis',\n  'est',\n  'eligendi',\n  'optio',\n  'cumque',\n  'nihil',\n  'impedit',\n  'quo',\n  'minus',\n  'id',\n  'quod',\n  'maxime',\n  'placeat',\n  'facere',\n  'possimus',\n  'omnis',\n  'voluptas',\n  'assumenda',\n  'est',\n  'omnis',\n  'dolor',\n  'repellendus',\n  'Temporibus',\n  'autem',\n  'quibusdam',\n  'et',\n  'aut',\n  'officiis',\n  'debitis',\n  'aut',\n  'rerum',\n  'necessitatibus',\n  'saepe',\n  'eveniet',\n  'ut',\n  'et',\n  'voluptates',\n  'repudiandae',\n  'sint',\n  'et',\n  'molestiae',\n  'non',\n  'recusandae',\n  'Itaque',\n  'earum',\n  'rerum',\n  'hic',\n  'tenetur',\n  'a',\n  'sapiente',\n  'delectus',\n  'ut',\n  'aut',\n  'reiciendis',\n  'voluptatibus',\n  'maiores',\n  'alias',\n  'consequatur',\n  'aut',\n  'perferendis',\n  'doloribus',\n  'asperiores',\n  'repellat',\n];\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { PluginConfigPageProps, DataSourcePluginMeta, DataSourceJsonData } from '@grafana/data';\n\ninterface Props extends PluginConfigPageProps<DataSourcePluginMeta<DataSourceJsonData>> {}\n\nexport class TestInfoTab extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        See github for more information about setting up a reproducable test environment.\n        <br />\n        <br />\n        <a\n          className=\"btn btn-inverse\"\n          href=\"https://github.com/grafana/grafana/tree/master/devenv\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          Github\n        </a>\n        <br />\n      </div>\n    );\n  }\n}\n","import {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MetricFindValue,\n  TableData,\n  TimeSeries,\n  DataQueryError,\n} from '@grafana/data';\nimport { Scenario, TestDataQuery } from './types';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { queryMetricTree } from './metricTree';\nimport { from, merge, Observable } from 'rxjs';\nimport { runStream } from './runStreams';\nimport templateSrv from 'app/features/templating/template_srv';\nimport { getSearchFilterScopedVar } from '../../../features/templating/variable';\n\ntype TestData = TimeSeries | TableData;\n\nexport class TestDataDataSource extends DataSourceApi<TestDataQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const queries: any[] = [];\n    const streams: Array<Observable<DataQueryResponse>> = [];\n\n    // Start streams and prepare queries\n    for (const target of options.targets) {\n      if (target.hide) {\n        continue;\n      }\n      if (target.scenarioId === 'streaming_client') {\n        streams.push(runStream(target, options));\n      } else {\n        queries.push({\n          ...target,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          datasourceId: this.id,\n          alias: templateSrv.replace(target.alias || ''),\n        });\n      }\n    }\n\n    if (queries.length) {\n      const req: Promise<DataQueryResponse> = getBackendSrv()\n        .datasourceRequest({\n          method: 'POST',\n          url: '/api/tsdb/query',\n          data: {\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries: queries,\n          },\n          // This sets up a cancel token\n          requestId: options.requestId,\n        })\n        .then((res: any) => this.processQueryResult(queries, res));\n\n      streams.push(from(req));\n    }\n\n    return merge(...streams);\n  }\n\n  processQueryResult(queries: any, res: any): DataQueryResponse {\n    const data: TestData[] = [];\n    let error: DataQueryError | undefined = undefined;\n\n    for (const query of queries) {\n      const results = res.data.results[query.refId];\n\n      for (const t of results.tables || []) {\n        const table = t as TableData;\n        table.refId = query.refId;\n        table.name = query.alias;\n        data.push(table);\n      }\n\n      for (const series of results.series || []) {\n        data.push({ target: series.name, datapoints: series.points, refId: query.refId, tags: series.tags });\n      }\n\n      if (results.error) {\n        error = {\n          message: results.error,\n        };\n      }\n    }\n\n    return { data, error };\n  }\n\n  annotationQuery(options: any) {\n    let timeWalker = options.range.from.valueOf();\n    const to = options.range.to.valueOf();\n    const events = [];\n    const eventCount = 10;\n    const step = (to - timeWalker) / eventCount;\n\n    for (let i = 0; i < eventCount; i++) {\n      events.push({\n        annotation: options.annotation,\n        time: timeWalker,\n        text: 'This is the text, <a href=\"https://grafana.com\">Grafana.com</a>',\n        tags: ['text', 'server'],\n      });\n      timeWalker += step;\n    }\n    return Promise.resolve(events);\n  }\n\n  getQueryDisplayText(query: TestDataQuery) {\n    if (query.alias) {\n      return query.scenarioId + ' as ' + query.alias;\n    }\n    return query.scenarioId;\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n      status: 'success',\n      message: 'Data source is working',\n    });\n  }\n\n  getScenarios(): Promise<Scenario[]> {\n    return getBackendSrv().get('/api/tsdb/testdata/scenarios');\n  }\n\n  metricFindQuery(query: string, options: any) {\n    return new Promise<MetricFindValue[]>((resolve, reject) => {\n      setTimeout(() => {\n        const interpolatedQuery = templateSrv.replace(\n          query,\n          getSearchFilterScopedVar({ query, wildcardChar: '*', options })\n        );\n        const children = queryMetricTree(interpolatedQuery);\n        const items = children.map(item => ({ value: item.name, text: item.name }));\n        resolve(items);\n      }, 100);\n    });\n  }\n}\n","export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C'];\n  const children: TreeNode[] = [];\n\n  if (depth > 3) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { TestDataDataSource } from './datasource';\nimport { TestDataQueryCtrl } from './query_ctrl';\nimport { TestInfoTab } from './TestInfoTab';\nimport { ConfigEditor } from './ConfigEditor';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n  constructor() {}\n  static template = '<h2>Annotation scenario</h2>';\n}\n\nexport const plugin = new DataSourcePlugin(TestDataDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryCtrl(TestDataQueryCtrl)\n  .setAnnotationQueryCtrl(TestDataAnnotationsQueryCtrl)\n  .addConfigPage({\n    title: 'Setup',\n    icon: 'fa fa-list-alt',\n    body: TestInfoTab,\n    id: 'setup',\n  });\n","import _ from 'lodash';\nimport { dateMath, dateTime } from '@grafana/data';\nimport { e2e } from '@grafana/e2e';\n\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { defaultQuery } from './runStreams';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\n\nexport const defaultPulse: any = {\n  timeStep: 60,\n  onCount: 3,\n  onValue: 2,\n  offCount: 3,\n  offValue: 1,\n};\n\nexport const defaultCSVWave: any = {\n  timeStep: 60,\n  valuesCSV: '0,0,2,2,1,1',\n};\n\nconst showLabelsFor = ['random_walk', 'predictable_pulse', 'predictable_csv_wave'];\n\nexport class TestDataQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  scenarioList: any;\n  scenario: any;\n  newPointValue: number;\n  newPointTime: any;\n  selectedPoint: any;\n\n  showLabels = false;\n  selectors: typeof e2e.pages.Dashboard.Panels.DataSource.TestData.QueryTab.selectors;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: any) {\n    super($scope, $injector);\n\n    this.target.scenarioId = this.target.scenarioId || 'random_walk';\n    this.scenarioList = [];\n    this.newPointTime = dateTime();\n    this.selectedPoint = { text: 'Select point', value: null };\n    this.showLabels = showLabelsFor.includes(this.target.scenarioId);\n    this.selectors = e2e.pages.Dashboard.Panels.DataSource.TestData.QueryTab.selectors;\n  }\n\n  getPoints() {\n    return _.map(this.target.points, (point, index) => {\n      return {\n        text: dateTime(point[1]).format('MMMM Do YYYY, H:mm:ss') + ' : ' + point[0],\n        value: index,\n      };\n    });\n  }\n\n  pointSelected(option: any) {\n    this.selectedPoint = option;\n  }\n\n  deletePoint() {\n    this.target.points.splice(this.selectedPoint.value, 1);\n    this.selectedPoint = { text: 'Select point', value: null };\n    this.refresh();\n  }\n\n  addPoint() {\n    this.target.points = this.target.points || [];\n    this.newPointTime = dateMath.parse(this.newPointTime);\n    this.target.points.push([this.newPointValue, this.newPointTime.valueOf()]);\n    this.target.points = _.sortBy(this.target.points, p => p[1]);\n    this.refresh();\n  }\n\n  $onInit() {\n    return getBackendSrv()\n      .get('/api/tsdb/testdata/scenarios')\n      .then((res: any) => {\n        this.scenarioList = res;\n        this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\n      });\n  }\n\n  scenarioChanged() {\n    this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\n    this.target.stringInput = this.scenario.stringInput;\n    this.showLabels = showLabelsFor.includes(this.target.scenarioId);\n\n    if (this.target.scenarioId === 'manual_entry') {\n      this.target.points = this.target.points || [];\n    } else {\n      delete this.target.points;\n    }\n\n    if (this.target.scenarioId === 'streaming_client') {\n      this.target.stream = _.defaults(this.target.stream || {}, defaultQuery);\n    } else {\n      delete this.target.stream;\n    }\n\n    if (this.target.scenarioId === 'predictable_pulse') {\n      this.target.pulseWave = _.defaults(this.target.pulseWave || {}, defaultPulse);\n    } else {\n      delete this.target.pulseWave;\n    }\n\n    if (this.target.scenarioId === 'predictable_csv_wave') {\n      this.target.csvWave = _.defaults(this.target.csvWave || {}, defaultCSVWave);\n    } else {\n      delete this.target.csvWave;\n    }\n\n    this.refresh();\n  }\n\n  streamChanged() {\n    this.refresh();\n  }\n}\n","import { defaults } from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  FieldType,\n  CircularDataFrame,\n  CSVReader,\n  Field,\n  LoadingState,\n} from '@grafana/data';\n\nimport { TestDataQuery, StreamingQuery } from './types';\nimport { getRandomLine } from './LogIpsum';\n\nexport const defaultQuery: StreamingQuery = {\n  type: 'signal',\n  speed: 250, // ms\n  spread: 3.5,\n  noise: 2.2,\n  bands: 1,\n};\n\nexport function runStream(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const query = defaults(target.stream, defaultQuery);\n  if ('signal' === query.type) {\n    return runSignalStream(target, query, req);\n  }\n  if ('logs' === query.type) {\n    return runLogsStream(target, query, req);\n  }\n  if ('fetch' === query.type) {\n    return runFetchStream(target, query, req);\n  }\n  throw new Error(`Unknown Stream Type: ${query.type}`);\n}\n\nexport function runSignalStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `signal-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Signal ' + target.refId;\n    data.addField({ name: 'time', type: FieldType.time });\n    data.addField({ name: 'value', type: FieldType.number });\n\n    const { spread, speed, bands, noise } = query;\n\n    for (let i = 0; i < bands; i++) {\n      const suffix = bands > 1 ? ` ${i + 1}` : '';\n      data.addField({ name: 'Min' + suffix, type: FieldType.number });\n      data.addField({ name: 'Max' + suffix, type: FieldType.number });\n    }\n\n    let value = Math.random() * 100;\n    let timeoutId: any = null;\n\n    const addNextRow = (time: number) => {\n      value += (Math.random() - 0.5) * spread;\n\n      let idx = 0;\n      data.fields[idx++].values.add(time);\n      data.fields[idx++].values.add(value);\n\n      let min = value;\n      let max = value;\n\n      for (let i = 0; i < bands; i++) {\n        min = min - Math.random() * noise;\n        max = max + Math.random() * noise;\n\n        data.fields[idx++].values.add(min);\n        data.fields[idx++].values.add(max);\n      }\n    };\n\n    // Fill the buffer on init\n    if (true) {\n      let time = Date.now() - maxDataPoints * speed;\n      for (let i = 0; i < maxDataPoints; i++) {\n        addNextRow(time);\n        time += speed;\n      }\n    }\n\n    const pushNextEvent = () => {\n      addNextRow(Date.now());\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runLogsStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `logs-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Logs ' + target.refId;\n    data.addField({ name: 'time', type: FieldType.time });\n    data.addField({ name: 'line', type: FieldType.string });\n\n    const { speed } = query;\n\n    let timeoutId: any = null;\n\n    const pushNextEvent = () => {\n      data.values.time.add(Date.now());\n      data.values.line.add(getRandomLine());\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runFetchStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `fetch-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    let data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Fetch ' + target.refId;\n\n    let reader: ReadableStreamReader<Uint8Array>;\n    const csv = new CSVReader({\n      callback: {\n        onHeader: (fields: Field[]) => {\n          // Clear any existing fields\n          if (data.fields.length) {\n            data = new CircularDataFrame({\n              append: 'tail',\n              capacity: maxDataPoints,\n            });\n            data.refId = target.refId;\n            data.name = 'Fetch ' + target.refId;\n          }\n          for (const field of fields) {\n            data.addField(field);\n          }\n        },\n        onRow: (row: any[]) => {\n          data.add(row);\n        },\n      },\n    });\n\n    const processChunk = (value: ReadableStreamReadResult<Uint8Array>): any => {\n      if (value.value) {\n        const text = new TextDecoder().decode(value.value);\n        csv.readCSV(text);\n      }\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n        state: value.done ? LoadingState.Done : LoadingState.Streaming,\n      });\n\n      if (value.done) {\n        console.log('Finished stream');\n        subscriber.complete(); // necessary?\n        return;\n      }\n\n      return reader.read().then(processChunk);\n    };\n\n    fetch(new Request(query.url)).then(response => {\n      reader = response.body.getReader();\n      reader.read().then(processChunk);\n    });\n\n    return () => {\n      // Cancel fetch?\n      console.log('unsubscribing to stream ' + streamId);\n    };\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAMA;;AAEA;AACA;AAAA;AAAA;;AAIA;AAHA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;ACdjKA;AACA;AAOA;AAAA;AACA;AACA;AACA;AAEA;AACA;;AAGA;AACA;AACA;AAQA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AAWA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AACA;AACA;AAEA;;AAAA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAOA;AACA;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AACA;AACA;;AAEA;AAAA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEA;AAAA;AACA;AACA;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;AC7IA;;;;;;;;;;;AAWA;AACA;;AACA;AACA;AAEA;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAEA;AACA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAAA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;AACA;;;;;;;;;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAYA;AACA;AAAA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AA7FA;AA8FA;AAAA;AA/FA;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAEA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}
{"version":3,"file":"default~DashboardPage~SoloPanelPage.ec7deb84f65ee765b2e6.js","sources":["webpack:///./node_modules/react-draggable/dist/react-draggable.js","webpack:///./public/app/core/components/CopyToClipboard/CopyToClipboard.tsx","webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///./public/app/core/components/PluginHelp/PluginHelp.tsx","webpack:///./public/app/features/alerting/AlertTab.tsx","webpack:///./public/app/features/alerting/StateHistory.tsx","webpack:///./public/app/features/alerting/TestRuleResult.tsx","webpack:///./public/app/features/dashboard/components/AddPanelWidget/AddPanelWidget.tsx","webpack:///./public/app/features/dashboard/components/AddPanelWidget/index.ts","webpack:///./public/app/features/dashboard/components/DashboardRow/DashboardRow.tsx","webpack:///./public/app/features/dashboard/components/DashboardRow/index.ts","webpack:///./public/app/features/dashboard/dashgrid/DashboardPanel.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelChrome.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeader.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderCorner.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenu.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuItem.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelResizer.tsx","webpack:///./public/app/features/dashboard/panel_editor/DataSourceOption.tsx","webpack:///./public/app/features/dashboard/panel_editor/EditorTabBody.tsx","webpack:///./public/app/features/dashboard/panel_editor/GeneralTab.tsx","webpack:///./public/app/features/dashboard/panel_editor/PanelEditor.tsx","webpack:///./public/app/features/dashboard/panel_editor/QueriesTab.tsx","webpack:///./public/app/features/dashboard/panel_editor/QueryEditorRows.tsx","webpack:///./public/app/features/dashboard/panel_editor/QueryInspector.tsx","webpack:///./public/app/features/dashboard/panel_editor/QueryOptions.tsx","webpack:///./public/app/features/dashboard/panel_editor/VisualizationTab.tsx","webpack:///./public/app/features/dashboard/panel_editor/VizPickerSearch.tsx","webpack:///./public/app/features/dashboard/panel_editor/VizTypePicker.tsx","webpack:///./public/app/features/dashboard/panel_editor/VizTypePickerPlugin.tsx","webpack:///./public/app/features/dashboard/panel_editor/state/actions.ts","webpack:///./public/app/features/dashboard/panel_editor/state/selectors.ts","webpack:///./public/app/features/dashboard/state/initDashboard.ts","webpack:///./public/app/features/dashboard/utils/getPanelMenu.ts","webpack:///./public/app/features/panel/GeneralTabCtrl.ts","webpack:///./public/app/features/plugins/PluginStateInfo.tsx"],"sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react-dom'), require('react')) :\n\ttypeof define === 'function' && define.amd ? define(['react-dom', 'react'], factory) :\n\t(global.ReactDraggable = factory(global.ReactDOM,global.React));\n}(this, (function (ReactDOM,React) { 'use strict';\n\n\tReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;\n\tReact = React && React.hasOwnProperty('default') ? React['default'] : React;\n\n\tfunction createCommonjsModule(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\t/**\n\t * Copyright (c) 2013-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * \n\t */\n\n\tfunction makeEmptyFunction(arg) {\n\t  return function () {\n\t    return arg;\n\t  };\n\t}\n\n\t/**\n\t * This function accepts and discards inputs; it has no side effects. This is\n\t * primarily useful idiomatically for overridable function endpoints which\n\t * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n\t */\n\tvar emptyFunction = function emptyFunction() {};\n\n\temptyFunction.thatReturns = makeEmptyFunction;\n\temptyFunction.thatReturnsFalse = makeEmptyFunction(false);\n\temptyFunction.thatReturnsTrue = makeEmptyFunction(true);\n\temptyFunction.thatReturnsNull = makeEmptyFunction(null);\n\temptyFunction.thatReturnsThis = function () {\n\t  return this;\n\t};\n\temptyFunction.thatReturnsArgument = function (arg) {\n\t  return arg;\n\t};\n\n\tvar emptyFunction_1 = emptyFunction;\n\n\t/**\n\t * Copyright (c) 2013-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t */\n\n\t/**\n\t * Use invariant() to assert state which your program assumes to be true.\n\t *\n\t * Provide sprintf-style format (only %s is supported) and arguments\n\t * to provide information about what broke and what you were\n\t * expecting.\n\t *\n\t * The invariant message will be stripped in production, but the invariant\n\t * will remain to ensure logic does not differ in production.\n\t */\n\n\tvar validateFormat = function validateFormat(format) {};\n\n\t{\n\t  validateFormat = function validateFormat(format) {\n\t    if (format === undefined) {\n\t      throw new Error('invariant requires an error message argument');\n\t    }\n\t  };\n\t}\n\n\tfunction invariant(condition, format, a, b, c, d, e, f) {\n\t  validateFormat(format);\n\n\t  if (!condition) {\n\t    var error;\n\t    if (format === undefined) {\n\t      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n\t    } else {\n\t      var args = [a, b, c, d, e, f];\n\t      var argIndex = 0;\n\t      error = new Error(format.replace(/%s/g, function () {\n\t        return args[argIndex++];\n\t      }));\n\t      error.name = 'Invariant Violation';\n\t    }\n\n\t    error.framesToPop = 1; // we don't care about invariant's own frame\n\t    throw error;\n\t  }\n\t}\n\n\tvar invariant_1 = invariant;\n\n\t/**\n\t * Similar to invariant but only logs a warning if the condition is not met.\n\t * This can be used to log issues in development environments in critical\n\t * paths. Removing the logging code for production environments will keep the\n\t * same logic and follow the same code paths.\n\t */\n\n\tvar warning = emptyFunction_1;\n\n\t{\n\t  var printWarning = function printWarning(format) {\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    var argIndex = 0;\n\t    var message = 'Warning: ' + format.replace(/%s/g, function () {\n\t      return args[argIndex++];\n\t    });\n\t    if (typeof console !== 'undefined') {\n\t      console.error(message);\n\t    }\n\t    try {\n\t      // --- Welcome to debugging React ---\n\t      // This error was thrown as a convenience so that you can use this stack\n\t      // to find the callsite that caused this warning to fire.\n\t      throw new Error(message);\n\t    } catch (x) {}\n\t  };\n\n\t  warning = function warning(condition, format) {\n\t    if (format === undefined) {\n\t      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n\t    }\n\n\t    if (format.indexOf('Failed Composite propType: ') === 0) {\n\t      return; // Ignore CompositeComponent proptype check.\n\t    }\n\n\t    if (!condition) {\n\t      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n\t        args[_key2 - 2] = arguments[_key2];\n\t      }\n\n\t      printWarning.apply(undefined, [format].concat(args));\n\t    }\n\t  };\n\t}\n\n\tvar warning_1 = warning;\n\n\t/*\n\tobject-assign\n\t(c) Sindre Sorhus\n\t@license MIT\n\t*/\n\t/* eslint-disable no-unused-vars */\n\tvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\tvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n\tfunction toObject(val) {\n\t\tif (val === null || val === undefined) {\n\t\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t\t}\n\n\t\treturn Object(val);\n\t}\n\n\tfunction shouldUseNative() {\n\t\ttry {\n\t\t\tif (!Object.assign) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\t\ttest1[5] = 'de';\n\t\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\t\tvar test2 = {};\n\t\t\tfor (var i = 0; i < 10; i++) {\n\t\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t\t}\n\t\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\t\treturn test2[n];\n\t\t\t});\n\t\t\tif (order2.join('') !== '0123456789') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\t\tvar test3 = {};\n\t\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\t\ttest3[letter] = letter;\n\t\t\t});\n\t\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} catch (err) {\n\t\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tvar objectAssign = shouldUseNative() ? Object.assign : function (target, source) {\n\t\tvar from;\n\t\tvar to = toObject(target);\n\t\tvar symbols;\n\n\t\tfor (var s = 1; s < arguments.length; s++) {\n\t\t\tfrom = Object(arguments[s]);\n\n\t\t\tfor (var key in from) {\n\t\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\t\tto[key] = from[key];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (getOwnPropertySymbols) {\n\t\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn to;\n\t};\n\n\t/**\n\t * Copyright (c) 2013-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t */\n\n\tvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\n\tvar ReactPropTypesSecret_1 = ReactPropTypesSecret;\n\n\t{\n\t  var invariant$1 = invariant_1;\n\t  var warning$1 = warning_1;\n\t  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;\n\t  var loggedTypeFailures = {};\n\t}\n\n\t/**\n\t * Assert that the values match with the type specs.\n\t * Error messages are memorized and will only be shown once.\n\t *\n\t * @param {object} typeSpecs Map of name to a ReactPropType\n\t * @param {object} values Runtime values that need to be type-checked\n\t * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n\t * @param {string} componentName Name of the component for error messages.\n\t * @param {?Function} getStack Returns the component stack.\n\t * @private\n\t */\n\tfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n\t  {\n\t    for (var typeSpecName in typeSpecs) {\n\t      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n\t        var error;\n\t        // Prop type validation may throw. In case they do, we don't want to\n\t        // fail the render phase where it didn't fail before. So we log it.\n\t        // After these have been cleaned up, we'll let them throw.\n\t        try {\n\t          // This is intentionally an invariant that gets caught. It's the same\n\t          // behavior as without this statement except with a better message.\n\t          invariant$1(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);\n\t          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);\n\t        } catch (ex) {\n\t          error = ex;\n\t        }\n\t        warning$1(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n\t        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n\t          // Only monitor this failure once because there tends to be a lot of the\n\t          // same error.\n\t          loggedTypeFailures[error.message] = true;\n\n\t          var stack = getStack ? getStack() : '';\n\n\t          warning$1(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tvar checkPropTypes_1 = checkPropTypes;\n\n\tvar factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {\n\t  /* global Symbol */\n\t  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n\t  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n\t  /**\n\t   * Returns the iterator method function contained on the iterable object.\n\t   *\n\t   * Be sure to invoke the function with the iterable as context:\n\t   *\n\t   *     var iteratorFn = getIteratorFn(myIterable);\n\t   *     if (iteratorFn) {\n\t   *       var iterator = iteratorFn.call(myIterable);\n\t   *       ...\n\t   *     }\n\t   *\n\t   * @param {?object} maybeIterable\n\t   * @return {?function}\n\t   */\n\t  function getIteratorFn(maybeIterable) {\n\t    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n\t    if (typeof iteratorFn === 'function') {\n\t      return iteratorFn;\n\t    }\n\t  }\n\n\t  /**\n\t   * Collection of methods that allow declaration and validation of props that are\n\t   * supplied to React components. Example usage:\n\t   *\n\t   *   var Props = require('ReactPropTypes');\n\t   *   var MyArticle = React.createClass({\n\t   *     propTypes: {\n\t   *       // An optional string prop named \"description\".\n\t   *       description: Props.string,\n\t   *\n\t   *       // A required enum prop named \"category\".\n\t   *       category: Props.oneOf(['News','Photos']).isRequired,\n\t   *\n\t   *       // A prop named \"dialog\" that requires an instance of Dialog.\n\t   *       dialog: Props.instanceOf(Dialog).isRequired\n\t   *     },\n\t   *     render: function() { ... }\n\t   *   });\n\t   *\n\t   * A more formal specification of how these methods are used:\n\t   *\n\t   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n\t   *   decl := ReactPropTypes.{type}(.isRequired)?\n\t   *\n\t   * Each and every declaration produces a function with the same signature. This\n\t   * allows the creation of custom validation functions. For example:\n\t   *\n\t   *  var MyLink = React.createClass({\n\t   *    propTypes: {\n\t   *      // An optional string or URI prop named \"href\".\n\t   *      href: function(props, propName, componentName) {\n\t   *        var propValue = props[propName];\n\t   *        if (propValue != null && typeof propValue !== 'string' &&\n\t   *            !(propValue instanceof URI)) {\n\t   *          return new Error(\n\t   *            'Expected a string or an URI for ' + propName + ' in ' +\n\t   *            componentName\n\t   *          );\n\t   *        }\n\t   *      }\n\t   *    },\n\t   *    render: function() {...}\n\t   *  });\n\t   *\n\t   * @internal\n\t   */\n\n\t  var ANONYMOUS = '<<anonymous>>';\n\n\t  // Important!\n\t  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n\t  var ReactPropTypes = {\n\t    array: createPrimitiveTypeChecker('array'),\n\t    bool: createPrimitiveTypeChecker('boolean'),\n\t    func: createPrimitiveTypeChecker('function'),\n\t    number: createPrimitiveTypeChecker('number'),\n\t    object: createPrimitiveTypeChecker('object'),\n\t    string: createPrimitiveTypeChecker('string'),\n\t    symbol: createPrimitiveTypeChecker('symbol'),\n\n\t    any: createAnyTypeChecker(),\n\t    arrayOf: createArrayOfTypeChecker,\n\t    element: createElementTypeChecker(),\n\t    instanceOf: createInstanceTypeChecker,\n\t    node: createNodeChecker(),\n\t    objectOf: createObjectOfTypeChecker,\n\t    oneOf: createEnumTypeChecker,\n\t    oneOfType: createUnionTypeChecker,\n\t    shape: createShapeTypeChecker,\n\t    exact: createStrictShapeTypeChecker,\n\t  };\n\n\t  /**\n\t   * inlined Object.is polyfill to avoid requiring consumers ship their own\n\t   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n\t   */\n\t  /*eslint-disable no-self-compare*/\n\t  function is(x, y) {\n\t    // SameValue algorithm\n\t    if (x === y) {\n\t      // Steps 1-5, 7-10\n\t      // Steps 6.b-6.e: +0 != -0\n\t      return x !== 0 || 1 / x === 1 / y;\n\t    } else {\n\t      // Step 6.a: NaN == NaN\n\t      return x !== x && y !== y;\n\t    }\n\t  }\n\t  /*eslint-enable no-self-compare*/\n\n\t  /**\n\t   * We use an Error-like object for backward compatibility as people may call\n\t   * PropTypes directly and inspect their output. However, we don't use real\n\t   * Errors anymore. We don't inspect their stack anyway, and creating them\n\t   * is prohibitively expensive if they are created too often, such as what\n\t   * happens in oneOfType() for any type before the one that matched.\n\t   */\n\t  function PropTypeError(message) {\n\t    this.message = message;\n\t    this.stack = '';\n\t  }\n\t  // Make `instanceof Error` still work for returned errors.\n\t  PropTypeError.prototype = Error.prototype;\n\n\t  function createChainableTypeChecker(validate) {\n\t    {\n\t      var manualPropTypeCallCache = {};\n\t      var manualPropTypeWarningCount = 0;\n\t    }\n\t    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n\t      componentName = componentName || ANONYMOUS;\n\t      propFullName = propFullName || propName;\n\n\t      if (secret !== ReactPropTypesSecret_1) {\n\t        if (throwOnDirectAccess) {\n\t          // New behavior only for users of `prop-types` package\n\t          invariant_1(\n\t            false,\n\t            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n\t            'Use `PropTypes.checkPropTypes()` to call them. ' +\n\t            'Read more at http://fb.me/use-check-prop-types'\n\t          );\n\t        } else if (\"development\" !== 'production' && typeof console !== 'undefined') {\n\t          // Old behavior for people using React.PropTypes\n\t          var cacheKey = componentName + ':' + propName;\n\t          if (\n\t            !manualPropTypeCallCache[cacheKey] &&\n\t            // Avoid spamming the console because they are often not actionable except for lib authors\n\t            manualPropTypeWarningCount < 3\n\t          ) {\n\t            warning_1(\n\t              false,\n\t              'You are manually calling a React.PropTypes validation ' +\n\t              'function for the `%s` prop on `%s`. This is deprecated ' +\n\t              'and will throw in the standalone `prop-types` package. ' +\n\t              'You may be seeing this warning due to a third-party PropTypes ' +\n\t              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',\n\t              propFullName,\n\t              componentName\n\t            );\n\t            manualPropTypeCallCache[cacheKey] = true;\n\t            manualPropTypeWarningCount++;\n\t          }\n\t        }\n\t      }\n\t      if (props[propName] == null) {\n\t        if (isRequired) {\n\t          if (props[propName] === null) {\n\t            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n\t          }\n\t          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n\t        }\n\t        return null;\n\t      } else {\n\t        return validate(props, propName, componentName, location, propFullName);\n\t      }\n\t    }\n\n\t    var chainedCheckType = checkType.bind(null, false);\n\t    chainedCheckType.isRequired = checkType.bind(null, true);\n\n\t    return chainedCheckType;\n\t  }\n\n\t  function createPrimitiveTypeChecker(expectedType) {\n\t    function validate(props, propName, componentName, location, propFullName, secret) {\n\t      var propValue = props[propName];\n\t      var propType = getPropType(propValue);\n\t      if (propType !== expectedType) {\n\t        // `propValue` being instance of, say, date/regexp, pass the 'object'\n\t        // check, but we can offer a more precise error message here rather than\n\t        // 'of type `object`'.\n\t        var preciseType = getPreciseType(propValue);\n\n\t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n\t      }\n\t      return null;\n\t    }\n\t    return createChainableTypeChecker(validate);\n\t  }\n\n\t  function createAnyTypeChecker() {\n\t    return createChainableTypeChecker(emptyFunction_1.thatReturnsNull);\n\t  }\n\n\t  function createArrayOfTypeChecker(typeChecker) {\n\t    function validate(props, propName, componentName, location, propFullName) {\n\t      if (typeof typeChecker !== 'function') {\n\t        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n\t      }\n\t      var propValue = props[propName];\n\t      if (!Array.isArray(propValue)) {\n\t        var propType = getPropType(propValue);\n\t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n\t      }\n\t      for (var i = 0; i < propValue.length; i++) {\n\t        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);\n\t        if (error instanceof Error) {\n\t          return error;\n\t        }\n\t      }\n\t      return null;\n\t    }\n\t    return createChainableTypeChecker(validate);\n\t  }\n\n\t  function createElementTypeChecker() {\n\t    function validate(props, propName, componentName, location, propFullName) {\n\t      var propValue = props[propName];\n\t      if (!isValidElement(propValue)) {\n\t        var propType = getPropType(propValue);\n\t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n\t      }\n\t      return null;\n\t    }\n\t    return createChainableTypeChecker(validate);\n\t  }\n\n\t  function createInstanceTypeChecker(expectedClass) {\n\t    function validate(props, propName, componentName, location, propFullName) {\n\t      if (!(props[propName] instanceof expectedClass)) {\n\t        var expectedClassName = expectedClass.name || ANONYMOUS;\n\t        var actualClassName = getClassName(props[propName]);\n\t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n\t      }\n\t      return null;\n\t    }\n\t    return createChainableTypeChecker(validate);\n\t  }\n\n\t  function createEnumTypeChecker(expectedValues) {\n\t    if (!Array.isArray(expectedValues)) {\n\t      warning_1(false, 'Invalid argument supplied to oneOf, expected an instance of array.');\n\t      return emptyFunction_1.thatReturnsNull;\n\t    }\n\n\t    function validate(props, propName, componentName, location, propFullName) {\n\t      var propValue = props[propName];\n\t      for (var i = 0; i < expectedValues.length; i++) {\n\t        if (is(propValue, expectedValues[i])) {\n\t          return null;\n\t        }\n\t      }\n\n\t      var valuesString = JSON.stringify(expectedValues);\n\t      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n\t    }\n\t    return createChainableTypeChecker(validate);\n\t  }\n\n\t  function createObjectOfTypeChecker(typeChecker) {\n\t    function validate(props, propName, componentName, location, propFullName) {\n\t      if (typeof typeChecker !== 'function') {\n\t        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n\t      }\n\t      var propValue = props[propName];\n\t      var propType = getPropType(propValue);\n\t      if (propType !== 'object') {\n\t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n\t      }\n\t      for (var key in propValue) {\n\t        if (propValue.hasOwnProperty(key)) {\n\t          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n\t          if (error instanceof Error) {\n\t            return error;\n\t          }\n\t        }\n\t      }\n\t      return null;\n\t    }\n\t    return createChainableTypeChecker(validate);\n\t  }\n\n\t  function createUnionTypeChecker(arrayOfTypeCheckers) {\n\t    if (!Array.isArray(arrayOfTypeCheckers)) {\n\t      warning_1(false, 'Invalid argument supplied to oneOfType, expected an instance of array.');\n\t      return emptyFunction_1.thatReturnsNull;\n\t    }\n\n\t    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n\t      var checker = arrayOfTypeCheckers[i];\n\t      if (typeof checker !== 'function') {\n\t        warning_1(\n\t          false,\n\t          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n\t          'received %s at index %s.',\n\t          getPostfixForTypeWarning(checker),\n\t          i\n\t        );\n\t        return emptyFunction_1.thatReturnsNull;\n\t      }\n\t    }\n\n\t    function validate(props, propName, componentName, location, propFullName) {\n\t      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n\t        var checker = arrayOfTypeCheckers[i];\n\t        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {\n\t          return null;\n\t        }\n\t      }\n\n\t      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n\t    }\n\t    return createChainableTypeChecker(validate);\n\t  }\n\n\t  function createNodeChecker() {\n\t    function validate(props, propName, componentName, location, propFullName) {\n\t      if (!isNode(props[propName])) {\n\t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n\t      }\n\t      return null;\n\t    }\n\t    return createChainableTypeChecker(validate);\n\t  }\n\n\t  function createShapeTypeChecker(shapeTypes) {\n\t    function validate(props, propName, componentName, location, propFullName) {\n\t      var propValue = props[propName];\n\t      var propType = getPropType(propValue);\n\t      if (propType !== 'object') {\n\t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n\t      }\n\t      for (var key in shapeTypes) {\n\t        var checker = shapeTypes[key];\n\t        if (!checker) {\n\t          continue;\n\t        }\n\t        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n\t        if (error) {\n\t          return error;\n\t        }\n\t      }\n\t      return null;\n\t    }\n\t    return createChainableTypeChecker(validate);\n\t  }\n\n\t  function createStrictShapeTypeChecker(shapeTypes) {\n\t    function validate(props, propName, componentName, location, propFullName) {\n\t      var propValue = props[propName];\n\t      var propType = getPropType(propValue);\n\t      if (propType !== 'object') {\n\t        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n\t      }\n\t      // We need to check all keys in case some are required but missing from\n\t      // props.\n\t      var allKeys = objectAssign({}, props[propName], shapeTypes);\n\t      for (var key in allKeys) {\n\t        var checker = shapeTypes[key];\n\t        if (!checker) {\n\t          return new PropTypeError(\n\t            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n\t            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n\t            '\\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')\n\t          );\n\t        }\n\t        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n\t        if (error) {\n\t          return error;\n\t        }\n\t      }\n\t      return null;\n\t    }\n\n\t    return createChainableTypeChecker(validate);\n\t  }\n\n\t  function isNode(propValue) {\n\t    switch (typeof propValue) {\n\t      case 'number':\n\t      case 'string':\n\t      case 'undefined':\n\t        return true;\n\t      case 'boolean':\n\t        return !propValue;\n\t      case 'object':\n\t        if (Array.isArray(propValue)) {\n\t          return propValue.every(isNode);\n\t        }\n\t        if (propValue === null || isValidElement(propValue)) {\n\t          return true;\n\t        }\n\n\t        var iteratorFn = getIteratorFn(propValue);\n\t        if (iteratorFn) {\n\t          var iterator = iteratorFn.call(propValue);\n\t          var step;\n\t          if (iteratorFn !== propValue.entries) {\n\t            while (!(step = iterator.next()).done) {\n\t              if (!isNode(step.value)) {\n\t                return false;\n\t              }\n\t            }\n\t          } else {\n\t            // Iterator will provide entry [k,v] tuples rather than values.\n\t            while (!(step = iterator.next()).done) {\n\t              var entry = step.value;\n\t              if (entry) {\n\t                if (!isNode(entry[1])) {\n\t                  return false;\n\t                }\n\t              }\n\t            }\n\t          }\n\t        } else {\n\t          return false;\n\t        }\n\n\t        return true;\n\t      default:\n\t        return false;\n\t    }\n\t  }\n\n\t  function isSymbol(propType, propValue) {\n\t    // Native Symbol.\n\t    if (propType === 'symbol') {\n\t      return true;\n\t    }\n\n\t    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n\t    if (propValue['@@toStringTag'] === 'Symbol') {\n\t      return true;\n\t    }\n\n\t    // Fallback for non-spec compliant Symbols which are polyfilled.\n\t    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n\t      return true;\n\t    }\n\n\t    return false;\n\t  }\n\n\t  // Equivalent of `typeof` but with special handling for array and regexp.\n\t  function getPropType(propValue) {\n\t    var propType = typeof propValue;\n\t    if (Array.isArray(propValue)) {\n\t      return 'array';\n\t    }\n\t    if (propValue instanceof RegExp) {\n\t      // Old webkits (at least until Android 4.0) return 'function' rather than\n\t      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n\t      // passes PropTypes.object.\n\t      return 'object';\n\t    }\n\t    if (isSymbol(propType, propValue)) {\n\t      return 'symbol';\n\t    }\n\t    return propType;\n\t  }\n\n\t  // This handles more types than `getPropType`. Only used for error messages.\n\t  // See `createPrimitiveTypeChecker`.\n\t  function getPreciseType(propValue) {\n\t    if (typeof propValue === 'undefined' || propValue === null) {\n\t      return '' + propValue;\n\t    }\n\t    var propType = getPropType(propValue);\n\t    if (propType === 'object') {\n\t      if (propValue instanceof Date) {\n\t        return 'date';\n\t      } else if (propValue instanceof RegExp) {\n\t        return 'regexp';\n\t      }\n\t    }\n\t    return propType;\n\t  }\n\n\t  // Returns a string that is postfixed to a warning about an invalid type.\n\t  // For example, \"undefined\" or \"of type array\"\n\t  function getPostfixForTypeWarning(value) {\n\t    var type = getPreciseType(value);\n\t    switch (type) {\n\t      case 'array':\n\t      case 'object':\n\t        return 'an ' + type;\n\t      case 'boolean':\n\t      case 'date':\n\t      case 'regexp':\n\t        return 'a ' + type;\n\t      default:\n\t        return type;\n\t    }\n\t  }\n\n\t  // Returns class name of the object, if any.\n\t  function getClassName(propValue) {\n\t    if (!propValue.constructor || !propValue.constructor.name) {\n\t      return ANONYMOUS;\n\t    }\n\t    return propValue.constructor.name;\n\t  }\n\n\t  ReactPropTypes.checkPropTypes = checkPropTypes_1;\n\t  ReactPropTypes.PropTypes = ReactPropTypes;\n\n\t  return ReactPropTypes;\n\t};\n\n\tvar propTypes = createCommonjsModule(function (module) {\n\t/**\n\t * Copyright (c) 2013-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t */\n\n\t{\n\t  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n\t    Symbol.for &&\n\t    Symbol.for('react.element')) ||\n\t    0xeac7;\n\n\t  var isValidElement = function(object) {\n\t    return typeof object === 'object' &&\n\t      object !== null &&\n\t      object.$$typeof === REACT_ELEMENT_TYPE;\n\t  };\n\n\t  // By explicitly using `prop-types` you are opting into new development behavior.\n\t  // http://fb.me/prop-types-in-prod\n\t  var throwOnDirectAccess = true;\n\t  module.exports = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);\n\t}\n\t});\n\n\tvar classnames = createCommonjsModule(function (module) {\n\t/*!\n\t  Copyright (c) 2016 Jed Watson.\n\t  Licensed under the MIT License (MIT), see\n\t  http://jedwatson.github.io/classnames\n\t*/\n\t/* global define */\n\n\t(function () {\n\n\t\tvar hasOwn = {}.hasOwnProperty;\n\n\t\tfunction classNames () {\n\t\t\tvar classes = [];\n\n\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\tvar arg = arguments[i];\n\t\t\t\tif (!arg) continue;\n\n\t\t\t\tvar argType = typeof arg;\n\n\t\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\t\tclasses.push(arg);\n\t\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t\t} else if (argType === 'object') {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn classes.join(' ');\n\t\t}\n\n\t\tif ('object' !== 'undefined' && module.exports) {\n\t\t\tmodule.exports = classNames;\n\t\t} else if (typeof undefined === 'function' && typeof undefined.amd === 'object' && undefined.amd) {\n\t\t\t// register as 'classnames', consistent with npm package name\n\t\t\tundefined('classnames', [], function () {\n\t\t\t\treturn classNames;\n\t\t\t});\n\t\t} else {\n\t\t\twindow.classNames = classNames;\n\t\t}\n\t}());\n\t});\n\n\t// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\n\tfunction findInArray(array /*: Array<any> | TouchList*/, callback /*: Function*/) /*: any*/ {\n\t  for (var i = 0, length = array.length; i < length; i++) {\n\t    if (callback.apply(callback, [array[i], i, array])) return array[i];\n\t  }\n\t}\n\n\tfunction isFunction(func /*: any*/) /*: boolean*/ {\n\t  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n\t}\n\n\tfunction isNum(num /*: any*/) /*: boolean*/ {\n\t  return typeof num === 'number' && !isNaN(num);\n\t}\n\n\tfunction int(a /*: string*/) /*: number*/ {\n\t  return parseInt(a, 10);\n\t}\n\n\tfunction dontSetMe(props /*: Object*/, propName /*: string*/, componentName /*: string*/) {\n\t  if (props[propName]) {\n\t    return new Error('Invalid prop ' + propName + ' passed to ' + componentName + ' - do not set this, set it on the child.');\n\t  }\n\t}\n\n\tvar prefixes = ['Moz', 'Webkit', 'O', 'ms'];\n\tfunction getPrefix() /*: string*/ {\n\t  var prop /*: string*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';\n\n\t  // Checking specifically for 'window.document' is for pseudo-browser server-side\n\t  // environments that define 'window' as the global context.\n\t  // E.g. React-rails (see https://github.com/reactjs/react-rails/pull/84)\n\t  if (typeof window === 'undefined' || typeof window.document === 'undefined') return '';\n\n\t  var style = window.document.documentElement.style;\n\n\t  if (prop in style) return '';\n\n\t  for (var i = 0; i < prefixes.length; i++) {\n\t    if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];\n\t  }\n\n\t  return '';\n\t}\n\n\tfunction browserPrefixToKey(prop /*: string*/, prefix /*: string*/) /*: string*/ {\n\t  return prefix ? '' + prefix + kebabToTitleCase(prop) : prop;\n\t}\n\n\tfunction kebabToTitleCase(str /*: string*/) /*: string*/ {\n\t  var out = '';\n\t  var shouldCapitalize = true;\n\t  for (var i = 0; i < str.length; i++) {\n\t    if (shouldCapitalize) {\n\t      out += str[i].toUpperCase();\n\t      shouldCapitalize = false;\n\t    } else if (str[i] === '-') {\n\t      shouldCapitalize = true;\n\t    } else {\n\t      out += str[i];\n\t    }\n\t  }\n\t  return out;\n\t}\n\n\t// Default export is the prefix itself, like 'Moz', 'Webkit', etc\n\t// Note that you may have to re-test for certain things; for instance, Chrome 50\n\t// can handle unprefixed `transform`, but not unprefixed `user-select`\n\tvar browserPrefix = getPrefix();\n\n\tvar classCallCheck = function (instance, Constructor) {\n\t  if (!(instance instanceof Constructor)) {\n\t    throw new TypeError(\"Cannot call a class as a function\");\n\t  }\n\t};\n\n\tvar createClass = function () {\n\t  function defineProperties(target, props) {\n\t    for (var i = 0; i < props.length; i++) {\n\t      var descriptor = props[i];\n\t      descriptor.enumerable = descriptor.enumerable || false;\n\t      descriptor.configurable = true;\n\t      if (\"value\" in descriptor) descriptor.writable = true;\n\t      Object.defineProperty(target, descriptor.key, descriptor);\n\t    }\n\t  }\n\n\t  return function (Constructor, protoProps, staticProps) {\n\t    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n\t    if (staticProps) defineProperties(Constructor, staticProps);\n\t    return Constructor;\n\t  };\n\t}();\n\n\tvar defineProperty = function (obj, key, value) {\n\t  if (key in obj) {\n\t    Object.defineProperty(obj, key, {\n\t      value: value,\n\t      enumerable: true,\n\t      configurable: true,\n\t      writable: true\n\t    });\n\t  } else {\n\t    obj[key] = value;\n\t  }\n\n\t  return obj;\n\t};\n\n\tvar _extends = Object.assign || function (target) {\n\t  for (var i = 1; i < arguments.length; i++) {\n\t    var source = arguments[i];\n\n\t    for (var key in source) {\n\t      if (Object.prototype.hasOwnProperty.call(source, key)) {\n\t        target[key] = source[key];\n\t      }\n\t    }\n\t  }\n\n\t  return target;\n\t};\n\n\tvar inherits = function (subClass, superClass) {\n\t  if (typeof superClass !== \"function\" && superClass !== null) {\n\t    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n\t  }\n\n\t  subClass.prototype = Object.create(superClass && superClass.prototype, {\n\t    constructor: {\n\t      value: subClass,\n\t      enumerable: false,\n\t      writable: true,\n\t      configurable: true\n\t    }\n\t  });\n\t  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t};\n\n\tvar possibleConstructorReturn = function (self, call) {\n\t  if (!self) {\n\t    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t  }\n\n\t  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n\t};\n\n\tvar slicedToArray = function () {\n\t  function sliceIterator(arr, i) {\n\t    var _arr = [];\n\t    var _n = true;\n\t    var _d = false;\n\t    var _e = undefined;\n\n\t    try {\n\t      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n\t        _arr.push(_s.value);\n\n\t        if (i && _arr.length === i) break;\n\t      }\n\t    } catch (err) {\n\t      _d = true;\n\t      _e = err;\n\t    } finally {\n\t      try {\n\t        if (!_n && _i[\"return\"]) _i[\"return\"]();\n\t      } finally {\n\t        if (_d) throw _e;\n\t      }\n\t    }\n\n\t    return _arr;\n\t  }\n\n\t  return function (arr, i) {\n\t    if (Array.isArray(arr)) {\n\t      return arr;\n\t    } else if (Symbol.iterator in Object(arr)) {\n\t      return sliceIterator(arr, i);\n\t    } else {\n\t      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n\t    }\n\t  };\n\t}();\n\n\t/*:: import type {ControlPosition, PositionOffsetControlPosition, MouseTouchEvent} from './types';*/\n\n\n\tvar matchesSelectorFunc = '';\n\tfunction matchesSelector(el /*: Node*/, selector /*: string*/) /*: boolean*/ {\n\t  if (!matchesSelectorFunc) {\n\t    matchesSelectorFunc = findInArray(['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'], function (method) {\n\t      // $FlowIgnore: Doesn't think elements are indexable\n\t      return isFunction(el[method]);\n\t    });\n\t  }\n\n\t  // Might not be found entirely (not an Element?) - in that case, bail\n\t  // $FlowIgnore: Doesn't think elements are indexable\n\t  if (!isFunction(el[matchesSelectorFunc])) return false;\n\n\t  // $FlowIgnore: Doesn't think elements are indexable\n\t  return el[matchesSelectorFunc](selector);\n\t}\n\n\t// Works up the tree to the draggable itself attempting to match selector.\n\tfunction matchesSelectorAndParentsTo(el /*: Node*/, selector /*: string*/, baseNode /*: Node*/) /*: boolean*/ {\n\t  var node = el;\n\t  do {\n\t    if (matchesSelector(node, selector)) return true;\n\t    if (node === baseNode) return false;\n\t    node = node.parentNode;\n\t  } while (node);\n\n\t  return false;\n\t}\n\n\tfunction addEvent(el /*: ?Node*/, event /*: string*/, handler /*: Function*/) /*: void*/ {\n\t  if (!el) {\n\t    return;\n\t  }\n\t  if (el.attachEvent) {\n\t    el.attachEvent('on' + event, handler);\n\t  } else if (el.addEventListener) {\n\t    el.addEventListener(event, handler, true);\n\t  } else {\n\t    // $FlowIgnore: Doesn't think elements are indexable\n\t    el['on' + event] = handler;\n\t  }\n\t}\n\n\tfunction removeEvent(el /*: ?Node*/, event /*: string*/, handler /*: Function*/) /*: void*/ {\n\t  if (!el) {\n\t    return;\n\t  }\n\t  if (el.detachEvent) {\n\t    el.detachEvent('on' + event, handler);\n\t  } else if (el.removeEventListener) {\n\t    el.removeEventListener(event, handler, true);\n\t  } else {\n\t    // $FlowIgnore: Doesn't think elements are indexable\n\t    el['on' + event] = null;\n\t  }\n\t}\n\n\tfunction outerHeight(node /*: HTMLElement*/) /*: number*/ {\n\t  // This is deliberately excluding margin for our calculations, since we are using\n\t  // offsetTop which is including margin. See getBoundPosition\n\t  var height = node.clientHeight;\n\t  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n\t  height += int(computedStyle.borderTopWidth);\n\t  height += int(computedStyle.borderBottomWidth);\n\t  return height;\n\t}\n\n\tfunction outerWidth(node /*: HTMLElement*/) /*: number*/ {\n\t  // This is deliberately excluding margin for our calculations, since we are using\n\t  // offsetLeft which is including margin. See getBoundPosition\n\t  var width = node.clientWidth;\n\t  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n\t  width += int(computedStyle.borderLeftWidth);\n\t  width += int(computedStyle.borderRightWidth);\n\t  return width;\n\t}\n\tfunction innerHeight(node /*: HTMLElement*/) /*: number*/ {\n\t  var height = node.clientHeight;\n\t  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n\t  height -= int(computedStyle.paddingTop);\n\t  height -= int(computedStyle.paddingBottom);\n\t  return height;\n\t}\n\n\tfunction innerWidth(node /*: HTMLElement*/) /*: number*/ {\n\t  var width = node.clientWidth;\n\t  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n\t  width -= int(computedStyle.paddingLeft);\n\t  width -= int(computedStyle.paddingRight);\n\t  return width;\n\t}\n\n\t// Get from offsetParent\n\tfunction offsetXYFromParent(evt /*: {clientX: number, clientY: number}*/, offsetParent /*: HTMLElement*/) /*: ControlPosition*/ {\n\t  var isBody = offsetParent === offsetParent.ownerDocument.body;\n\t  var offsetParentRect = isBody ? { left: 0, top: 0 } : offsetParent.getBoundingClientRect();\n\n\t  var x = evt.clientX + offsetParent.scrollLeft - offsetParentRect.left;\n\t  var y = evt.clientY + offsetParent.scrollTop - offsetParentRect.top;\n\n\t  return { x: x, y: y };\n\t}\n\n\tfunction createCSSTransform(controlPos /*: ControlPosition*/, positionOffset /*: PositionOffsetControlPosition*/) /*: Object*/ {\n\t  var translation = getTranslation(controlPos, positionOffset, 'px');\n\t  return defineProperty({}, browserPrefixToKey('transform', browserPrefix), translation);\n\t}\n\n\tfunction createSVGTransform(controlPos /*: ControlPosition*/, positionOffset /*: PositionOffsetControlPosition*/) /*: string*/ {\n\t  var translation = getTranslation(controlPos, positionOffset, '');\n\t  return translation;\n\t}\n\tfunction getTranslation(_ref2, positionOffset /*: PositionOffsetControlPosition*/, unitSuffix /*: string*/) /*: string*/ {\n\t  var x = _ref2.x,\n\t      y = _ref2.y;\n\n\t  var translation = 'translate(' + x + unitSuffix + ',' + y + unitSuffix + ')';\n\t  if (positionOffset) {\n\t    var defaultX = '' + (typeof positionOffset.x === 'string' ? positionOffset.x : positionOffset.x + unitSuffix);\n\t    var defaultY = '' + (typeof positionOffset.y === 'string' ? positionOffset.y : positionOffset.y + unitSuffix);\n\t    translation = 'translate(' + defaultX + ', ' + defaultY + ')' + translation;\n\t  }\n\t  return translation;\n\t}\n\n\tfunction getTouch(e /*: MouseTouchEvent*/, identifier /*: number*/) /*: ?{clientX: number, clientY: number}*/ {\n\t  return e.targetTouches && findInArray(e.targetTouches, function (t) {\n\t    return identifier === t.identifier;\n\t  }) || e.changedTouches && findInArray(e.changedTouches, function (t) {\n\t    return identifier === t.identifier;\n\t  });\n\t}\n\n\tfunction getTouchIdentifier(e /*: MouseTouchEvent*/) /*: ?number*/ {\n\t  if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;\n\t  if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;\n\t}\n\n\t// User-select Hacks:\n\t//\n\t// Useful for preventing blue highlights all over everything when dragging.\n\n\t// Note we're passing `document` b/c we could be iframed\n\tfunction addUserSelectStyles(doc /*: ?Document*/) {\n\t  if (!doc) return;\n\t  var styleEl = doc.getElementById('react-draggable-style-el');\n\t  if (!styleEl) {\n\t    styleEl = doc.createElement('style');\n\t    styleEl.type = 'text/css';\n\t    styleEl.id = 'react-draggable-style-el';\n\t    styleEl.innerHTML = '.react-draggable-transparent-selection *::-moz-selection {all: inherit;}\\n';\n\t    styleEl.innerHTML += '.react-draggable-transparent-selection *::selection {all: inherit;}\\n';\n\t    doc.getElementsByTagName('head')[0].appendChild(styleEl);\n\t  }\n\t  if (doc.body) addClassName(doc.body, 'react-draggable-transparent-selection');\n\t}\n\n\tfunction removeUserSelectStyles(doc /*: ?Document*/) {\n\t  try {\n\t    if (doc && doc.body) removeClassName(doc.body, 'react-draggable-transparent-selection');\n\t    // $FlowIgnore: IE\n\t    if (doc.selection) {\n\t      // $FlowIgnore: IE\n\t      doc.selection.empty();\n\t    } else {\n\t      window.getSelection().removeAllRanges(); // remove selection caused by scroll\n\t    }\n\t  } catch (e) {\n\t    // probably IE\n\t  }\n\t}\n\n\tfunction styleHacks() /*: Object*/ {\n\t  var childStyle /*: Object*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\t  // Workaround IE pointer events; see #51\n\t  // https://github.com/mzabriskie/react-draggable/issues/51#issuecomment-103488278\n\t  return _extends({\n\t    touchAction: 'none'\n\t  }, childStyle);\n\t}\n\n\tfunction addClassName(el /*: HTMLElement*/, className /*: string*/) {\n\t  if (el.classList) {\n\t    el.classList.add(className);\n\t  } else {\n\t    if (!el.className.match(new RegExp('(?:^|\\\\s)' + className + '(?!\\\\S)'))) {\n\t      el.className += ' ' + className;\n\t    }\n\t  }\n\t}\n\n\tfunction removeClassName(el /*: HTMLElement*/, className /*: string*/) {\n\t  if (el.classList) {\n\t    el.classList.remove(className);\n\t  } else {\n\t    el.className = el.className.replace(new RegExp('(?:^|\\\\s)' + className + '(?!\\\\S)', 'g'), '');\n\t  }\n\t}\n\n\t/*:: import type Draggable from '../Draggable';*/\n\t/*:: import type {Bounds, ControlPosition, DraggableData, MouseTouchEvent} from './types';*/\n\t/*:: import type DraggableCore from '../DraggableCore';*/\n\n\n\tfunction getBoundPosition(draggable /*: Draggable*/, x /*: number*/, y /*: number*/) /*: [number, number]*/ {\n\t  // If no bounds, short-circuit and move on\n\t  if (!draggable.props.bounds) return [x, y];\n\n\t  // Clone new bounds\n\t  var bounds = draggable.props.bounds;\n\n\t  bounds = typeof bounds === 'string' ? bounds : cloneBounds(bounds);\n\t  var node = findDOMNode(draggable);\n\n\t  if (typeof bounds === 'string') {\n\t    var ownerDocument = node.ownerDocument;\n\n\t    var ownerWindow = ownerDocument.defaultView;\n\t    var boundNode = void 0;\n\t    if (bounds === 'parent') {\n\t      boundNode = node.parentNode;\n\t    } else {\n\t      boundNode = ownerDocument.querySelector(bounds);\n\t    }\n\t    if (!(boundNode instanceof ownerWindow.HTMLElement)) {\n\t      throw new Error('Bounds selector \"' + bounds + '\" could not find an element.');\n\t    }\n\t    var nodeStyle = ownerWindow.getComputedStyle(node);\n\t    var boundNodeStyle = ownerWindow.getComputedStyle(boundNode);\n\t    // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.\n\t    bounds = {\n\t      left: -node.offsetLeft + int(boundNodeStyle.paddingLeft) + int(nodeStyle.marginLeft),\n\t      top: -node.offsetTop + int(boundNodeStyle.paddingTop) + int(nodeStyle.marginTop),\n\t      right: innerWidth(boundNode) - outerWidth(node) - node.offsetLeft + int(boundNodeStyle.paddingRight) - int(nodeStyle.marginRight),\n\t      bottom: innerHeight(boundNode) - outerHeight(node) - node.offsetTop + int(boundNodeStyle.paddingBottom) - int(nodeStyle.marginBottom)\n\t    };\n\t  }\n\n\t  // Keep x and y below right and bottom limits...\n\t  if (isNum(bounds.right)) x = Math.min(x, bounds.right);\n\t  if (isNum(bounds.bottom)) y = Math.min(y, bounds.bottom);\n\n\t  // But above left and top limits.\n\t  if (isNum(bounds.left)) x = Math.max(x, bounds.left);\n\t  if (isNum(bounds.top)) y = Math.max(y, bounds.top);\n\n\t  return [x, y];\n\t}\n\n\tfunction snapToGrid(grid /*: [number, number]*/, pendingX /*: number*/, pendingY /*: number*/) /*: [number, number]*/ {\n\t  var x = Math.round(pendingX / grid[0]) * grid[0];\n\t  var y = Math.round(pendingY / grid[1]) * grid[1];\n\t  return [x, y];\n\t}\n\n\tfunction canDragX(draggable /*: Draggable*/) /*: boolean*/ {\n\t  return draggable.props.axis === 'both' || draggable.props.axis === 'x';\n\t}\n\n\tfunction canDragY(draggable /*: Draggable*/) /*: boolean*/ {\n\t  return draggable.props.axis === 'both' || draggable.props.axis === 'y';\n\t}\n\n\t// Get {x, y} positions from event.\n\tfunction getControlPosition(e /*: MouseTouchEvent*/, touchIdentifier /*: ?number*/, draggableCore /*: DraggableCore*/) /*: ?ControlPosition*/ {\n\t  var touchObj = typeof touchIdentifier === 'number' ? getTouch(e, touchIdentifier) : null;\n\t  if (typeof touchIdentifier === 'number' && !touchObj) return null; // not the right touch\n\t  var node = findDOMNode(draggableCore);\n\t  // User can provide an offsetParent if desired.\n\t  var offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;\n\t  return offsetXYFromParent(touchObj || e, offsetParent);\n\t}\n\n\t// Create an data object exposed by <DraggableCore>'s events\n\tfunction createCoreData(draggable /*: DraggableCore*/, x /*: number*/, y /*: number*/) /*: DraggableData*/ {\n\t  var state = draggable.state;\n\t  var isStart = !isNum(state.lastX);\n\t  var node = findDOMNode(draggable);\n\n\t  if (isStart) {\n\t    // If this is our first move, use the x and y as last coords.\n\t    return {\n\t      node: node,\n\t      deltaX: 0, deltaY: 0,\n\t      lastX: x, lastY: y,\n\t      x: x, y: y\n\t    };\n\t  } else {\n\t    // Otherwise calculate proper values.\n\t    return {\n\t      node: node,\n\t      deltaX: x - state.lastX, deltaY: y - state.lastY,\n\t      lastX: state.lastX, lastY: state.lastY,\n\t      x: x, y: y\n\t    };\n\t  }\n\t}\n\n\t// Create an data exposed by <Draggable>'s events\n\tfunction createDraggableData(draggable /*: Draggable*/, coreData /*: DraggableData*/) /*: DraggableData*/ {\n\t  var scale = draggable.props.scale;\n\t  return {\n\t    node: coreData.node,\n\t    x: draggable.state.x + coreData.deltaX / scale,\n\t    y: draggable.state.y + coreData.deltaY / scale,\n\t    deltaX: coreData.deltaX / scale,\n\t    deltaY: coreData.deltaY / scale,\n\t    lastX: draggable.state.x,\n\t    lastY: draggable.state.y\n\t  };\n\t}\n\n\t// A lot faster than stringify/parse\n\tfunction cloneBounds(bounds /*: Bounds*/) /*: Bounds*/ {\n\t  return {\n\t    left: bounds.left,\n\t    top: bounds.top,\n\t    right: bounds.right,\n\t    bottom: bounds.bottom\n\t  };\n\t}\n\n\tfunction findDOMNode(draggable /*: Draggable | DraggableCore*/) /*: HTMLElement*/ {\n\t  var node = ReactDOM.findDOMNode(draggable);\n\t  if (!node) {\n\t    throw new Error('<DraggableCore>: Unmounted during event!');\n\t  }\n\t  // $FlowIgnore we can't assert on HTMLElement due to tests... FIXME\n\t  return node;\n\t}\n\n\t/*eslint no-console:0*/\n\tfunction log() {\n\t}\n\n\t/*:: import type {EventHandler, MouseTouchEvent} from './utils/types';*/\n\n\n\t// Simple abstraction for dragging events names.\n\t/*:: import type {Element as ReactElement} from 'react';*/\n\tvar eventsFor = {\n\t  touch: {\n\t    start: 'touchstart',\n\t    move: 'touchmove',\n\t    stop: 'touchend'\n\t  },\n\t  mouse: {\n\t    start: 'mousedown',\n\t    move: 'mousemove',\n\t    stop: 'mouseup'\n\t  }\n\t};\n\n\t// Default to mouse events.\n\tvar dragEventFor = eventsFor.mouse;\n\n\t/*:: type DraggableCoreState = {\n\t  dragging: boolean,\n\t  lastX: number,\n\t  lastY: number,\n\t  touchIdentifier: ?number\n\t};*/\n\t/*:: export type DraggableBounds = {\n\t  left: number,\n\t  right: number,\n\t  top: number,\n\t  bottom: number,\n\t};*/\n\t/*:: export type DraggableData = {\n\t  node: HTMLElement,\n\t  x: number, y: number,\n\t  deltaX: number, deltaY: number,\n\t  lastX: number, lastY: number,\n\t};*/\n\t/*:: export type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void;*/\n\t/*:: export type ControlPosition = {x: number, y: number};*/\n\t/*:: export type PositionOffsetControlPosition = {x: number|string, y: number|string};*/\n\n\n\t//\n\t// Define <DraggableCore>.\n\t//\n\t// <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can\n\t// work well with libraries that require more control over the element.\n\t//\n\n\t/*:: export type DraggableCoreProps = {\n\t  allowAnyClick: boolean,\n\t  cancel: string,\n\t  children: ReactElement<any>,\n\t  disabled: boolean,\n\t  enableUserSelectHack: boolean,\n\t  offsetParent: HTMLElement,\n\t  grid: [number, number],\n\t  handle: string,\n\t  onStart: DraggableEventHandler,\n\t  onDrag: DraggableEventHandler,\n\t  onStop: DraggableEventHandler,\n\t  onMouseDown: (e: MouseEvent) => void,\n\t};*/\n\n\tvar DraggableCore = function (_React$Component) {\n\t  inherits(DraggableCore, _React$Component);\n\n\t  function DraggableCore() {\n\t    var _ref;\n\n\t    var _temp, _this, _ret;\n\n\t    classCallCheck(this, DraggableCore);\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = DraggableCore.__proto__ || Object.getPrototypeOf(DraggableCore)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n\t      dragging: false,\n\t      // Used while dragging to determine deltas.\n\t      lastX: NaN, lastY: NaN,\n\t      touchIdentifier: null\n\t    }, _this.handleDragStart = function (e) {\n\t      // Make it possible to attach event handlers on top of this one.\n\t      _this.props.onMouseDown(e);\n\n\t      // Only accept left-clicks.\n\t      if (!_this.props.allowAnyClick && typeof e.button === 'number' && e.button !== 0) return false;\n\n\t      // Get nodes. Be sure to grab relative document (could be iframed)\n\t      var thisNode = ReactDOM.findDOMNode(_this);\n\t      if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {\n\t        throw new Error('<DraggableCore> not mounted on DragStart!');\n\t      }\n\t      var ownerDocument = thisNode.ownerDocument;\n\n\t      // Short circuit if handle or cancel prop was provided and selector doesn't match.\n\n\t      if (_this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || _this.props.handle && !matchesSelectorAndParentsTo(e.target, _this.props.handle, thisNode) || _this.props.cancel && matchesSelectorAndParentsTo(e.target, _this.props.cancel, thisNode)) {\n\t        return;\n\t      }\n\n\t      // Set touch identifier in component state if this is a touch event. This allows us to\n\t      // distinguish between individual touches on multitouch screens by identifying which\n\t      // touchpoint was set to this element.\n\t      var touchIdentifier = getTouchIdentifier(e);\n\t      _this.setState({ touchIdentifier: touchIdentifier });\n\n\t      // Get the current drag point from the event. This is used as the offset.\n\t      var position = getControlPosition(e, touchIdentifier, _this);\n\t      if (position == null) return; // not possible but satisfies flow\n\t      var x = position.x,\n\t          y = position.y;\n\n\t      // Create an event object with all the data parents need to make a decision here.\n\n\t      var coreEvent = createCoreData(_this, x, y);\n\n\t      // Call event handler. If it returns explicit false, cancel.\n\t      log('calling', _this.props.onStart);\n\t      var shouldUpdate = _this.props.onStart(e, coreEvent);\n\t      if (shouldUpdate === false) return;\n\n\t      // Add a style to the body to disable user-select. This prevents text from\n\t      // being selected all over the page.\n\t      if (_this.props.enableUserSelectHack) addUserSelectStyles(ownerDocument);\n\n\t      // Initiate dragging. Set the current x and y as offsets\n\t      // so we know how much we've moved during the drag. This allows us\n\t      // to drag elements around even if they have been moved, without issue.\n\t      _this.setState({\n\t        dragging: true,\n\n\t        lastX: x,\n\t        lastY: y\n\t      });\n\n\t      // Add events to the document directly so we catch when the user's mouse/touch moves outside of\n\t      // this element. We use different events depending on whether or not we have detected that this\n\t      // is a touch-capable device.\n\t      addEvent(ownerDocument, dragEventFor.move, _this.handleDrag);\n\t      addEvent(ownerDocument, dragEventFor.stop, _this.handleDragStop);\n\t    }, _this.handleDrag = function (e) {\n\n\t      // Prevent scrolling on mobile devices, like ipad/iphone.\n\t      if (e.type === 'touchmove') e.preventDefault();\n\n\t      // Get the current drag point from the event. This is used as the offset.\n\t      var position = getControlPosition(e, _this.state.touchIdentifier, _this);\n\t      if (position == null) return;\n\t      var x = position.x,\n\t          y = position.y;\n\n\t      // Snap to grid if prop has been provided\n\n\t      if (Array.isArray(_this.props.grid)) {\n\t        var _deltaX = x - _this.state.lastX,\n\t            _deltaY = y - _this.state.lastY;\n\n\t        var _snapToGrid = snapToGrid(_this.props.grid, _deltaX, _deltaY);\n\n\t        var _snapToGrid2 = slicedToArray(_snapToGrid, 2);\n\n\t        _deltaX = _snapToGrid2[0];\n\t        _deltaY = _snapToGrid2[1];\n\n\t        if (!_deltaX && !_deltaY) return; // skip useless drag\n\t        x = _this.state.lastX + _deltaX, y = _this.state.lastY + _deltaY;\n\t      }\n\n\t      var coreEvent = createCoreData(_this, x, y);\n\n\t      // Call event handler. If it returns explicit false, trigger end.\n\t      var shouldUpdate = _this.props.onDrag(e, coreEvent);\n\t      if (shouldUpdate === false) {\n\t        try {\n\t          // $FlowIgnore\n\t          _this.handleDragStop(new MouseEvent('mouseup'));\n\t        } catch (err) {\n\t          // Old browsers\n\t          var event = ((document.createEvent('MouseEvents') /*: any*/) /*: MouseTouchEvent*/);\n\t          // I see why this insanity was deprecated\n\t          // $FlowIgnore\n\t          event.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n\t          _this.handleDragStop(event);\n\t        }\n\t        return;\n\t      }\n\n\t      _this.setState({\n\t        lastX: x,\n\t        lastY: y\n\t      });\n\t    }, _this.handleDragStop = function (e) {\n\t      if (!_this.state.dragging) return;\n\n\t      var position = getControlPosition(e, _this.state.touchIdentifier, _this);\n\t      if (position == null) return;\n\t      var x = position.x,\n\t          y = position.y;\n\n\t      var coreEvent = createCoreData(_this, x, y);\n\n\t      var thisNode = ReactDOM.findDOMNode(_this);\n\t      if (thisNode) {\n\t        // Remove user-select hack\n\t        if (_this.props.enableUserSelectHack) removeUserSelectStyles(thisNode.ownerDocument);\n\t      }\n\n\t      // Reset the el.\n\t      _this.setState({\n\t        dragging: false,\n\t        lastX: NaN,\n\t        lastY: NaN\n\t      });\n\n\t      // Call event handler\n\t      _this.props.onStop(e, coreEvent);\n\n\t      if (thisNode) {\n\t        removeEvent(thisNode.ownerDocument, dragEventFor.move, _this.handleDrag);\n\t        removeEvent(thisNode.ownerDocument, dragEventFor.stop, _this.handleDragStop);\n\t      }\n\t    }, _this.onMouseDown = function (e) {\n\t      dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse\n\n\t      return _this.handleDragStart(e);\n\t    }, _this.onMouseUp = function (e) {\n\t      dragEventFor = eventsFor.mouse;\n\n\t      return _this.handleDragStop(e);\n\t    }, _this.onTouchStart = function (e) {\n\t      // We're on a touch device now, so change the event handlers\n\t      dragEventFor = eventsFor.touch;\n\n\t      return _this.handleDragStart(e);\n\t    }, _this.onTouchEnd = function (e) {\n\t      // We're on a touch device now, so change the event handlers\n\t      dragEventFor = eventsFor.touch;\n\n\t      return _this.handleDragStop(e);\n\t    }, _temp), possibleConstructorReturn(_this, _ret);\n\t  }\n\n\t  createClass(DraggableCore, [{\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      // Remove any leftover event handlers. Remove both touch and mouse handlers in case\n\t      // some browser quirk caused a touch event to fire during a mouse move, or vice versa.\n\t      var thisNode = ReactDOM.findDOMNode(this);\n\t      if (thisNode) {\n\t        var ownerDocument = thisNode.ownerDocument;\n\n\t        removeEvent(ownerDocument, eventsFor.mouse.move, this.handleDrag);\n\t        removeEvent(ownerDocument, eventsFor.touch.move, this.handleDrag);\n\t        removeEvent(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);\n\t        removeEvent(ownerDocument, eventsFor.touch.stop, this.handleDragStop);\n\t        if (this.props.enableUserSelectHack) removeUserSelectStyles(ownerDocument);\n\t      }\n\t    }\n\n\t    // Same as onMouseDown (start drag), but now consider this a touch device.\n\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Reuse the child provided\n\t      // This makes it flexible to use whatever element is wanted (div, ul, etc)\n\t      return React.cloneElement(React.Children.only(this.props.children), {\n\t        style: styleHacks(this.props.children.props.style),\n\n\t        // Note: mouseMove handler is attached to document so it will still function\n\t        // when the user drags quickly and leaves the bounds of the element.\n\t        onMouseDown: this.onMouseDown,\n\t        onTouchStart: this.onTouchStart,\n\t        onMouseUp: this.onMouseUp,\n\t        onTouchEnd: this.onTouchEnd\n\t      });\n\t    }\n\t  }]);\n\t  return DraggableCore;\n\t}(React.Component);\n\n\tDraggableCore.displayName = 'DraggableCore';\n\tDraggableCore.propTypes = {\n\t  /**\n\t   * `allowAnyClick` allows dragging using any mouse button.\n\t   * By default, we only accept the left button.\n\t   *\n\t   * Defaults to `false`.\n\t   */\n\t  allowAnyClick: propTypes.bool,\n\n\t  /**\n\t   * `disabled`, if true, stops the <Draggable> from dragging. All handlers,\n\t   * with the exception of `onMouseDown`, will not fire.\n\t   */\n\t  disabled: propTypes.bool,\n\n\t  /**\n\t   * By default, we add 'user-select:none' attributes to the document body\n\t   * to prevent ugly text selection during drag. If this is causing problems\n\t   * for your app, set this to `false`.\n\t   */\n\t  enableUserSelectHack: propTypes.bool,\n\n\t  /**\n\t   * `offsetParent`, if set, uses the passed DOM node to compute drag offsets\n\t   * instead of using the parent node.\n\t   */\n\t  offsetParent: function offsetParent(props /*: DraggableCoreProps*/, propName /*: $Keys<DraggableCoreProps>*/) {\n\t    if (props[propName] && props[propName].nodeType !== 1) {\n\t      throw new Error('Draggable\\'s offsetParent must be a DOM Node.');\n\t    }\n\t  },\n\n\t  /**\n\t   * `grid` specifies the x and y that dragging should snap to.\n\t   */\n\t  grid: propTypes.arrayOf(propTypes.number),\n\n\t  /**\n\t   * `scale` specifies the scale of the area you are dragging inside of. It allows\n\t   * the drag deltas to scale correctly with how far zoomed in/out you are.\n\t   */\n\t  scale: propTypes.number,\n\n\t  /**\n\t   * `handle` specifies a selector to be used as the handle that initiates drag.\n\t   *\n\t   * Example:\n\t   *\n\t   * ```jsx\n\t   *   let App = React.createClass({\n\t   *       render: function () {\n\t   *         return (\n\t   *            <Draggable handle=\".handle\">\n\t   *              <div>\n\t   *                  <div className=\"handle\">Click me to drag</div>\n\t   *                  <div>This is some other content</div>\n\t   *              </div>\n\t   *           </Draggable>\n\t   *         );\n\t   *       }\n\t   *   });\n\t   * ```\n\t   */\n\t  handle: propTypes.string,\n\n\t  /**\n\t   * `cancel` specifies a selector to be used to prevent drag initialization.\n\t   *\n\t   * Example:\n\t   *\n\t   * ```jsx\n\t   *   let App = React.createClass({\n\t   *       render: function () {\n\t   *           return(\n\t   *               <Draggable cancel=\".cancel\">\n\t   *                   <div>\n\t   *                     <div className=\"cancel\">You can't drag from here</div>\n\t   *                     <div>Dragging here works fine</div>\n\t   *                   </div>\n\t   *               </Draggable>\n\t   *           );\n\t   *       }\n\t   *   });\n\t   * ```\n\t   */\n\t  cancel: propTypes.string,\n\n\t  /**\n\t   * Called when dragging starts.\n\t   * If this function returns the boolean false, dragging will be canceled.\n\t   */\n\t  onStart: propTypes.func,\n\n\t  /**\n\t   * Called while dragging.\n\t   * If this function returns the boolean false, dragging will be canceled.\n\t   */\n\t  onDrag: propTypes.func,\n\n\t  /**\n\t   * Called when dragging stops.\n\t   * If this function returns the boolean false, the drag will remain active.\n\t   */\n\t  onStop: propTypes.func,\n\n\t  /**\n\t   * A workaround option which can be passed if onMouseDown needs to be accessed,\n\t   * since it'll always be blocked (as there is internal use of onMouseDown)\n\t   */\n\t  onMouseDown: propTypes.func,\n\n\t  /**\n\t   * These properties should be defined on the child, not here.\n\t   */\n\t  className: dontSetMe,\n\t  style: dontSetMe,\n\t  transform: dontSetMe\n\t};\n\tDraggableCore.defaultProps = {\n\t  allowAnyClick: false, // by default only accept left click\n\t  cancel: null,\n\t  disabled: false,\n\t  enableUserSelectHack: true,\n\t  offsetParent: null,\n\t  handle: null,\n\t  grid: null,\n\t  transform: null,\n\t  onStart: function onStart() {},\n\t  onDrag: function onDrag() {},\n\t  onStop: function onStop() {},\n\t  onMouseDown: function onMouseDown() {}\n\t};\n\n\t/*:: import type {DraggableEventHandler} from './utils/types';*/\n\t/*:: import type {Element as ReactElement} from 'react';*/\n\t/*:: type DraggableState = {\n\t  dragging: boolean,\n\t  dragged: boolean,\n\t  x: number, y: number,\n\t  slackX: number, slackY: number,\n\t  isElementSVG: boolean\n\t};*/\n\n\n\t//\n\t// Define <Draggable>\n\t//\n\n\t/*:: export type DraggableProps = {\n\t  ...$Exact<DraggableCoreProps>,\n\t  axis: 'both' | 'x' | 'y' | 'none',\n\t  bounds: DraggableBounds | string | false,\n\t  defaultClassName: string,\n\t  defaultClassNameDragging: string,\n\t  defaultClassNameDragged: string,\n\t  defaultPosition: ControlPosition,\n\t  positionOffset: PositionOffsetControlPosition,\n\t  position: ControlPosition,\n\t  scale: number\n\t};*/\n\n\tvar Draggable = function (_React$Component) {\n\t  inherits(Draggable, _React$Component);\n\n\t  function Draggable(props /*: DraggableProps*/) {\n\t    classCallCheck(this, Draggable);\n\n\t    var _this = possibleConstructorReturn(this, (Draggable.__proto__ || Object.getPrototypeOf(Draggable)).call(this, props));\n\n\t    _this.onDragStart = function (e, coreData) {\n\n\t      // Short-circuit if user's callback killed it.\n\t      var shouldStart = _this.props.onStart(e, createDraggableData(_this, coreData));\n\t      // Kills start event on core as well, so move handlers are never bound.\n\t      if (shouldStart === false) return false;\n\n\t      _this.setState({ dragging: true, dragged: true });\n\t    };\n\n\t    _this.onDrag = function (e, coreData) {\n\t      if (!_this.state.dragging) return false;\n\n\t      var uiData = createDraggableData(_this, coreData);\n\n\t      var newState /*: $Shape<DraggableState>*/ = {\n\t        x: uiData.x,\n\t        y: uiData.y\n\t      };\n\n\t      // Keep within bounds.\n\t      if (_this.props.bounds) {\n\t        // Save original x and y.\n\t        var _x = newState.x,\n\t            _y = newState.y;\n\n\t        // Add slack to the values used to calculate bound position. This will ensure that if\n\t        // we start removing slack, the element won't react to it right away until it's been\n\t        // completely removed.\n\n\t        newState.x += _this.state.slackX;\n\t        newState.y += _this.state.slackY;\n\n\t        // Get bound position. This will ceil/floor the x and y within the boundaries.\n\n\t        var _getBoundPosition = getBoundPosition(_this, newState.x, newState.y),\n\t            _getBoundPosition2 = slicedToArray(_getBoundPosition, 2),\n\t            newStateX = _getBoundPosition2[0],\n\t            newStateY = _getBoundPosition2[1];\n\n\t        newState.x = newStateX;\n\t        newState.y = newStateY;\n\n\t        // Recalculate slack by noting how much was shaved by the boundPosition handler.\n\t        newState.slackX = _this.state.slackX + (_x - newState.x);\n\t        newState.slackY = _this.state.slackY + (_y - newState.y);\n\n\t        // Update the event we fire to reflect what really happened after bounds took effect.\n\t        uiData.x = newState.x;\n\t        uiData.y = newState.y;\n\t        uiData.deltaX = newState.x - _this.state.x;\n\t        uiData.deltaY = newState.y - _this.state.y;\n\t      }\n\n\t      // Short-circuit if user's callback killed it.\n\t      var shouldUpdate = _this.props.onDrag(e, uiData);\n\t      if (shouldUpdate === false) return false;\n\n\t      _this.setState(newState);\n\t    };\n\n\t    _this.onDragStop = function (e, coreData) {\n\t      if (!_this.state.dragging) return false;\n\n\t      // Short-circuit if user's callback killed it.\n\t      var shouldStop = _this.props.onStop(e, createDraggableData(_this, coreData));\n\t      if (shouldStop === false) return false;\n\n\t      var newState /*: $Shape<DraggableState>*/ = {\n\t        dragging: false,\n\t        slackX: 0,\n\t        slackY: 0\n\t      };\n\n\t      // If this is a controlled component, the result of this operation will be to\n\t      // revert back to the old position. We expect a handler on `onDragStop`, at the least.\n\t      var controlled = Boolean(_this.props.position);\n\t      if (controlled) {\n\t        var _this$props$position = _this.props.position,\n\t            _x2 = _this$props$position.x,\n\t            _y2 = _this$props$position.y;\n\n\t        newState.x = _x2;\n\t        newState.y = _y2;\n\t      }\n\n\t      _this.setState(newState);\n\t    };\n\n\t    _this.state = {\n\t      // Whether or not we are currently dragging.\n\t      dragging: false,\n\n\t      // Whether or not we have been dragged before.\n\t      dragged: false,\n\n\t      // Current transform x and y.\n\t      x: props.position ? props.position.x : props.defaultPosition.x,\n\t      y: props.position ? props.position.y : props.defaultPosition.y,\n\n\t      // Used for compensating for out-of-bounds drags\n\t      slackX: 0, slackY: 0,\n\n\t      // Can only determine if SVG after mounting\n\t      isElementSVG: false\n\t    };\n\n\t    if (props.position && !(props.onDrag || props.onStop)) {\n\t      // eslint-disable-next-line no-console\n\t      console.warn('A `position` was applied to this <Draggable>, without drag handlers. This will make this ' + 'component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the ' + '`position` of this element.');\n\t    }\n\t    return _this;\n\t  }\n\n\t  createClass(Draggable, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      // Check to see if the element passed is an instanceof SVGElement\n\t      if (typeof window.SVGElement !== 'undefined' && ReactDOM.findDOMNode(this) instanceof window.SVGElement) {\n\t        this.setState({ isElementSVG: true });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'componentWillReceiveProps',\n\t    value: function componentWillReceiveProps(nextProps /*: Object*/) {\n\t      // Set x/y if position has changed\n\t      if (nextProps.position && (!this.props.position || nextProps.position.x !== this.props.position.x || nextProps.position.y !== this.props.position.y)) {\n\t        this.setState({ x: nextProps.position.x, y: nextProps.position.y });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      this.setState({ dragging: false }); // prevents invariant if unmounted while dragging\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() /*: ReactElement<any>*/ {\n\t      var _classNames;\n\n\t      var style = {},\n\t          svgTransform = null;\n\n\t      // If this is controlled, we don't want to move it - unless it's dragging.\n\t      var controlled = Boolean(this.props.position);\n\t      var draggable = !controlled || this.state.dragging;\n\n\t      var position = this.props.position || this.props.defaultPosition;\n\t      var transformOpts = {\n\t        // Set left if horizontal drag is enabled\n\t        x: canDragX(this) && draggable ? this.state.x : position.x,\n\n\t        // Set top if vertical drag is enabled\n\t        y: canDragY(this) && draggable ? this.state.y : position.y\n\t      };\n\n\t      // If this element was SVG, we use the `transform` attribute.\n\t      if (this.state.isElementSVG) {\n\t        svgTransform = createSVGTransform(transformOpts, this.props.positionOffset);\n\t      } else {\n\t        // Add a CSS transform to move the element around. This allows us to move the element around\n\t        // without worrying about whether or not it is relatively or absolutely positioned.\n\t        // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>\n\t        // has a clean slate.\n\t        style = createCSSTransform(transformOpts, this.props.positionOffset);\n\t      }\n\n\t      var _props = this.props,\n\t          defaultClassName = _props.defaultClassName,\n\t          defaultClassNameDragging = _props.defaultClassNameDragging,\n\t          defaultClassNameDragged = _props.defaultClassNameDragged;\n\n\n\t      var children = React.Children.only(this.props.children);\n\n\t      // Mark with class while dragging\n\t      var className = classnames(children.props.className || '', defaultClassName, (_classNames = {}, defineProperty(_classNames, defaultClassNameDragging, this.state.dragging), defineProperty(_classNames, defaultClassNameDragged, this.state.dragged), _classNames));\n\n\t      // Reuse the child provided\n\t      // This makes it flexible to use whatever element is wanted (div, ul, etc)\n\t      return React.createElement(\n\t        DraggableCore,\n\t        _extends({}, this.props, { onStart: this.onDragStart, onDrag: this.onDrag, onStop: this.onDragStop }),\n\t        React.cloneElement(children, {\n\t          className: className,\n\t          style: _extends({}, children.props.style, style),\n\t          transform: svgTransform\n\t        })\n\t      );\n\t    }\n\t  }]);\n\t  return Draggable;\n\t}(React.Component);\n\n\tDraggable.displayName = 'Draggable';\n\tDraggable.propTypes = _extends({}, DraggableCore.propTypes, {\n\n\t  /**\n\t   * `axis` determines which axis the draggable can move.\n\t   *\n\t   *  Note that all callbacks will still return data as normal. This only\n\t   *  controls flushing to the DOM.\n\t   *\n\t   * 'both' allows movement horizontally and vertically.\n\t   * 'x' limits movement to horizontal axis.\n\t   * 'y' limits movement to vertical axis.\n\t   * 'none' limits all movement.\n\t   *\n\t   * Defaults to 'both'.\n\t   */\n\t  axis: propTypes.oneOf(['both', 'x', 'y', 'none']),\n\n\t  /**\n\t   * `bounds` determines the range of movement available to the element.\n\t   * Available values are:\n\t   *\n\t   * 'parent' restricts movement within the Draggable's parent node.\n\t   *\n\t   * Alternatively, pass an object with the following properties, all of which are optional:\n\t   *\n\t   * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}\n\t   *\n\t   * All values are in px.\n\t   *\n\t   * Example:\n\t   *\n\t   * ```jsx\n\t   *   let App = React.createClass({\n\t   *       render: function () {\n\t   *         return (\n\t   *            <Draggable bounds={{right: 300, bottom: 300}}>\n\t   *              <div>Content</div>\n\t   *           </Draggable>\n\t   *         );\n\t   *       }\n\t   *   });\n\t   * ```\n\t   */\n\t  bounds: propTypes.oneOfType([propTypes.shape({\n\t    left: propTypes.number,\n\t    right: propTypes.number,\n\t    top: propTypes.number,\n\t    bottom: propTypes.number\n\t  }), propTypes.string, propTypes.oneOf([false])]),\n\n\t  defaultClassName: propTypes.string,\n\t  defaultClassNameDragging: propTypes.string,\n\t  defaultClassNameDragged: propTypes.string,\n\n\t  /**\n\t   * `defaultPosition` specifies the x and y that the dragged item should start at\n\t   *\n\t   * Example:\n\t   *\n\t   * ```jsx\n\t   *      let App = React.createClass({\n\t   *          render: function () {\n\t   *              return (\n\t   *                  <Draggable defaultPosition={{x: 25, y: 25}}>\n\t   *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n\t   *                  </Draggable>\n\t   *              );\n\t   *          }\n\t   *      });\n\t   * ```\n\t   */\n\t  defaultPosition: propTypes.shape({\n\t    x: propTypes.number,\n\t    y: propTypes.number\n\t  }),\n\t  positionOffset: propTypes.shape({\n\t    x: propTypes.oneOfType([propTypes.number, propTypes.string]),\n\t    y: propTypes.oneOfType([propTypes.number, propTypes.string])\n\t  }),\n\n\t  /**\n\t   * `position`, if present, defines the current position of the element.\n\t   *\n\t   *  This is similar to how form elements in React work - if no `position` is supplied, the component\n\t   *  is uncontrolled.\n\t   *\n\t   * Example:\n\t   *\n\t   * ```jsx\n\t   *      let App = React.createClass({\n\t   *          render: function () {\n\t   *              return (\n\t   *                  <Draggable position={{x: 25, y: 25}}>\n\t   *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n\t   *                  </Draggable>\n\t   *              );\n\t   *          }\n\t   *      });\n\t   * ```\n\t   */\n\t  position: propTypes.shape({\n\t    x: propTypes.number,\n\t    y: propTypes.number\n\t  }),\n\n\t  /**\n\t   * These properties should be defined on the child, not here.\n\t   */\n\t  className: dontSetMe,\n\t  style: dontSetMe,\n\t  transform: dontSetMe\n\t});\n\tDraggable.defaultProps = _extends({}, DraggableCore.defaultProps, {\n\t  axis: 'both',\n\t  bounds: false,\n\t  defaultClassName: 'react-draggable',\n\t  defaultClassNameDragging: 'react-draggable-dragging',\n\t  defaultClassNameDragged: 'react-draggable-dragged',\n\t  defaultPosition: { x: 0, y: 0 },\n\t  position: null,\n\t  scale: 1\n\t});\n\n\t// Previous versions of this lib exported <Draggable> as the root export. As to not break\n\t// them, or TypeScript, we export *both* as the root and as 'default'.\n\t// See https://github.com/mzabriskie/react-draggable/pull/254\n\t// and https://github.com/mzabriskie/react-draggable/issues/266\n\tDraggable.default = Draggable;\n\tDraggable.DraggableCore = DraggableCore;\n\n\treturn Draggable;\n\n})));\n//# sourceMappingURL=react-draggable.js.map\n","import React, { PureComponent, ReactNode } from 'react';\nimport ClipboardJS from 'clipboard';\n\ninterface Props {\n  text: () => string;\n  elType?: string;\n  onSuccess?: (evt: any) => void;\n  onError?: (evt: any) => void;\n  className?: string;\n  children?: ReactNode;\n}\n\nexport class CopyToClipboard extends PureComponent<Props> {\n  clipboardjs?: ClipboardJS;\n  myRef: any;\n\n  constructor(props: Props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { text, onSuccess, onError } = this.props;\n\n    this.clipboardjs = new ClipboardJS(this.myRef.current, {\n      text: text,\n    });\n\n    if (onSuccess) {\n      this.clipboardjs.on('success', evt => {\n        evt.clearSelection();\n        onSuccess(evt);\n      });\n    }\n\n    if (onError) {\n      this.clipboardjs.on('error', evt => {\n        console.error('Action:', evt.action);\n        console.error('Trigger:', evt.trigger);\n        onError(evt);\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.clipboardjs) {\n      this.clipboardjs.destroy();\n    }\n  }\n\n  getElementType = () => {\n    return this.props.elType || 'button';\n  };\n\n  render() {\n    const { elType, text, children, onError, onSuccess, ...restProps } = this.props;\n\n    return React.createElement(\n      this.getElementType(),\n      {\n        ref: this.myRef,\n        ...restProps,\n      },\n      this.props.children\n    );\n  }\n}\n","import React, { forwardRef } from 'react';\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\n\nexport interface Props {\n  value: string | undefined;\n  placeholder?: string;\n  labelClassName?: string;\n  inputClassName?: string;\n  onChange: (value: string) => void;\n}\n\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\n  <label className={props.labelClassName}>\n    <input\n      ref={ref}\n      type=\"text\"\n      className={props.inputClassName}\n      value={unEscapeStringFromRegex(props.value)}\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\n      placeholder={props.placeholder ? props.placeholder : null}\n    />\n    <i className=\"gf-form-input-icon fa fa-search\" />\n  </label>\n));\n","import React, { PureComponent } from 'react';\nimport { renderMarkdown } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\n\ninterface Props {\n  plugin: {\n    name: string;\n    id: string;\n  };\n  type: string;\n}\n\ninterface State {\n  isError: boolean;\n  isLoading: boolean;\n  help: string;\n}\n\nexport class PluginHelp extends PureComponent<Props, State> {\n  state = {\n    isError: false,\n    isLoading: false,\n    help: '',\n  };\n\n  componentDidMount(): void {\n    this.loadHelp();\n  }\n\n  constructPlaceholderInfo() {\n    return 'No plugin help or readme markdown file was found';\n  }\n\n  loadHelp = () => {\n    const { plugin, type } = this.props;\n    this.setState({ isLoading: true });\n\n    getBackendSrv()\n      .get(`/api/plugins/${plugin.id}/markdown/${type}`)\n      .then((response: string) => {\n        const helpHtml = renderMarkdown(response);\n\n        if (response === '' && type === 'help') {\n          this.setState({\n            isError: false,\n            isLoading: false,\n            help: this.constructPlaceholderInfo(),\n          });\n        } else {\n          this.setState({\n            isError: false,\n            isLoading: false,\n            help: helpHtml,\n          });\n        }\n      })\n      .catch(() => {\n        this.setState({\n          isError: true,\n          isLoading: false,\n        });\n      });\n  };\n\n  render() {\n    const { type } = this.props;\n    const { isError, isLoading, help } = this.state;\n\n    if (isLoading) {\n      return <h2>Loading help...</h2>;\n    }\n\n    if (isError) {\n      return <h3>'Error occurred when loading help'</h3>;\n    }\n\n    if (type === 'panel_help' && help === '') {\n    }\n\n    return <div className=\"markdown-html\" dangerouslySetInnerHTML={{ __html: help }} />;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { css } from 'emotion';\nimport { Alert, Button } from '@grafana/ui';\n\nimport { AngularComponent, getAngularLoader, getDataSourceSrv } from '@grafana/runtime';\nimport appEvents from 'app/core/app_events';\nimport { getAlertingValidationMessage } from './getAlertingValidationMessage';\n\nimport { EditorTabBody, EditorToolbarView } from '../dashboard/panel_editor/EditorTabBody';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport StateHistory from './StateHistory';\nimport 'app/features/alerting/AlertTabCtrl';\n\nimport { DashboardModel } from '../dashboard/state/DashboardModel';\nimport { PanelModel } from '../dashboard/state/PanelModel';\nimport { TestRuleResult } from './TestRuleResult';\nimport { AppNotificationSeverity, StoreState } from 'app/types';\nimport { PanelEditorTabIds, getPanelEditorTab } from '../dashboard/panel_editor/state/reducers';\nimport { changePanelEditorTab } from '../dashboard/panel_editor/state/actions';\nimport { CoreEvents } from 'app/types';\n\ninterface Props {\n  angularPanel?: AngularComponent;\n  dashboard: DashboardModel;\n  panel: PanelModel;\n  changePanelEditorTab: typeof changePanelEditorTab;\n}\n\ninterface State {\n  validatonMessage: string;\n}\n\nclass UnConnectedAlertTab extends PureComponent<Props, State> {\n  element: any;\n  component: AngularComponent;\n  panelCtrl: any;\n\n  state: State = {\n    validatonMessage: '',\n  };\n\n  componentDidMount() {\n    if (this.shouldLoadAlertTab()) {\n      this.loadAlertTab();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.shouldLoadAlertTab()) {\n      this.loadAlertTab();\n    }\n  }\n\n  shouldLoadAlertTab() {\n    return this.props.angularPanel && this.element && !this.component;\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  async loadAlertTab() {\n    const { angularPanel, panel } = this.props;\n\n    const scope = angularPanel.getScope();\n\n    // When full page reloading in edit mode the angular panel has on fully compiled & instantiated yet\n    if (!scope.$$childHead) {\n      setTimeout(() => {\n        this.forceUpdate();\n      });\n      return;\n    }\n\n    this.panelCtrl = scope.$$childHead.ctrl;\n    const loader = getAngularLoader();\n    const template = '<alert-tab />';\n\n    const scopeProps = { ctrl: this.panelCtrl };\n\n    this.component = loader.load(this.element, scopeProps, template);\n\n    const validatonMessage = await getAlertingValidationMessage(\n      panel.transformations,\n      panel.targets,\n      getDataSourceSrv(),\n      panel.datasource\n    );\n\n    if (validatonMessage) {\n      this.setState({ validatonMessage });\n    }\n  }\n\n  stateHistory = (): EditorToolbarView => {\n    return {\n      title: 'State history',\n      render: () => {\n        return (\n          <StateHistory\n            dashboard={this.props.dashboard}\n            panelId={this.props.panel.id}\n            onRefresh={this.panelCtrl.refresh}\n          />\n        );\n      },\n    };\n  };\n\n  deleteAlert = (): EditorToolbarView => {\n    const { panel } = this.props;\n    return {\n      title: 'Delete',\n      btnType: 'danger',\n      onClick: () => {\n        appEvents.emit(CoreEvents.showConfirmModal, {\n          title: 'Delete Alert',\n          text: 'Are you sure you want to delete this alert rule?',\n          text2: 'You need to save dashboard for the delete to take effect',\n          icon: 'fa-trash',\n          yesText: 'Delete',\n          onConfirm: () => {\n            delete panel.alert;\n            panel.thresholds = [];\n            this.panelCtrl.alertState = null;\n            this.panelCtrl.render();\n            this.forceUpdate();\n          },\n        });\n      },\n    };\n  };\n\n  renderTestRuleResult = () => {\n    const { panel, dashboard } = this.props;\n    return <TestRuleResult panelId={panel.id} dashboard={dashboard} />;\n  };\n\n  testRule = (): EditorToolbarView => ({\n    title: 'Test Rule',\n    render: () => this.renderTestRuleResult(),\n  });\n\n  onAddAlert = () => {\n    this.panelCtrl._enableAlert();\n    this.component.digest();\n    this.forceUpdate();\n  };\n\n  switchToQueryTab = () => {\n    const { changePanelEditorTab } = this.props;\n    changePanelEditorTab(getPanelEditorTab(PanelEditorTabIds.Queries));\n  };\n\n  renderValidationMessage = () => {\n    const { validatonMessage } = this.state;\n\n    return (\n      <div\n        className={css`\n          width: 508px;\n          margin: 128px auto;\n        `}\n      >\n        <h2>{validatonMessage}</h2>\n        <br />\n        <div className=\"gf-form-group\">\n          <Button size={'md'} variant={'secondary'} icon=\"fa fa-arrow-left\" onClick={this.switchToQueryTab}>\n            Go back to Queries\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    const { alert, transformations } = this.props.panel;\n    const { validatonMessage } = this.state;\n    const hasTransformations = transformations && transformations.length > 0;\n\n    if (!alert && validatonMessage) {\n      return this.renderValidationMessage();\n    }\n\n    const toolbarItems = alert ? [this.stateHistory(), this.testRule(), this.deleteAlert()] : [];\n\n    const model = {\n      title: 'Panel has no alert rule defined',\n      buttonIcon: 'gicon gicon-alert',\n      onClick: this.onAddAlert,\n      buttonTitle: 'Create Alert',\n    };\n\n    return (\n      <EditorTabBody heading=\"Alert\" toolbarItems={toolbarItems}>\n        <>\n          {alert && hasTransformations && (\n            <Alert\n              severity={AppNotificationSeverity.Error}\n              title=\"Transformations are not supported in alert queries\"\n            />\n          )}\n\n          <div ref={element => (this.element = element)} />\n          {!alert && !validatonMessage && <EmptyListCTA {...model} />}\n        </>\n      </EditorTabBody>\n    );\n  }\n}\n\nexport const mapStateToProps = (state: StoreState) => ({});\n\nconst mapDispatchToProps = { changePanelEditorTab };\n\nexport const AlertTab = hot(module)(connect(mapStateToProps, mapDispatchToProps)(UnConnectedAlertTab));\n","import React, { PureComponent } from 'react';\nimport alertDef from './state/alertDef';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { DashboardModel } from '../dashboard/state/DashboardModel';\nimport appEvents from '../../core/app_events';\nimport { CoreEvents } from 'app/types';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panelId: number;\n  onRefresh: () => void;\n}\n\ninterface State {\n  stateHistoryItems: any[];\n}\n\nclass StateHistory extends PureComponent<Props, State> {\n  state: State = {\n    stateHistoryItems: [],\n  };\n\n  componentDidMount(): void {\n    const { dashboard, panelId } = this.props;\n\n    getBackendSrv()\n      .get(`/api/annotations?dashboardId=${dashboard.id}&panelId=${panelId}&limit=50&type=alert`)\n      .then((res: any[]) => {\n        const items = res.map((item: any) => {\n          return {\n            stateModel: alertDef.getStateDisplayModel(item.newState),\n            time: dashboard.formatDate(item.time, 'MMM D, YYYY HH:mm:ss'),\n            info: alertDef.getAlertAnnotationInfo(item),\n          };\n        });\n\n        this.setState({\n          stateHistoryItems: items,\n        });\n      });\n  }\n\n  clearHistory = () => {\n    const { dashboard, onRefresh, panelId } = this.props;\n\n    appEvents.emit(CoreEvents.showConfirmModal, {\n      title: 'Delete Alert History',\n      text: 'Are you sure you want to remove all history & annotations for this alert?',\n      icon: 'fa-trash',\n      yesText: 'Yes',\n      onConfirm: () => {\n        getBackendSrv()\n          .post('/api/annotations/mass-delete', {\n            dashboardId: dashboard.id,\n            panelId: panelId,\n          })\n          .then(() => {\n            this.setState({\n              stateHistoryItems: [],\n            });\n            onRefresh();\n          });\n      },\n    });\n  };\n\n  render() {\n    const { stateHistoryItems } = this.state;\n\n    return (\n      <div>\n        {stateHistoryItems.length > 0 && (\n          <div className=\"p-b-1\">\n            <span className=\"muted\">Last 50 state changes</span>\n            <button className=\"btn btn-small btn-danger pull-right\" onClick={this.clearHistory}>\n              <i className=\"fa fa-trash\" /> {` Clear history`}\n            </button>\n          </div>\n        )}\n        <ol className=\"alert-rule-list\">\n          {stateHistoryItems.length > 0 ? (\n            stateHistoryItems.map((item, index) => {\n              return (\n                <li className=\"alert-rule-item\" key={`${item.time}-${index}`}>\n                  <div className={`alert-rule-item__icon ${item.stateModel.stateClass}`}>\n                    <i className={item.stateModel.iconClass} />\n                  </div>\n                  <div className=\"alert-rule-item__body\">\n                    <div className=\"alert-rule-item__header\">\n                      <p className=\"alert-rule-item__name\">{item.alertName}</p>\n                      <div className=\"alert-rule-item__text\">\n                        <span className={`${item.stateModel.stateClass}`}>{item.stateModel.text}</span>\n                      </div>\n                    </div>\n                    {item.info}\n                  </div>\n                  <div className=\"alert-rule-item__time\">{item.time}</div>\n                </li>\n              );\n            })\n          ) : (\n            <i>No state changes recorded</i>\n          )}\n        </ol>\n      </div>\n    );\n  }\n}\n\nexport default StateHistory;\n","import React, { PureComponent } from 'react';\nimport { LoadingPlaceholder, JSONFormatter } from '@grafana/ui';\n\nimport appEvents from 'app/core/app_events';\nimport { CopyToClipboard } from 'app/core/components/CopyToClipboard/CopyToClipboard';\nimport { DashboardModel } from '../dashboard/state/DashboardModel';\nimport { getBackendSrv, BackendSrv } from '@grafana/runtime';\nimport { AppEvents } from '@grafana/data';\n\nexport interface Props {\n  panelId: number;\n  dashboard: DashboardModel;\n}\n\ninterface State {\n  isLoading: boolean;\n  allNodesExpanded: boolean;\n  testRuleResponse: {};\n}\n\nexport class TestRuleResult extends PureComponent<Props, State> {\n  readonly state: State = {\n    isLoading: false,\n    allNodesExpanded: null,\n    testRuleResponse: {},\n  };\n\n  formattedJson: any;\n  clipboard: any;\n  backendSrv: BackendSrv = null;\n\n  constructor(props: Props) {\n    super(props);\n    this.backendSrv = getBackendSrv();\n  }\n\n  componentDidMount() {\n    this.testRule();\n  }\n\n  async testRule() {\n    const { panelId, dashboard } = this.props;\n    const payload = { dashboard: dashboard.getSaveModelClone(), panelId };\n\n    this.setState({ isLoading: true });\n    const testRuleResponse = await this.backendSrv.post(`/api/alerts/test`, payload);\n    this.setState({ isLoading: false, testRuleResponse });\n  }\n\n  setFormattedJson = (formattedJson: any) => {\n    this.formattedJson = formattedJson;\n  };\n\n  getTextForClipboard = () => {\n    return JSON.stringify(this.formattedJson, null, 2);\n  };\n\n  onClipboardSuccess = () => {\n    appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n  };\n\n  onToggleExpand = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      allNodesExpanded: !this.state.allNodesExpanded,\n    }));\n  };\n\n  getNrOfOpenNodes = () => {\n    if (this.state.allNodesExpanded === null) {\n      return 3; // 3 is default, ie when state is null\n    } else if (this.state.allNodesExpanded) {\n      return 20;\n    }\n    return 1;\n  };\n\n  renderExpandCollapse = () => {\n    const { allNodesExpanded } = this.state;\n\n    const collapse = (\n      <>\n        <i className=\"fa fa-minus-square-o\" /> Collapse All\n      </>\n    );\n    const expand = (\n      <>\n        <i className=\"fa fa-plus-square-o\" /> Expand All\n      </>\n    );\n    return allNodesExpanded ? collapse : expand;\n  };\n\n  render() {\n    const { testRuleResponse, isLoading } = this.state;\n\n    if (isLoading === true) {\n      return <LoadingPlaceholder text=\"Evaluating rule\" />;\n    }\n\n    const openNodes = this.getNrOfOpenNodes();\n\n    return (\n      <>\n        <div className=\"pull-right\">\n          <button className=\"btn btn-transparent btn-p-x-0 m-r-1\" onClick={this.onToggleExpand}>\n            {this.renderExpandCollapse()}\n          </button>\n          <CopyToClipboard\n            className=\"btn btn-transparent btn-p-x-0\"\n            text={this.getTextForClipboard}\n            onSuccess={this.onClipboardSuccess}\n          >\n            <i className=\"fa fa-clipboard\" /> Copy to Clipboard\n          </CopyToClipboard>\n        </div>\n\n        <JSONFormatter json={testRuleResponse} open={openNodes} onDidRender={this.setFormattedJson} />\n      </>\n    );\n  }\n}\n","// Libraries\nimport React from 'react';\nimport _ from 'lodash';\nimport { LocationUpdate } from '@grafana/runtime';\nimport { e2e } from '@grafana/e2e';\n// Utils\nimport config from 'app/core/config';\nimport store from 'app/core/store';\n// Store\nimport { store as reduxStore } from 'app/store/store';\nimport { updateLocation } from 'app/core/actions';\n// Types\nimport { DashboardModel, PanelModel } from '../../state';\nimport { LS_PANEL_COPY_KEY } from 'app/core/constants';\n\nexport type PanelPluginInfo = { id: any; defaults: { gridPos: { w: any; h: any }; title: any } };\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\nexport interface State {\n  copiedPanelPlugins: any[];\n}\n\nexport class AddPanelWidget extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.handleCloseAddPanel = this.handleCloseAddPanel.bind(this);\n\n    this.state = {\n      copiedPanelPlugins: this.getCopiedPanelPlugins(),\n    };\n  }\n\n  getCopiedPanelPlugins() {\n    const panels = _.chain(config.panels)\n      .filter({ hideFromList: false })\n      .map(item => item)\n      .value();\n    const copiedPanels = [];\n\n    const copiedPanelJson = store.get(LS_PANEL_COPY_KEY);\n    if (copiedPanelJson) {\n      const copiedPanel = JSON.parse(copiedPanelJson);\n      const pluginInfo: any = _.find(panels, { id: copiedPanel.type });\n      if (pluginInfo) {\n        const pluginCopy = _.cloneDeep(pluginInfo);\n        pluginCopy.name = copiedPanel.title;\n        pluginCopy.sort = -1;\n        pluginCopy.defaults = copiedPanel;\n        copiedPanels.push(pluginCopy);\n      }\n    }\n\n    return _.sortBy(copiedPanels, 'sort');\n  }\n\n  handleCloseAddPanel(evt: any) {\n    evt.preventDefault();\n    this.props.dashboard.removePanel(this.props.panel);\n  }\n\n  onCreateNewPanel = (tab = 'queries') => {\n    const dashboard = this.props.dashboard;\n    const { gridPos } = this.props.panel;\n\n    const newPanel: any = {\n      type: 'graph',\n      title: 'Panel Title',\n      gridPos: { x: gridPos.x, y: gridPos.y, w: gridPos.w, h: gridPos.h },\n    };\n\n    dashboard.addPanel(newPanel);\n    dashboard.removePanel(this.props.panel);\n\n    const location: LocationUpdate = {\n      query: {\n        panelId: newPanel.id,\n        edit: true,\n        fullscreen: true,\n      },\n      partial: true,\n    };\n\n    if (tab === 'visualization') {\n      location.query.tab = 'visualization';\n      location.query.openVizPicker = true;\n    }\n\n    reduxStore.dispatch(updateLocation(location));\n  };\n\n  onPasteCopiedPanel = (panelPluginInfo: PanelPluginInfo) => {\n    const dashboard = this.props.dashboard;\n    const { gridPos } = this.props.panel;\n\n    const newPanel: any = {\n      type: panelPluginInfo.id,\n      title: 'Panel Title',\n      gridPos: {\n        x: gridPos.x,\n        y: gridPos.y,\n        w: panelPluginInfo.defaults.gridPos.w,\n        h: panelPluginInfo.defaults.gridPos.h,\n      },\n    };\n\n    // apply panel template / defaults\n    if (panelPluginInfo.defaults) {\n      _.defaults(newPanel, panelPluginInfo.defaults);\n      newPanel.title = panelPluginInfo.defaults.title;\n      store.delete(LS_PANEL_COPY_KEY);\n    }\n\n    dashboard.addPanel(newPanel);\n    dashboard.removePanel(this.props.panel);\n  };\n\n  onCreateNewRow = () => {\n    const dashboard = this.props.dashboard;\n\n    const newRow: any = {\n      type: 'row',\n      title: 'Row title',\n      gridPos: { x: 0, y: 0 },\n    };\n\n    dashboard.addPanel(newRow);\n    dashboard.removePanel(this.props.panel);\n  };\n\n  renderOptionLink = (icon: string, text: string, onClick: any) => {\n    return (\n      <div>\n        <a\n          href=\"#\"\n          onClick={onClick}\n          className=\"add-panel-widget__link btn btn-inverse\"\n          aria-label={e2e.pages.AddDashboard.selectors.ctaButtons(text)}\n        >\n          <div className=\"add-panel-widget__icon\">\n            <i className={`gicon gicon-${icon}`} />\n          </div>\n          <span>{text}</span>\n        </a>\n      </div>\n    );\n  };\n\n  render() {\n    const { copiedPanelPlugins } = this.state;\n\n    return (\n      <div className=\"panel-container add-panel-widget-container\">\n        <div className=\"add-panel-widget\">\n          <div className=\"add-panel-widget__header grid-drag-handle\">\n            <i className=\"gicon gicon-add-panel\" />\n            <span className=\"add-panel-widget__title\">New Panel</span>\n            <button className=\"add-panel-widget__close\" onClick={this.handleCloseAddPanel}>\n              <i className=\"fa fa-close\" />\n            </button>\n          </div>\n          <div className=\"add-panel-widget__btn-container\">\n            <div className=\"add-panel-widget__create\">\n              {this.renderOptionLink('queries', 'Add Query', this.onCreateNewPanel)}\n              {this.renderOptionLink('visualization', 'Choose Visualization', () =>\n                this.onCreateNewPanel('visualization')\n              )}\n            </div>\n            <div className=\"add-panel-widget__actions\">\n              <button className=\"btn btn-inverse add-panel-widget__action\" onClick={this.onCreateNewRow}>\n                Convert to row\n              </button>\n              {copiedPanelPlugins.length === 1 && (\n                <button\n                  className=\"btn btn-inverse add-panel-widget__action\"\n                  onClick={() => this.onPasteCopiedPanel(copiedPanelPlugins[0])}\n                >\n                  Paste copied panel\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","export { AddPanelWidget } from './AddPanelWidget';\n","import React from 'react';\nimport classNames from 'classnames';\nimport { PanelModel } from '../../state/PanelModel';\nimport { DashboardModel } from '../../state/DashboardModel';\nimport templateSrv from 'app/features/templating/template_srv';\nimport appEvents from 'app/core/app_events';\nimport { CoreEvents } from 'app/types';\n\nexport interface DashboardRowProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\nexport class DashboardRow extends React.Component<DashboardRowProps, any> {\n  constructor(props: DashboardRowProps) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.panel.collapsed,\n    };\n\n    this.props.dashboard.on(CoreEvents.templateVariableValueUpdated, this.onVariableUpdated);\n  }\n\n  componentWillUnmount() {\n    this.props.dashboard.off(CoreEvents.templateVariableValueUpdated, this.onVariableUpdated);\n  }\n\n  onVariableUpdated = () => {\n    this.forceUpdate();\n  };\n\n  onToggle = () => {\n    this.props.dashboard.toggleRow(this.props.panel);\n\n    this.setState((prevState: any) => {\n      return { collapsed: !prevState.collapsed };\n    });\n  };\n\n  onUpdate = () => {\n    this.props.dashboard.processRepeats();\n    this.forceUpdate();\n  };\n\n  onOpenSettings = () => {\n    appEvents.emit(CoreEvents.showModal, {\n      templateHtml: `<row-options row=\"model.row\" on-updated=\"model.onUpdated()\" dismiss=\"dismiss()\"></row-options>`,\n      modalClass: 'modal--narrow',\n      model: {\n        row: this.props.panel,\n        onUpdated: this.onUpdate,\n      },\n    });\n  };\n\n  onDelete = () => {\n    appEvents.emit(CoreEvents.showConfirmModal, {\n      title: 'Delete Row',\n      text: 'Are you sure you want to remove this row and all its panels?',\n      altActionText: 'Delete row only',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.props.dashboard.removeRow(this.props.panel, true);\n      },\n      onAltAction: () => {\n        this.props.dashboard.removeRow(this.props.panel, false);\n      },\n    });\n  };\n\n  render() {\n    const classes = classNames({\n      'dashboard-row': true,\n      'dashboard-row--collapsed': this.state.collapsed,\n    });\n    const chevronClass = classNames({\n      fa: true,\n      'fa-chevron-down': !this.state.collapsed,\n      'fa-chevron-right': this.state.collapsed,\n    });\n\n    const title = templateSrv.replaceWithText(this.props.panel.title, this.props.panel.scopedVars);\n    const count = this.props.panel.panels ? this.props.panel.panels.length : 0;\n    const panels = count === 1 ? 'panel' : 'panels';\n    const canEdit = this.props.dashboard.meta.canEdit === true;\n\n    return (\n      <div className={classes}>\n        <a className=\"dashboard-row__title pointer\" onClick={this.onToggle}>\n          <i className={chevronClass} />\n          {title}\n          <span className=\"dashboard-row__panel_count\">\n            ({count} {panels})\n          </span>\n        </a>\n        {canEdit && (\n          <div className=\"dashboard-row__actions\">\n            <a className=\"pointer\" onClick={this.onOpenSettings}>\n              <i className=\"gicon gicon-cog\" />\n            </a>\n            <a className=\"pointer\" onClick={this.onDelete}>\n              <i className=\"fa fa-trash\" />\n            </a>\n          </div>\n        )}\n        {this.state.collapsed === true && (\n          <div className=\"dashboard-row__toggle-target\" onClick={this.onToggle}>\n            &nbsp;\n          </div>\n        )}\n        {canEdit && <div className=\"dashboard-row__drag grid-drag-handle\" />}\n      </div>\n    );\n  }\n}\n","export { DashboardRow } from './DashboardRow';\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\n// Utils & Services\nimport { getAngularLoader, AngularComponent } from '@grafana/runtime';\nimport { importPanelPlugin } from 'app/features/plugins/plugin_loader';\n\n// Components\nimport { AddPanelWidget } from '../components/AddPanelWidget';\nimport { DashboardRow } from '../components/DashboardRow';\nimport { PanelChrome } from './PanelChrome';\nimport { PanelEditor } from '../panel_editor/PanelEditor';\nimport { PanelResizer } from './PanelResizer';\n\n// Types\nimport { PanelModel, DashboardModel } from '../state';\nimport { PanelPluginMeta, PanelPlugin } from '@grafana/data';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  isEditing: boolean;\n  isFullscreen: boolean;\n  isInView: boolean;\n}\n\nexport interface State {\n  plugin: PanelPlugin;\n  angularPanel: AngularComponent;\n  isLazy: boolean;\n}\n\nexport class DashboardPanel extends PureComponent<Props, State> {\n  element: HTMLElement;\n  specialPanels: { [key: string]: Function } = {};\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      plugin: null,\n      angularPanel: null,\n      isLazy: !props.isInView,\n    };\n\n    this.specialPanels['row'] = this.renderRow.bind(this);\n    this.specialPanels['add-panel'] = this.renderAddPanel.bind(this);\n  }\n\n  isSpecial(pluginId: string) {\n    return this.specialPanels[pluginId];\n  }\n\n  renderRow() {\n    return <DashboardRow panel={this.props.panel} dashboard={this.props.dashboard} />;\n  }\n\n  renderAddPanel() {\n    return <AddPanelWidget panel={this.props.panel} dashboard={this.props.dashboard} />;\n  }\n\n  onPluginTypeChange = (plugin: PanelPluginMeta) => {\n    this.loadPlugin(plugin.id);\n  };\n\n  async loadPlugin(pluginId: string) {\n    if (this.isSpecial(pluginId)) {\n      return;\n    }\n\n    const { panel } = this.props;\n\n    // handle plugin loading & changing of plugin type\n    if (!this.state.plugin || this.state.plugin.meta.id !== pluginId) {\n      const plugin = await importPanelPlugin(pluginId);\n\n      // unmount angular panel\n      this.cleanUpAngularPanel();\n\n      if (panel.type !== pluginId) {\n        panel.changePlugin(plugin);\n      } else {\n        panel.pluginLoaded(plugin);\n      }\n\n      this.setState({ plugin, angularPanel: null });\n    }\n  }\n\n  componentDidMount() {\n    this.loadPlugin(this.props.panel.type);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (this.state.isLazy && this.props.isInView) {\n      this.setState({ isLazy: false });\n    }\n\n    if (!this.element || this.state.angularPanel) {\n      return;\n    }\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n    const scopeProps = { panel: this.props.panel, dashboard: this.props.dashboard };\n    const angularPanel = loader.load(this.element, scopeProps, template);\n\n    this.setState({ angularPanel });\n  }\n\n  cleanUpAngularPanel() {\n    if (this.state.angularPanel) {\n      this.state.angularPanel.destroy();\n      this.element = null;\n    }\n  }\n\n  componentWillUnmount() {\n    this.cleanUpAngularPanel();\n  }\n\n  onMouseEnter = () => {\n    this.props.dashboard.setPanelFocus(this.props.panel.id);\n  };\n\n  onMouseLeave = () => {\n    this.props.dashboard.setPanelFocus(0);\n  };\n\n  renderPanel() {\n    const { dashboard, panel, isFullscreen, isInView } = this.props;\n    const { plugin } = this.state;\n\n    if (plugin.angularPanelCtrl) {\n      return <div ref={element => (this.element = element)} className=\"panel-height-helper\" />;\n    }\n\n    return (\n      <AutoSizer>\n        {({ width, height }) => {\n          if (width === 0) {\n            return null;\n          }\n\n          return (\n            <PanelChrome\n              plugin={plugin}\n              panel={panel}\n              dashboard={dashboard}\n              isFullscreen={isFullscreen}\n              isInView={isInView}\n              width={width}\n              height={height}\n            />\n          );\n        }}\n      </AutoSizer>\n    );\n  }\n\n  render() {\n    const { panel, dashboard, isFullscreen, isEditing } = this.props;\n    const { plugin, angularPanel, isLazy } = this.state;\n\n    if (this.isSpecial(panel.type)) {\n      return this.specialPanels[panel.type]();\n    }\n\n    // if we have not loaded plugin exports yet, wait\n    if (!plugin) {\n      return null;\n    }\n\n    // If we are lazy state don't render anything\n    if (isLazy) {\n      return null;\n    }\n\n    const editorContainerClasses = classNames({\n      'panel-editor-container': isEditing,\n      'panel-height-helper': !isEditing,\n    });\n\n    const panelWrapperClass = classNames({\n      'panel-wrapper': true,\n      'panel-wrapper--edit': isEditing,\n      'panel-wrapper--view': isFullscreen && !isEditing,\n    });\n\n    return (\n      <div className={editorContainerClasses}>\n        <PanelResizer\n          isEditing={isEditing}\n          panel={panel}\n          render={styles => (\n            <div\n              className={panelWrapperClass}\n              onMouseEnter={this.onMouseEnter}\n              onMouseLeave={this.onMouseLeave}\n              style={styles}\n            >\n              {this.renderPanel()}\n            </div>\n          )}\n        />\n        {panel.isEditing && (\n          <PanelEditor\n            panel={panel}\n            plugin={plugin}\n            dashboard={dashboard}\n            angularPanel={angularPanel}\n            onPluginTypeChange={this.onPluginTypeChange}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { Unsubscribable } from 'rxjs';\n// Components\nimport { PanelHeader } from './PanelHeader/PanelHeader';\nimport { ErrorBoundary } from '@grafana/ui';\n// Utils & Services\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { profiler } from 'app/core/profiler';\nimport { getProcessedDataFrames } from '../state/runRequest';\nimport templateSrv from 'app/features/templating/template_srv';\nimport config from 'app/core/config';\n// Types\nimport { DashboardModel, PanelModel } from '../state';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport {\n  LoadingState,\n  ScopedVars,\n  AbsoluteTimeRange,\n  DefaultTimeRange,\n  toUtc,\n  toDataFrameDTO,\n  PanelEvents,\n  PanelData,\n  PanelPlugin,\n} from '@grafana/data';\n\nconst DEFAULT_PLUGIN_ERROR = 'Error in plugin';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isFullscreen: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n}\n\nexport interface State {\n  isFirstLoad: boolean;\n  renderCounter: number;\n  errorMessage: string | null;\n  refreshWhenInView: boolean;\n\n  // Current state of all events\n  data: PanelData;\n}\n\nexport class PanelChrome extends PureComponent<Props, State> {\n  timeSrv: TimeSrv = getTimeSrv();\n  querySubscription: Unsubscribable;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isFirstLoad: true,\n      renderCounter: 0,\n      errorMessage: null,\n      refreshWhenInView: false,\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: DefaultTimeRange,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel, dashboard } = this.props;\n    panel.events.on(PanelEvents.refresh, this.onRefresh);\n    panel.events.on(PanelEvents.render, this.onRender);\n    dashboard.panelInitialized(this.props.panel);\n\n    // Move snapshot data into the query response\n    if (this.hasPanelSnapshot) {\n      this.setState({\n        data: {\n          ...this.state.data,\n          state: LoadingState.Done,\n          series: getProcessedDataFrames(panel.snapshotData),\n        },\n        isFirstLoad: false,\n      });\n    } else if (!this.wantsQueryExecution) {\n      this.setState({ isFirstLoad: false });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.panel.events.off(PanelEvents.refresh, this.onRefresh);\n    this.props.panel.events.off(PanelEvents.render, this.onRender);\n\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n      this.querySubscription = null;\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { isInView } = this.props;\n\n    // View state has changed\n    if (isInView !== prevProps.isInView) {\n      if (isInView) {\n        // Check if we need a delayed refresh\n        if (this.state.refreshWhenInView) {\n          this.onRefresh();\n        }\n      } else if (this.querySubscription) {\n        this.querySubscription.unsubscribe();\n        this.querySubscription = null;\n      }\n    }\n  }\n\n  // Updates the response with information from the stream\n  // The next is outside a react synthetic event so setState is not batched\n  // So in this context we can only do a single call to setState\n  onDataUpdate(data: PanelData) {\n    if (!this.props.isInView) {\n      // Ignore events when not visible.\n      // The call will be repeated when the panel comes into view\n      return;\n    }\n\n    let { isFirstLoad } = this.state;\n    let errorMessage: string | null = null;\n\n    switch (data.state) {\n      case LoadingState.Loading:\n        // Skip updating state data if it is already in loading state\n        // This is to avoid rendering partial loading responses\n        if (this.state.data.state === LoadingState.Loading) {\n          return;\n        }\n        break;\n      case LoadingState.Error:\n        const { error } = data;\n        if (error) {\n          if (errorMessage !== error.message) {\n            errorMessage = error.message;\n          }\n        }\n        break;\n      case LoadingState.Done:\n        // If we are doing a snapshot save data in panel model\n        if (this.props.dashboard.snapshot) {\n          this.props.panel.snapshotData = data.series.map(frame => toDataFrameDTO(frame));\n        }\n        if (isFirstLoad) {\n          isFirstLoad = false;\n        }\n        break;\n    }\n\n    this.setState({ isFirstLoad, errorMessage, data });\n  }\n\n  onRefresh = () => {\n    const { panel, isInView, width } = this.props;\n\n    if (!isInView) {\n      console.log('Refresh when panel is visible', panel.id);\n      this.setState({ refreshWhenInView: true });\n      return;\n    }\n\n    const timeData = applyPanelTimeOverrides(panel, this.timeSrv.timeRange());\n\n    // Issue Query\n    if (this.wantsQueryExecution) {\n      if (width < 0) {\n        console.log('Refresh skippted, no width yet... wait till we know');\n        return;\n      }\n\n      const queryRunner = panel.getQueryRunner();\n\n      if (!this.querySubscription) {\n        this.querySubscription = queryRunner.getData().subscribe({\n          next: data => this.onDataUpdate(data),\n        });\n      }\n\n      queryRunner.run({\n        datasource: panel.datasource,\n        queries: panel.targets,\n        panelId: panel.id,\n        dashboardId: this.props.dashboard.id,\n        timezone: this.props.dashboard.getTimezone(),\n        timeRange: timeData.timeRange,\n        timeInfo: timeData.timeInfo,\n        widthPixels: width,\n        maxDataPoints: panel.maxDataPoints,\n        minInterval: panel.interval,\n        scopedVars: panel.scopedVars,\n        cacheTimeout: panel.cacheTimeout,\n        transformations: panel.transformations,\n      });\n    }\n  };\n\n  onRender = () => {\n    const stateUpdate = { renderCounter: this.state.renderCounter + 1 };\n\n    this.setState(stateUpdate);\n  };\n\n  onOptionsChange = (options: any) => {\n    this.props.panel.updateOptions(options);\n  };\n\n  replaceVariables = (value: string, extraVars?: ScopedVars, format?: string) => {\n    let vars = this.props.panel.scopedVars;\n    if (extraVars) {\n      vars = vars ? { ...vars, ...extraVars } : extraVars;\n    }\n    return templateSrv.replace(value, vars, format);\n  };\n\n  onPanelError = (message: string) => {\n    if (this.state.errorMessage !== message) {\n      this.setState({ errorMessage: message });\n    }\n  };\n\n  get hasPanelSnapshot() {\n    const { panel } = this.props;\n    return panel.snapshotData && panel.snapshotData.length;\n  }\n\n  get wantsQueryExecution() {\n    return !(this.props.plugin.meta.skipDataQuery || this.hasPanelSnapshot);\n  }\n\n  onChangeTimeRange = (timeRange: AbsoluteTimeRange) => {\n    this.timeSrv.setTime({\n      from: toUtc(timeRange.from),\n      to: toUtc(timeRange.to),\n    });\n  };\n\n  renderPanel(width: number, height: number): JSX.Element {\n    const { panel, plugin } = this.props;\n    const { renderCounter, data, isFirstLoad } = this.state;\n    const { theme } = config;\n\n    // This is only done to increase a counter that is used by backend\n    // image rendering (phantomjs/headless chrome) to know when to capture image\n    const loading = data.state;\n    if (loading === LoadingState.Done) {\n      profiler.renderingCompleted();\n    }\n\n    // do not render component until we have first data\n    if (isFirstLoad && (loading === LoadingState.Loading || loading === LoadingState.NotStarted)) {\n      return this.renderLoadingState();\n    }\n\n    const PanelComponent = plugin.panel;\n    const timeRange = data.timeRange || this.timeSrv.timeRange();\n\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    const panelWidth = width - chromePadding * 2 - PANEL_BORDER;\n    const innerPanelHeight = height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n\n    return (\n      <>\n        {loading === LoadingState.Loading && this.renderLoadingState()}\n        <div className={panelContentClassNames}>\n          <PanelComponent\n            id={panel.id}\n            data={data}\n            timeRange={timeRange}\n            timeZone={this.props.dashboard.getTimezone()}\n            options={panel.getOptions()}\n            transparent={panel.transparent}\n            width={panelWidth}\n            height={innerPanelHeight}\n            renderCounter={renderCounter}\n            replaceVariables={this.replaceVariables}\n            onOptionsChange={this.onOptionsChange}\n            onChangeTimeRange={this.onChangeTimeRange}\n          />\n        </div>\n      </>\n    );\n  }\n\n  private renderLoadingState(): JSX.Element {\n    return (\n      <div className=\"panel-loading\">\n        <i className=\"fa fa-spinner fa-spin\" />\n      </div>\n    );\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { errorMessage, data } = this.state;\n\n    // always show normal header if we have an error message\n    if (errorMessage) {\n      return false;\n    }\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isFullscreen, width, height } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': true,\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n    });\n\n    return (\n      <div className={containerClassNames}>\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          timeInfo={data.request ? data.request.timeInfo : null}\n          title={panel.title}\n          description={panel.description}\n          scopedVars={panel.scopedVars}\n          links={panel.links}\n          error={errorMessage}\n          isFullscreen={isFullscreen}\n        />\n        <ErrorBoundary>\n          {({ error, errorInfo }) => {\n            if (errorInfo) {\n              this.onPanelError(error.message || DEFAULT_PLUGIN_ERROR);\n              return null;\n            }\n            return this.renderPanel(width, height);\n          }}\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { isEqual } from 'lodash';\nimport { DataLink, ScopedVars } from '@grafana/data';\nimport { ClickOutsideWrapper } from '@grafana/ui';\nimport { e2e } from '@grafana/e2e';\n\nimport PanelHeaderCorner from './PanelHeaderCorner';\nimport { PanelHeaderMenu } from './PanelHeaderMenu';\nimport templateSrv from 'app/features/templating/template_srv';\n\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { getPanelLinksSupplier } from 'app/features/panel/panellinks/linkSuppliers';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  timeInfo: string;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: DataLink[];\n  error?: string;\n  isFullscreen: boolean;\n}\n\ninterface ClickCoordinates {\n  x: number;\n  y: number;\n}\n\ninterface State {\n  panelMenuOpen: boolean;\n}\n\nexport class PanelHeader extends Component<Props, State> {\n  clickCoordinates: ClickCoordinates = { x: 0, y: 0 };\n  state = {\n    panelMenuOpen: false,\n    clickCoordinates: { x: 0, y: 0 },\n  };\n\n  eventToClickCoordinates = (event: React.MouseEvent<HTMLDivElement>) => {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  };\n\n  onMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {\n    this.clickCoordinates = this.eventToClickCoordinates(event);\n  };\n\n  isClick = (clickCoordinates: ClickCoordinates) => {\n    return isEqual(clickCoordinates, this.clickCoordinates);\n  };\n\n  onMenuToggle = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (this.isClick(this.eventToClickCoordinates(event))) {\n      event.stopPropagation();\n\n      this.setState(prevState => ({\n        panelMenuOpen: !prevState.panelMenuOpen,\n      }));\n    }\n  };\n\n  closeMenu = () => {\n    this.setState({\n      panelMenuOpen: false,\n    });\n  };\n\n  render() {\n    const { panel, dashboard, timeInfo, scopedVars, error, isFullscreen } = this.props;\n    const title = templateSrv.replaceWithText(panel.title, scopedVars);\n\n    const panelHeaderClass = classNames({\n      'panel-header': true,\n      'grid-drag-handle': !isFullscreen,\n    });\n\n    return (\n      <>\n        <div className={panelHeaderClass}>\n          <PanelHeaderCorner\n            panel={panel}\n            title={panel.title}\n            description={panel.description}\n            scopedVars={panel.scopedVars}\n            links={getPanelLinksSupplier(panel)}\n            error={error}\n          />\n          <div\n            className=\"panel-title-container\"\n            onClick={this.onMenuToggle}\n            onMouseDown={this.onMouseDown}\n            aria-label={e2e.pages.Dashboard.Panels.Panel.selectors.title(title)}\n          >\n            <div className=\"panel-title\">\n              <span className=\"icon-gf panel-alert-icon\" />\n              <span className=\"panel-title-text\">\n                {title} <span className=\"fa fa-caret-down panel-menu-toggle\" />\n              </span>\n              {this.state.panelMenuOpen && (\n                <ClickOutsideWrapper onClick={this.closeMenu}>\n                  <PanelHeaderMenu panel={panel} dashboard={dashboard} />\n                </ClickOutsideWrapper>\n              )}\n              {timeInfo && (\n                <span className=\"panel-time-info\">\n                  <i className=\"fa fa-clock-o\" /> {timeInfo}\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport { renderMarkdown, LinkModelSupplier, ScopedVars } from '@grafana/data';\nimport { Tooltip, PopoverContent } from '@grafana/ui';\nimport { getLocationSrv } from '@grafana/runtime';\n\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport templateSrv from 'app/features/templating/template_srv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nenum InfoMode {\n  Error = 'Error',\n  Info = 'Info',\n  Links = 'Links',\n}\n\ninterface Props {\n  panel: PanelModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: LinkModelSupplier<PanelModel>;\n  error?: string;\n}\n\nexport class PanelHeaderCorner extends Component<Props> {\n  timeSrv: TimeSrv = getTimeSrv();\n\n  getInfoMode = () => {\n    const { panel, error } = this.props;\n    if (error) {\n      return InfoMode.Error;\n    }\n    if (!!panel.description) {\n      return InfoMode.Info;\n    }\n    if (panel.links && panel.links.length) {\n      return InfoMode.Links;\n    }\n\n    return undefined;\n  };\n\n  getInfoContent = (): JSX.Element => {\n    const { panel } = this.props;\n    const markdown = panel.description || '';\n    const interpolatedMarkdown = templateSrv.replace(markdown, panel.scopedVars);\n    const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n    const links = this.props.links && this.props.links.getLinks(panel);\n\n    return (\n      <div className=\"panel-info-content markdown-html\">\n        <div dangerouslySetInnerHTML={{ __html: markedInterpolatedMarkdown }} />\n\n        {links && links.length > 0 && (\n          <ul className=\"panel-info-corner-links\">\n            {links.map((link, idx) => {\n              return (\n                <li key={idx}>\n                  <a className=\"panel-info-corner-links__item\" href={link.href} target={link.target}>\n                    {link.title}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Open the Panel Inspector when we click on an error\n   */\n  onClickError = () => {\n    getLocationSrv().update({ partial: true, query: { inspect: this.props.panel.id } });\n  };\n\n  renderCornerType(infoMode: InfoMode, content: PopoverContent, onClick?: () => void) {\n    const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n    return (\n      <Tooltip content={content} placement=\"top-start\" theme={theme}>\n        <div className={`panel-info-corner panel-info-corner--${infoMode.toLowerCase()}`} onClick={onClick}>\n          <i className=\"fa\" />\n          <span className=\"panel-info-corner-inner\" />\n        </div>\n      </Tooltip>\n    );\n  }\n\n  render() {\n    const infoMode: InfoMode | undefined = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error) {\n      return this.renderCornerType(infoMode, this.props.error, this.onClickError);\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return this.renderCornerType(infoMode, this.getInfoContent);\n    }\n\n    return null;\n  }\n}\n\nexport default PanelHeaderCorner;\n","import React, { PureComponent } from 'react';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { PanelHeaderMenuItem } from './PanelHeaderMenuItem';\nimport { getPanelMenu } from 'app/features/dashboard/utils/getPanelMenu';\nimport { PanelMenuItem } from '@grafana/data';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\nexport class PanelHeaderMenu extends PureComponent<Props> {\n  renderItems = (menu: PanelMenuItem[], isSubMenu = false) => {\n    return (\n      <ul className=\"dropdown-menu dropdown-menu--menu panel-menu\" role={isSubMenu ? '' : 'menu'}>\n        {menu.map((menuItem, idx: number) => {\n          return (\n            <PanelHeaderMenuItem\n              key={`${menuItem.text}${idx}`}\n              type={menuItem.type}\n              text={menuItem.text}\n              iconClassName={menuItem.iconClassName}\n              onClick={menuItem.onClick}\n              shortcut={menuItem.shortcut}\n            >\n              {menuItem.subMenu && this.renderItems(menuItem.subMenu, true)}\n            </PanelHeaderMenuItem>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  render() {\n    const { dashboard, panel } = this.props;\n    const menu = getPanelMenu(dashboard, panel);\n\n    return <div className=\"panel-menu-container dropdown open\">{this.renderItems(menu)}</div>;\n  }\n}\n","import React, { FC } from 'react';\nimport { PanelMenuItem } from '@grafana/data';\nimport { e2e } from '@grafana/e2e';\n\ninterface Props {\n  children: any;\n}\n\nexport const PanelHeaderMenuItem: FC<Props & PanelMenuItem> = props => {\n  const isSubMenu = props.type === 'submenu';\n  const isDivider = props.type === 'divider';\n  return isDivider ? (\n    <li className=\"divider\" />\n  ) : (\n    <li className={isSubMenu ? 'dropdown-submenu' : null}>\n      <a onClick={props.onClick}>\n        {props.iconClassName && <i className={props.iconClassName} />}\n        <span\n          className=\"dropdown-item-text\"\n          aria-label={e2e.pages.Dashboard.Panels.Panel.selectors.headerItems(props.text)}\n        >\n          {props.text}\n        </span>\n        {props.shortcut && <span className=\"dropdown-menu-item-shortcut\">{props.shortcut}</span>}\n      </a>\n      {props.children}\n    </li>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { throttle } from 'lodash';\nimport Draggable, { DraggableEventHandler } from 'react-draggable';\n\nimport { PanelModel } from '../state/PanelModel';\n\ninterface Props {\n  isEditing: boolean;\n  render: (styles: object) => JSX.Element;\n  panel: PanelModel;\n}\n\ninterface State {\n  editorHeight: number;\n}\n\nexport class PanelResizer extends PureComponent<Props, State> {\n  initialHeight: number = Math.floor(document.documentElement.scrollHeight * 0.3);\n  prevEditorHeight: number;\n  throttledChangeHeight: (height: number) => void;\n  throttledResizeDone: () => void;\n  noStyles: object = {};\n\n  constructor(props: Props) {\n    super(props);\n    const { panel } = this.props;\n\n    this.state = {\n      editorHeight: this.initialHeight,\n    };\n\n    this.throttledChangeHeight = throttle(this.changeHeight, 20, { trailing: true });\n    this.throttledResizeDone = throttle(() => {\n      panel.resizeDone();\n    }, 50);\n  }\n\n  get largestHeight() {\n    return document.documentElement.scrollHeight * 0.9;\n  }\n  get smallestHeight() {\n    return 100;\n  }\n\n  changeHeight = (height: number) => {\n    const sh = this.smallestHeight;\n    const lh = this.largestHeight;\n    height = height < sh ? sh : height;\n    height = height > lh ? lh : height;\n\n    this.prevEditorHeight = this.state.editorHeight;\n    this.setState({\n      editorHeight: height,\n    });\n  };\n\n  onDrag: DraggableEventHandler = (evt, data) => {\n    const newHeight = this.state.editorHeight + data.y;\n    this.throttledChangeHeight(newHeight);\n    this.throttledResizeDone();\n  };\n\n  render() {\n    const { render, isEditing } = this.props;\n    const { editorHeight } = this.state;\n\n    return (\n      <>\n        {render(isEditing ? { height: editorHeight } : this.noStyles)}\n        {isEditing && (\n          <div className=\"panel-editor-container__resizer\">\n            <Draggable axis=\"y\" grid={[100, 1]} onDrag={this.onDrag} position={{ x: 0, y: 0 }}>\n              <div className=\"panel-editor-resizer\">\n                <div className=\"panel-editor-resizer__handle\" />\n              </div>\n            </Draggable>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n","import React, { FC, ChangeEvent } from 'react';\nimport { FormLabel, Input } from '@grafana/ui';\n\ninterface Props {\n  label: string;\n  placeholder?: string;\n  name: string;\n  value: string;\n  onBlur: (event: ChangeEvent<HTMLInputElement>) => void;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  tooltipInfo?: any;\n}\n\nexport const DataSourceOption: FC<Props> = ({ label, placeholder, name, value, onBlur, onChange, tooltipInfo }) => {\n  return (\n    <div className=\"gf-form gf-form--flex-end\">\n      <FormLabel tooltip={tooltipInfo}>{label}</FormLabel>\n      <Input\n        type=\"text\"\n        className=\"gf-form-input width-6\"\n        placeholder={placeholder}\n        name={name}\n        spellCheck={false}\n        onBlur={onBlur}\n        onChange={onChange}\n        value={value}\n      />\n    </div>\n  );\n};\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport { CustomScrollbar, PanelOptionsGroup } from '@grafana/ui';\nimport { FadeIn } from 'app/core/components/Animations/FadeIn';\n\ninterface Props {\n  children: JSX.Element;\n  heading: string;\n  renderToolbar?: () => JSX.Element;\n  toolbarItems?: EditorToolbarView[];\n  scrollTop?: number;\n  setScrollTop?: (value: React.MouseEvent<HTMLElement>) => void;\n}\n\nexport interface EditorToolbarView {\n  title?: string;\n  heading?: string;\n  icon?: string;\n  disabled?: boolean;\n  onClick?: () => void;\n  render?: () => JSX.Element;\n  action?: () => void;\n  btnType?: 'danger';\n}\n\ninterface State {\n  openView?: EditorToolbarView;\n  isOpen: boolean;\n  fadeIn: boolean;\n}\n\nexport class EditorTabBody extends PureComponent<Props, State> {\n  static defaultProps: Partial<Props> = {\n    toolbarItems: [],\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      openView: null,\n      fadeIn: false,\n      isOpen: false,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ fadeIn: true });\n  }\n\n  onToggleToolBarView = (item: EditorToolbarView) => {\n    this.setState({\n      openView: item,\n      isOpen: this.state.openView !== item || !this.state.isOpen,\n    });\n  };\n\n  onCloseOpenView = () => {\n    this.setState({ isOpen: false });\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (state.openView) {\n      const activeToolbarItem = props.toolbarItems.find(\n        (item: any) => item.title === state.openView.title && item.icon === state.openView.icon\n      );\n      if (activeToolbarItem) {\n        return {\n          ...state,\n          openView: activeToolbarItem,\n        };\n      }\n    }\n    return state;\n  }\n\n  renderButton(view: EditorToolbarView) {\n    const onClick = () => {\n      if (view.onClick) {\n        view.onClick();\n      }\n\n      if (view.render) {\n        this.onToggleToolBarView(view);\n      }\n    };\n\n    return (\n      <div className=\"nav-buttons\" key={view.title + view.icon}>\n        <button className=\"btn navbar-button\" onClick={onClick} disabled={view.disabled}>\n          {view.icon && <i className={view.icon} />} {view.title}\n        </button>\n      </div>\n    );\n  }\n\n  renderOpenView(view: EditorToolbarView) {\n    return (\n      <PanelOptionsGroup title={view.title || view.heading} onClose={this.onCloseOpenView}>\n        {view.render()}\n      </PanelOptionsGroup>\n    );\n  }\n\n  render() {\n    const { children, renderToolbar, heading, toolbarItems, scrollTop, setScrollTop } = this.props;\n    const { openView, fadeIn, isOpen } = this.state;\n\n    return (\n      <>\n        <div className=\"toolbar\">\n          <div className=\"toolbar__left\">\n            <div className=\"toolbar__heading\">{heading}</div>\n            {renderToolbar && renderToolbar()}\n          </div>\n          {toolbarItems.map(item => this.renderButton(item))}\n        </div>\n        <div className=\"panel-editor__scroll\">\n          <CustomScrollbar autoHide={false} scrollTop={scrollTop} setScrollTop={setScrollTop} updateAfterMountMs={300}>\n            <div className=\"panel-editor__content\">\n              <FadeIn in={isOpen} duration={200} unmountOnExit={true}>\n                {openView && this.renderOpenView(openView)}\n              </FadeIn>\n              <FadeIn in={fadeIn} duration={50}>\n                {children}\n              </FadeIn>\n            </div>\n          </CustomScrollbar>\n        </div>\n      </>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport { getAngularLoader, AngularComponent } from '@grafana/runtime';\nimport { EditorTabBody } from './EditorTabBody';\nimport './../../panel/GeneralTabCtrl';\n\n// Types\nimport { PanelModel } from '../state/PanelModel';\nimport { DataLink } from '@grafana/data';\nimport { PanelOptionsGroup, DataLinksEditor } from '@grafana/ui';\nimport { getPanelLinksVariableSuggestions } from 'app/features/panel/panellinks/link_srv';\n\ninterface Props {\n  panel: PanelModel;\n}\n\nexport class GeneralTab extends PureComponent<Props> {\n  element: any;\n  component: AngularComponent;\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    if (!this.element) {\n      return;\n    }\n\n    const { panel } = this.props;\n\n    const loader = getAngularLoader();\n    const template = '<panel-general-tab />';\n    const scopeProps = {\n      ctrl: {\n        panel: panel,\n      },\n    };\n\n    this.component = loader.load(this.element, scopeProps, template);\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onDataLinksChanged = (links: DataLink[], callback?: () => void) => {\n    this.props.panel.links = links;\n    this.props.panel.render();\n    this.forceUpdate(callback);\n  };\n\n  render() {\n    const { panel } = this.props;\n    const suggestions = getPanelLinksVariableSuggestions();\n\n    return (\n      <EditorTabBody heading=\"General\" toolbarItems={[]}>\n        <>\n          <div ref={element => (this.element = element)} />\n          <PanelOptionsGroup title=\"Panel links\">\n            <DataLinksEditor\n              value={panel.links}\n              onChange={this.onDataLinksChanged}\n              suggestions={suggestions}\n              maxLinks={10}\n            />\n          </PanelOptionsGroup>\n        </>\n      </EditorTabBody>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { Tooltip } from '@grafana/ui';\nimport { PanelPlugin, PanelPluginMeta } from '@grafana/data';\nimport { AngularComponent, config } from '@grafana/runtime';\nimport { e2e } from '@grafana/e2e';\n\nimport { QueriesTab } from './QueriesTab';\nimport VisualizationTab from './VisualizationTab';\nimport { GeneralTab } from './GeneralTab';\nimport { AlertTab } from '../../alerting/AlertTab';\nimport { PanelModel } from '../state/PanelModel';\nimport { DashboardModel } from '../state/DashboardModel';\nimport { StoreState } from '../../../types';\nimport { panelEditorCleanUp, PanelEditorTab, PanelEditorTabIds } from './state/reducers';\nimport { changePanelEditorTab, refreshPanelEditor } from './state/actions';\nimport { getActiveTabAndTabs } from './state/selectors';\n\ninterface PanelEditorProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  angularPanel?: AngularComponent;\n  onPluginTypeChange: (newType: PanelPluginMeta) => void;\n  activeTab: PanelEditorTabIds;\n  tabs: PanelEditorTab[];\n  refreshPanelEditor: typeof refreshPanelEditor;\n  panelEditorCleanUp: typeof panelEditorCleanUp;\n  changePanelEditorTab: typeof changePanelEditorTab;\n}\n\nclass UnConnectedPanelEditor extends PureComponent<PanelEditorProps> {\n  constructor(props: PanelEditorProps) {\n    super(props);\n  }\n\n  componentDidMount(): void {\n    this.refreshFromState();\n  }\n\n  componentWillUnmount(): void {\n    const { panelEditorCleanUp } = this.props;\n    panelEditorCleanUp();\n  }\n\n  refreshFromState = (meta?: PanelPluginMeta) => {\n    const { refreshPanelEditor, plugin } = this.props;\n    meta = meta || plugin.meta;\n\n    refreshPanelEditor({\n      hasQueriesTab: !meta.skipDataQuery,\n      usesGraphPlugin: meta.id === 'graph',\n      alertingEnabled: config.alertingEnabled,\n    });\n  };\n\n  onChangeTab = (tab: PanelEditorTab) => {\n    const { changePanelEditorTab } = this.props;\n    // Angular Query Components can potentially refresh the PanelModel\n    // onBlur so this makes sure we change tab after that\n    setTimeout(() => changePanelEditorTab(tab), 10);\n  };\n\n  onPluginTypeChange = (newType: PanelPluginMeta) => {\n    const { onPluginTypeChange } = this.props;\n    onPluginTypeChange(newType);\n\n    this.refreshFromState(newType);\n  };\n\n  renderCurrentTab(activeTab: string) {\n    const { panel, dashboard, plugin, angularPanel } = this.props;\n\n    switch (activeTab) {\n      case 'advanced':\n        return <GeneralTab panel={panel} />;\n      case 'queries':\n        return <QueriesTab panel={panel} dashboard={dashboard} />;\n      case 'alert':\n        return <AlertTab angularPanel={angularPanel} dashboard={dashboard} panel={panel} />;\n      case 'visualization':\n        return (\n          <VisualizationTab\n            panel={panel}\n            dashboard={dashboard}\n            plugin={plugin}\n            onPluginTypeChange={this.onPluginTypeChange}\n            angularPanel={angularPanel}\n          />\n        );\n      default:\n        return null;\n    }\n  }\n\n  render() {\n    const { activeTab, tabs } = this.props;\n\n    return (\n      <div className=\"panel-editor-container__editor\">\n        <div className=\"panel-editor-tabs\">\n          {tabs.map(tab => {\n            return <TabItem tab={tab} activeTab={activeTab} onClick={this.onChangeTab} key={tab.id} />;\n          })}\n        </div>\n        <div className=\"panel-editor__right\">{this.renderCurrentTab(activeTab)}</div>\n      </div>\n    );\n  }\n}\n\nexport const mapStateToProps = (state: StoreState) => getActiveTabAndTabs(state.location, state.panelEditor);\n\nconst mapDispatchToProps = { refreshPanelEditor, panelEditorCleanUp, changePanelEditorTab };\n\nexport const PanelEditor = hot(module)(connect(mapStateToProps, mapDispatchToProps)(UnConnectedPanelEditor));\n\ninterface TabItemParams {\n  tab: PanelEditorTab;\n  activeTab: string;\n  onClick: (tab: PanelEditorTab) => void;\n}\n\nfunction TabItem({ tab, activeTab, onClick }: TabItemParams) {\n  const tabClasses = classNames({\n    'panel-editor-tabs__link': true,\n    active: activeTab === tab.id,\n  });\n\n  return (\n    <div className=\"panel-editor-tabs__item\" onClick={() => onClick(tab)}>\n      <a className={tabClasses} aria-label={e2e.pages.Dashboard.Panels.EditPanel.selectors.tabItems(tab.text)}>\n        <Tooltip content={`${tab.text}`} placement=\"auto\">\n          <i className={`gicon gicon-${tab.id}${activeTab === tab.id ? '-active' : ''}`} />\n        </Tooltip>\n      </a>\n    </div>\n  );\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport { css } from 'emotion';\n// Components\nimport { EditorTabBody, EditorToolbarView } from './EditorTabBody';\nimport { DataSourcePicker } from 'app/core/components/Select/DataSourcePicker';\nimport { QueryInspector } from './QueryInspector';\nimport { QueryOptions } from './QueryOptions';\nimport { PanelOptionsGroup, TransformationsEditor, AlphaNotice } from '@grafana/ui';\nimport { QueryEditorRows } from './QueryEditorRows';\n// Services\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport config from 'app/core/config';\n// Types\nimport { PanelModel } from '../state/PanelModel';\nimport { DashboardModel } from '../state/DashboardModel';\nimport {\n  LoadingState,\n  DataTransformerConfig,\n  DefaultTimeRange,\n  DataSourceSelectItem,\n  DataQuery,\n  PanelData,\n  PluginState,\n} from '@grafana/data';\nimport { PluginHelp } from 'app/core/components/PluginHelp/PluginHelp';\nimport { addQuery } from 'app/core/utils/query';\nimport { Unsubscribable } from 'rxjs';\nimport { isSharedDashboardQuery, DashboardQueryEditor } from 'app/plugins/datasource/dashboard';\nimport { expressionDatasource, ExpressionDatasourceID } from 'app/features/expressions/ExpressionDatasource';\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\ninterface State {\n  currentDS: DataSourceSelectItem;\n  helpContent: JSX.Element;\n  isLoadingHelp: boolean;\n  isPickerOpen: boolean;\n  isAddingMixed: boolean;\n  scrollTop: number;\n  data: PanelData;\n}\n\nexport class QueriesTab extends PureComponent<Props, State> {\n  datasources: DataSourceSelectItem[] = getDatasourceSrv().getMetricSources();\n  backendSrv = getBackendSrv();\n  querySubscription: Unsubscribable;\n\n  state: State = {\n    isLoadingHelp: false,\n    currentDS: this.findCurrentDataSource(),\n    helpContent: null,\n    isPickerOpen: false,\n    isAddingMixed: false,\n    scrollTop: 0,\n    data: {\n      state: LoadingState.NotStarted,\n      series: [],\n      timeRange: DefaultTimeRange,\n    },\n  };\n\n  componentDidMount() {\n    const { panel } = this.props;\n    const queryRunner = panel.getQueryRunner();\n\n    this.querySubscription = queryRunner.getData(false).subscribe({\n      next: (data: PanelData) => this.onPanelDataUpdate(data),\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n      this.querySubscription = null;\n    }\n  }\n\n  onPanelDataUpdate(data: PanelData) {\n    this.setState({ data });\n  }\n\n  findCurrentDataSource(): DataSourceSelectItem {\n    const { panel } = this.props;\n    return this.datasources.find(datasource => datasource.value === panel.datasource) || this.datasources[0];\n  }\n\n  onChangeDataSource = (datasource: DataSourceSelectItem) => {\n    const { panel } = this.props;\n    const { currentDS } = this.state;\n\n    // switching to mixed\n    if (datasource.meta.mixed) {\n      // Set the datasource on all targets\n      panel.targets.forEach(target => {\n        if (target.datasource !== ExpressionDatasourceID) {\n          target.datasource = panel.datasource;\n          if (!target.datasource) {\n            target.datasource = config.defaultDatasource;\n          }\n        }\n      });\n    } else if (currentDS) {\n      // if switching from mixed\n      if (currentDS.meta.mixed) {\n        // Remove the explicit datasource\n        for (const target of panel.targets) {\n          if (target.datasource !== ExpressionDatasourceID) {\n            delete target.datasource;\n          }\n        }\n      } else if (currentDS.meta.id !== datasource.meta.id) {\n        // we are changing data source type, clear queries\n        panel.targets = [{ refId: 'A' }];\n      }\n    }\n\n    panel.datasource = datasource.value;\n    panel.refresh();\n\n    this.setState({\n      currentDS: datasource,\n    });\n  };\n\n  renderQueryInspector = () => {\n    const { panel } = this.props;\n    return <QueryInspector panel={panel} />;\n  };\n\n  renderHelp = () => {\n    return <PluginHelp plugin={this.state.currentDS.meta} type=\"query_help\" />;\n  };\n\n  /**\n   * Sets the queries for the panel\n   */\n  onUpdateQueries = (queries: DataQuery[]) => {\n    this.props.panel.targets = queries;\n    this.forceUpdate();\n  };\n\n  onAddQueryClick = () => {\n    if (this.state.currentDS.meta.mixed) {\n      this.setState({ isAddingMixed: true });\n      return;\n    }\n\n    this.onUpdateQueries(addQuery(this.props.panel.targets));\n    this.onScrollBottom();\n  };\n\n  onAddExpressionClick = () => {\n    this.onUpdateQueries(addQuery(this.props.panel.targets, expressionDatasource.newQuery()));\n    this.onScrollBottom();\n  };\n\n  onScrollBottom = () => {\n    this.setState({ scrollTop: this.state.scrollTop + 10000 });\n  };\n\n  renderToolbar = () => {\n    const { currentDS, isAddingMixed } = this.state;\n    const showAddButton = !(isAddingMixed || isSharedDashboardQuery(currentDS.name));\n\n    return (\n      <>\n        <DataSourcePicker datasources={this.datasources} onChange={this.onChangeDataSource} current={currentDS} />\n        <div className=\"flex-grow-1\" />\n        {showAddButton && (\n          <button className=\"btn navbar-button\" onClick={this.onAddQueryClick}>\n            Add Query\n          </button>\n        )}\n        {isAddingMixed && this.renderMixedPicker()}\n        {config.featureToggles.expressions && (\n          <button className=\"btn navbar-button\" onClick={this.onAddExpressionClick}>\n            Add Expression\n          </button>\n        )}\n      </>\n    );\n  };\n\n  renderMixedPicker = () => {\n    // We cannot filter on mixed flag as some mixed data sources like external plugin\n    // meta queries data source is mixed but also supports it's own queries\n    const filteredDsList = this.datasources.filter(ds => ds.meta.id !== 'mixed');\n\n    return (\n      <DataSourcePicker\n        datasources={filteredDsList}\n        onChange={this.onAddMixedQuery}\n        current={null}\n        autoFocus={true}\n        onBlur={this.onMixedPickerBlur}\n        openMenuOnFocus={true}\n      />\n    );\n  };\n\n  onAddMixedQuery = (datasource: any) => {\n    this.props.panel.targets = addQuery(this.props.panel.targets, { datasource: datasource.name });\n    this.setState({ isAddingMixed: false, scrollTop: this.state.scrollTop + 10000 });\n    this.forceUpdate();\n  };\n\n  onMixedPickerBlur = () => {\n    this.setState({ isAddingMixed: false });\n  };\n\n  onQueryChange = (query: DataQuery, index: number) => {\n    this.props.panel.changeQuery(query, index);\n    this.forceUpdate();\n  };\n\n  onTransformersChange = (transformers: DataTransformerConfig[]) => {\n    this.props.panel.setTransformations(transformers);\n    this.forceUpdate();\n  };\n\n  setScrollTop = (event: React.MouseEvent<HTMLElement>) => {\n    const target = event.target as HTMLElement;\n    this.setState({ scrollTop: target.scrollTop });\n  };\n\n  renderQueryBody = () => {\n    const { panel, dashboard } = this.props;\n    const { currentDS, data } = this.state;\n\n    if (isSharedDashboardQuery(currentDS.name)) {\n      return <DashboardQueryEditor panel={panel} panelData={data} onChange={query => this.onUpdateQueries([query])} />;\n    }\n\n    return (\n      <>\n        <QueryEditorRows\n          queries={panel.targets}\n          datasource={currentDS}\n          onChangeQueries={this.onUpdateQueries}\n          onScrollBottom={this.onScrollBottom}\n          panel={panel}\n          dashboard={dashboard}\n          data={data}\n        />\n        <PanelOptionsGroup>\n          <QueryOptions panel={panel} datasource={currentDS} />\n        </PanelOptionsGroup>\n      </>\n    );\n  };\n\n  render() {\n    const { scrollTop, data } = this.state;\n    const queryInspector: EditorToolbarView = {\n      title: 'Query Inspector',\n      render: this.renderQueryInspector,\n    };\n\n    const dsHelp: EditorToolbarView = {\n      heading: 'Help',\n      icon: 'fa fa-question',\n      render: this.renderHelp,\n    };\n\n    const enableTransformations = config.featureToggles.transformations;\n\n    return (\n      <EditorTabBody\n        heading=\"Query\"\n        renderToolbar={this.renderToolbar}\n        toolbarItems={[queryInspector, dsHelp]}\n        setScrollTop={this.setScrollTop}\n        scrollTop={scrollTop}\n      >\n        <>\n          {this.renderQueryBody()}\n\n          {enableTransformations && (\n            <PanelOptionsGroup\n              title={\n                <>\n                  Query results\n                  <AlphaNotice\n                    state={PluginState.alpha}\n                    className={css`\n                      margin-left: 16px;\n                    `}\n                  />\n                </>\n              }\n            >\n              {this.state.data.state !== LoadingState.NotStarted && (\n                <TransformationsEditor\n                  transformations={this.props.panel.transformations || []}\n                  onChange={this.onTransformersChange}\n                  dataFrames={data.series}\n                />\n              )}\n            </PanelOptionsGroup>\n          )}\n        </>\n      </EditorTabBody>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// @ts-ignore ignoring this for now, otherwise we would have to extend _ interface with move\nimport _ from 'lodash';\n\n// Types\nimport { PanelModel } from '../state/PanelModel';\nimport { DataQuery, PanelData, DataSourceSelectItem } from '@grafana/data';\nimport { DashboardModel } from '../state/DashboardModel';\nimport { QueryEditorRow } from './QueryEditorRow';\nimport { addQuery } from 'app/core/utils/query';\n\ninterface Props {\n  // The query configuration\n  queries: DataQuery[];\n  datasource: DataSourceSelectItem;\n\n  // Query editing\n  onChangeQueries: (queries: DataQuery[]) => void;\n  onScrollBottom: () => void;\n\n  // Dashboard Configs\n  panel: PanelModel;\n  dashboard: DashboardModel;\n\n  // Query Response Data\n  data: PanelData;\n}\n\nexport class QueryEditorRows extends PureComponent<Props> {\n  onAddQuery = (query?: Partial<DataQuery>) => {\n    const { queries, onChangeQueries } = this.props;\n    onChangeQueries(addQuery(queries, query));\n    this.props.onScrollBottom();\n  };\n\n  onRemoveQuery = (query: DataQuery) => {\n    const { queries, onChangeQueries, panel } = this.props;\n    const removed = queries.filter(q => {\n      return q !== query;\n    });\n    onChangeQueries(removed);\n    panel.refresh();\n  };\n\n  onMoveQuery = (query: DataQuery, direction: number) => {\n    const { queries, onChangeQueries, panel } = this.props;\n\n    const index = _.indexOf(queries, query);\n    // @ts-ignore\n    _.move(queries, index, index + direction);\n    onChangeQueries(queries);\n    panel.refresh();\n  };\n\n  onChangeQuery(query: DataQuery, index: number) {\n    const { queries, onChangeQueries } = this.props;\n\n    // ensure refId is maintained\n    query.refId = queries[index].refId;\n\n    // update query in array\n    onChangeQueries(\n      queries.map((item, itemIndex) => {\n        if (itemIndex === index) {\n          return query;\n        }\n        return item;\n      })\n    );\n  }\n\n  render() {\n    const { props } = this;\n    return (\n      <div className=\"query-editor-rows\">\n        {props.queries.map((query, index) => (\n          <QueryEditorRow\n            dataSourceValue={query.datasource || props.datasource.value}\n            key={query.refId}\n            panel={props.panel}\n            dashboard={props.dashboard}\n            data={props.data}\n            query={query}\n            onChange={query => this.onChangeQuery(query, index)}\n            onRemoveQuery={this.onRemoveQuery}\n            onAddQuery={this.onAddQuery}\n            onMoveQuery={this.onMoveQuery}\n            inMixedMode={props.datasource.meta.mixed}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport appEvents from 'app/core/app_events';\nimport { CopyToClipboard } from 'app/core/components/CopyToClipboard/CopyToClipboard';\nimport { LoadingPlaceholder, JSONFormatter } from '@grafana/ui';\nimport { CoreEvents } from 'app/types';\nimport { AppEvents, PanelEvents } from '@grafana/data';\n\ninterface DsQuery {\n  isLoading: boolean;\n  response: {};\n}\n\ninterface Props {\n  panel: any;\n}\n\ninterface State {\n  allNodesExpanded: boolean;\n  isMocking: boolean;\n  mockedResponse: string;\n  dsQuery: DsQuery;\n}\n\nexport class QueryInspector extends PureComponent<Props, State> {\n  formattedJson: any;\n  clipboard: any;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      allNodesExpanded: null,\n      isMocking: false,\n      mockedResponse: '',\n      dsQuery: {\n        isLoading: false,\n        response: {},\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n\n    appEvents.on(CoreEvents.dsRequestResponse, this.onDataSourceResponse);\n    appEvents.on(CoreEvents.dsRequestError, this.onRequestError);\n\n    panel.events.on(PanelEvents.refresh, this.onPanelRefresh);\n    panel.refresh();\n  }\n\n  componentWillUnmount() {\n    const { panel } = this.props;\n\n    appEvents.off(CoreEvents.dsRequestResponse, this.onDataSourceResponse);\n    appEvents.on(CoreEvents.dsRequestError, this.onRequestError);\n\n    panel.events.off(PanelEvents.refresh, this.onPanelRefresh);\n  }\n\n  handleMocking(response: any) {\n    const { mockedResponse } = this.state;\n    let mockedData;\n    try {\n      mockedData = JSON.parse(mockedResponse);\n    } catch (err) {\n      appEvents.emit(AppEvents.alertError, ['R: Failed to parse mocked response']);\n      return;\n    }\n\n    response.data = mockedData;\n  }\n\n  onPanelRefresh = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      dsQuery: {\n        isLoading: true,\n        response: {},\n      },\n    }));\n  };\n\n  onRequestError = (err: any) => {\n    this.onDataSourceResponse(err);\n  };\n\n  onDataSourceResponse = (response: any = {}) => {\n    if (this.state.isMocking) {\n      this.handleMocking(response);\n      return;\n    }\n\n    response = { ...response }; // clone - dont modify the response\n\n    if (response.headers) {\n      delete response.headers;\n    }\n\n    if (response.config) {\n      response.request = response.config;\n      delete response.config;\n      delete response.request.transformRequest;\n      delete response.request.transformResponse;\n      delete response.request.paramSerializer;\n      delete response.request.jsonpCallbackParam;\n      delete response.request.headers;\n      delete response.request.requestId;\n      delete response.request.inspect;\n      delete response.request.retry;\n      delete response.request.timeout;\n    }\n\n    if (response.data) {\n      response.response = response.data;\n\n      delete response.data;\n      delete response.status;\n      delete response.statusText;\n      delete response.$$config;\n    }\n    this.setState(prevState => ({\n      ...prevState,\n      dsQuery: {\n        isLoading: false,\n        response: response,\n      },\n    }));\n  };\n\n  setFormattedJson = (formattedJson: any) => {\n    this.formattedJson = formattedJson;\n  };\n\n  getTextForClipboard = () => {\n    return JSON.stringify(this.formattedJson, null, 2);\n  };\n\n  onClipboardSuccess = () => {\n    appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n  };\n\n  onToggleExpand = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      allNodesExpanded: !this.state.allNodesExpanded,\n    }));\n  };\n\n  onToggleMocking = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      isMocking: !this.state.isMocking,\n    }));\n  };\n\n  getNrOfOpenNodes = () => {\n    if (this.state.allNodesExpanded === null) {\n      return 3; // 3 is default, ie when state is null\n    } else if (this.state.allNodesExpanded) {\n      return 20;\n    }\n    return 1;\n  };\n\n  setMockedResponse = (evt: any) => {\n    const mockedResponse = evt.target.value;\n    this.setState(prevState => ({\n      ...prevState,\n      mockedResponse,\n    }));\n  };\n\n  renderExpandCollapse = () => {\n    const { allNodesExpanded } = this.state;\n\n    const collapse = (\n      <>\n        <i className=\"fa fa-minus-square-o\" /> Collapse All\n      </>\n    );\n    const expand = (\n      <>\n        <i className=\"fa fa-plus-square-o\" /> Expand All\n      </>\n    );\n    return allNodesExpanded ? collapse : expand;\n  };\n\n  render() {\n    const { response, isLoading } = this.state.dsQuery;\n    const openNodes = this.getNrOfOpenNodes();\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading query inspector...\" />;\n    }\n\n    return (\n      <>\n        <div className=\"pull-right\">\n          <button className=\"btn btn-transparent btn-p-x-0 m-r-1\" onClick={this.onToggleExpand}>\n            {this.renderExpandCollapse()}\n          </button>\n          <CopyToClipboard\n            className=\"btn btn-transparent btn-p-x-0\"\n            text={this.getTextForClipboard}\n            onSuccess={this.onClipboardSuccess}\n          >\n            <i className=\"fa fa-clipboard\" /> Copy to Clipboard\n          </CopyToClipboard>\n        </div>\n\n        <JSONFormatter json={response} open={openNodes} onDidRender={this.setFormattedJson} />\n      </>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent, ChangeEvent, FocusEvent, ReactText } from 'react';\n\n// Utils\nimport { rangeUtil, DataSourceSelectItem } from '@grafana/data';\n\n// Components\nimport { EventsWithValidation, Input, InputStatus, Switch, ValidationEvents, FormLabel } from '@grafana/ui';\nimport { DataSourceOption } from './DataSourceOption';\n\n// Types\nimport { PanelModel } from '../state';\n\nconst timeRangeValidationEvents: ValidationEvents = {\n  [EventsWithValidation.onBlur]: [\n    {\n      rule: value => {\n        if (!value) {\n          return true;\n        }\n        return rangeUtil.isValidTimeSpan(value);\n      },\n      errorMessage: 'Not a valid timespan',\n    },\n  ],\n};\n\nconst emptyToNull = (value: string) => {\n  return value === '' ? null : value;\n};\n\ninterface Props {\n  panel: PanelModel;\n  datasource: DataSourceSelectItem;\n}\n\ninterface State {\n  relativeTime: string;\n  timeShift: string;\n  cacheTimeout: string;\n  maxDataPoints: string | ReactText;\n  interval: string;\n  hideTimeOverride: boolean;\n}\n\nexport class QueryOptions extends PureComponent<Props, State> {\n  allOptions: any = {\n    cacheTimeout: {\n      label: 'Cache timeout',\n      placeholder: '60',\n      name: 'cacheTimeout',\n      tooltipInfo: (\n        <>\n          If your time series store has a query cache this option can override the default cache timeout. Specify a\n          numeric value in seconds.\n        </>\n      ),\n    },\n    maxDataPoints: {\n      label: 'Max data points',\n      placeholder: 'auto',\n      name: 'maxDataPoints',\n      tooltipInfo: (\n        <>\n          The maximum data points the query should return. For graphs this is automatically set to one data point per\n          pixel. For some data sources this can also be capped in the datasource settings page. With streaming data,\n          this value is used for the rolling buffer.\n        </>\n      ),\n    },\n    minInterval: {\n      label: 'Min time interval',\n      placeholder: '0',\n      name: 'minInterval',\n      panelKey: 'interval',\n      tooltipInfo: (\n        <>\n          A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example{' '}\n          <code>1m</code> if your data is written every minute. Access auto interval via variable{' '}\n          <code>$__interval</code> for time range string and <code>$__interval_ms</code> for numeric variable that can\n          be used in math expressions.\n        </>\n      ),\n    },\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      relativeTime: props.panel.timeFrom || '',\n      timeShift: props.panel.timeShift || '',\n      cacheTimeout: props.panel.cacheTimeout || '',\n      maxDataPoints: props.panel.maxDataPoints || '',\n      interval: props.panel.interval || '',\n      hideTimeOverride: props.panel.hideTimeOverride || false,\n    };\n  }\n\n  onRelativeTimeChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      relativeTime: event.target.value,\n    });\n  };\n\n  onTimeShiftChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      timeShift: event.target.value,\n    });\n  };\n\n  onOverrideTime = (event: FocusEvent<HTMLInputElement>, status: InputStatus) => {\n    const { value } = event.target;\n    const { panel } = this.props;\n    const emptyToNullValue = emptyToNull(value);\n    if (status === InputStatus.Valid && panel.timeFrom !== emptyToNullValue) {\n      panel.timeFrom = emptyToNullValue;\n      panel.refresh();\n    }\n  };\n\n  onTimeShift = (event: FocusEvent<HTMLInputElement>, status: InputStatus) => {\n    const { value } = event.target;\n    const { panel } = this.props;\n    const emptyToNullValue = emptyToNull(value);\n    if (status === InputStatus.Valid && panel.timeShift !== emptyToNullValue) {\n      panel.timeShift = emptyToNullValue;\n      panel.refresh();\n    }\n  };\n\n  onToggleTimeOverride = () => {\n    const { panel } = this.props;\n    this.setState({ hideTimeOverride: !this.state.hideTimeOverride }, () => {\n      panel.hideTimeOverride = this.state.hideTimeOverride;\n      panel.refresh();\n    });\n  };\n\n  onDataSourceOptionBlur = (panelKey: string) => () => {\n    const { panel } = this.props;\n\n    // @ts-ignore\n    panel[panelKey] = this.state[panelKey];\n    panel.refresh();\n  };\n\n  onDataSourceOptionChange = (panelKey: string) => (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ ...this.state, [panelKey]: event.target.value });\n  };\n\n  /**\n   * Show options for any value that is set, or values that the\n   * current datasource says it will use\n   */\n  renderOptions = () => {\n    const { datasource } = this.props;\n    const queryOptions: any = datasource.meta.queryOptions || {};\n\n    return Object.keys(this.allOptions).map(key => {\n      const options = this.allOptions[key];\n      const panelKey = options.panelKey || key;\n\n      // @ts-ignore\n      const value = this.state[panelKey];\n\n      if (queryOptions[key]) {\n        return (\n          <DataSourceOption\n            key={key}\n            {...options}\n            onChange={this.onDataSourceOptionChange(panelKey)}\n            onBlur={this.onDataSourceOptionBlur(panelKey)}\n            value={value}\n          />\n        );\n      }\n      return null; // nothing to render\n    });\n  };\n\n  render() {\n    const { hideTimeOverride } = this.state;\n    const { relativeTime, timeShift } = this.state;\n    return (\n      <div className=\"gf-form-inline\">\n        {this.renderOptions()}\n\n        <div className=\"gf-form\">\n          <FormLabel>Relative time</FormLabel>\n          <Input\n            type=\"text\"\n            className=\"width-6\"\n            placeholder=\"1h\"\n            onChange={this.onRelativeTimeChange}\n            onBlur={this.onOverrideTime}\n            validationEvents={timeRangeValidationEvents}\n            hideErrorMessage={true}\n            value={relativeTime}\n          />\n        </div>\n\n        <div className=\"gf-form\">\n          <span className=\"gf-form-label\">Time shift</span>\n          <Input\n            type=\"text\"\n            className=\"width-6\"\n            placeholder=\"1h\"\n            onChange={this.onTimeShiftChange}\n            onBlur={this.onTimeShift}\n            validationEvents={timeRangeValidationEvents}\n            hideErrorMessage={true}\n            value={timeShift}\n          />\n        </div>\n        {(timeShift || relativeTime) && (\n          <div className=\"gf-form-inline\">\n            <Switch label=\"Hide time info\" checked={hideTimeOverride} onChange={this.onToggleTimeOverride} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n// Utils & Services\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\nimport { connectWithStore } from 'app/core/utils/connectWithReduxStore';\nimport { StoreState } from 'app/types';\nimport { updateLocation } from 'app/core/actions';\n// Components\nimport { EditorTabBody, EditorToolbarView } from './EditorTabBody';\nimport { VizTypePicker } from './VizTypePicker';\nimport { PluginHelp } from 'app/core/components/PluginHelp/PluginHelp';\nimport { FadeIn } from 'app/core/components/Animations/FadeIn';\n// Types\nimport { PanelModel, DashboardModel } from '../state';\nimport { VizPickerSearch } from './VizPickerSearch';\nimport PluginStateinfo from 'app/features/plugins/PluginStateInfo';\nimport { PanelCtrl } from 'app/plugins/sdk';\nimport { Unsubscribable } from 'rxjs';\nimport { PanelPlugin, PanelPluginMeta, PanelData, LoadingState, DefaultTimeRange } from '@grafana/data';\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  angularPanel?: AngularComponent;\n  onPluginTypeChange: (newType: PanelPluginMeta) => void;\n  updateLocation: typeof updateLocation;\n  urlOpenVizPicker: boolean;\n}\n\ninterface State {\n  isVizPickerOpen: boolean;\n  searchQuery: string;\n  scrollTop: number;\n  hasBeenFocused: boolean;\n  data: PanelData;\n}\n\nexport class VisualizationTab extends PureComponent<Props, State> {\n  element: HTMLElement;\n  angularOptions: AngularComponent;\n  querySubscription: Unsubscribable;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isVizPickerOpen: this.props.urlOpenVizPicker,\n      hasBeenFocused: false,\n      searchQuery: '',\n      scrollTop: 0,\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: DefaultTimeRange,\n      },\n    };\n  }\n\n  getReactPanelOptions = () => {\n    const { panel } = this.props;\n    return panel.getOptions();\n  };\n\n  renderPanelOptions() {\n    const { plugin, angularPanel } = this.props;\n\n    if (angularPanel) {\n      return <div ref={element => (this.element = element)} />;\n    }\n\n    if (plugin.editor) {\n      return (\n        <plugin.editor\n          data={this.state.data}\n          options={this.getReactPanelOptions()}\n          onOptionsChange={this.onPanelOptionsChanged}\n        />\n      );\n    }\n\n    return <p>Visualization has no options</p>;\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n    const queryRunner = panel.getQueryRunner();\n    if (this.shouldLoadAngularOptions()) {\n      this.loadAngularOptions();\n    }\n\n    this.querySubscription = queryRunner.getData().subscribe({\n      next: (data: PanelData) => this.setState({ data }),\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.plugin !== prevProps.plugin) {\n      this.cleanUpAngularOptions();\n    }\n\n    if (this.shouldLoadAngularOptions()) {\n      this.loadAngularOptions();\n    }\n  }\n\n  shouldLoadAngularOptions() {\n    return this.props.angularPanel && this.element && !this.angularOptions;\n  }\n\n  loadAngularOptions() {\n    const { angularPanel } = this.props;\n\n    const scope = angularPanel.getScope();\n\n    // When full page reloading in edit mode the angular panel has on fully compiled & instantiated yet\n    if (!scope.$$childHead) {\n      setTimeout(() => {\n        this.forceUpdate();\n      });\n      return;\n    }\n\n    const panelCtrl: PanelCtrl = scope.$$childHead.ctrl;\n    panelCtrl.initEditMode();\n    panelCtrl.onPluginTypeChange = this.onPluginTypeChange;\n\n    let template = '';\n    for (let i = 0; i < panelCtrl.editorTabs.length; i++) {\n      template +=\n        `\n      <div class=\"panel-options-group\" ng-cloak>` +\n        (i > 0\n          ? `<div class=\"panel-options-group__header\">\n           <span class=\"panel-options-group__title\">{{ctrl.editorTabs[${i}].title}}\n           </span>\n         </div>`\n          : '') +\n        `<div class=\"panel-options-group__body\">\n          <panel-editor-tab editor-tab=\"ctrl.editorTabs[${i}]\" ctrl=\"ctrl\"></panel-editor-tab>\n        </div>\n      </div>\n      `;\n    }\n\n    const loader = getAngularLoader();\n    const scopeProps = { ctrl: panelCtrl };\n\n    this.angularOptions = loader.load(this.element, scopeProps, template);\n  }\n\n  componentWillUnmount() {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n    }\n    this.cleanUpAngularOptions();\n  }\n\n  cleanUpAngularOptions() {\n    if (this.angularOptions) {\n      this.angularOptions.destroy();\n      this.angularOptions = null;\n    }\n  }\n\n  clearQuery = () => {\n    this.setState({ searchQuery: '' });\n  };\n\n  onPanelOptionsChanged = (options: any, callback?: () => void) => {\n    this.props.panel.updateOptions(options);\n    this.forceUpdate(callback);\n  };\n\n  onOpenVizPicker = () => {\n    this.setState({ isVizPickerOpen: true, scrollTop: 0 });\n  };\n\n  onCloseVizPicker = () => {\n    if (this.props.urlOpenVizPicker) {\n      this.props.updateLocation({ query: { openVizPicker: null }, partial: true });\n    }\n\n    this.setState({ isVizPickerOpen: false, hasBeenFocused: false });\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.setState({\n      searchQuery: value,\n    });\n  };\n\n  renderToolbar = (): JSX.Element => {\n    const { plugin } = this.props;\n    const { isVizPickerOpen, searchQuery } = this.state;\n    const { meta } = plugin;\n\n    if (isVizPickerOpen) {\n      return (\n        <VizPickerSearch\n          plugin={meta}\n          searchQuery={searchQuery}\n          onChange={this.onSearchQueryChange}\n          onClose={this.onCloseVizPicker}\n        />\n      );\n    } else {\n      return (\n        <>\n          <div className=\"toolbar__main\" onClick={this.onOpenVizPicker}>\n            <img className=\"toolbar__main-image\" src={meta.info.logos.small} />\n            <div className=\"toolbar__main-name\">{meta.name}</div>\n            <i className=\"fa fa-caret-down\" />\n          </div>\n          <PluginStateinfo state={meta.state} />\n        </>\n      );\n    }\n  };\n\n  onPluginTypeChange = (plugin: PanelPluginMeta) => {\n    if (plugin.id === this.props.plugin.meta.id) {\n      this.setState({ isVizPickerOpen: false });\n    } else {\n      this.props.onPluginTypeChange(plugin);\n    }\n  };\n\n  renderHelp = () => <PluginHelp plugin={this.props.plugin.meta} type=\"help\" />;\n\n  setScrollTop = (event: React.MouseEvent<HTMLElement>) => {\n    const target = event.target as HTMLElement;\n    this.setState({ scrollTop: target.scrollTop });\n  };\n\n  render() {\n    const { plugin } = this.props;\n    const { isVizPickerOpen, searchQuery, scrollTop } = this.state;\n    const { meta } = plugin;\n\n    const pluginHelp: EditorToolbarView = {\n      heading: 'Help',\n      icon: 'fa fa-question',\n      render: this.renderHelp,\n    };\n\n    return (\n      <EditorTabBody\n        heading=\"Visualization\"\n        renderToolbar={this.renderToolbar}\n        toolbarItems={[pluginHelp]}\n        scrollTop={scrollTop}\n        setScrollTop={this.setScrollTop}\n      >\n        <>\n          <FadeIn in={isVizPickerOpen} duration={200} unmountOnExit={true} onExited={this.clearQuery}>\n            <VizTypePicker\n              current={meta}\n              onTypeChange={this.onPluginTypeChange}\n              searchQuery={searchQuery}\n              onClose={this.onCloseVizPicker}\n            />\n          </FadeIn>\n          {this.renderPanelOptions()}\n        </>\n      </EditorTabBody>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  urlOpenVizPicker: !!state.location.query.openVizPicker,\n});\n\nconst mapDispatchToProps = {\n  updateLocation,\n};\n\nexport default connectWithStore(VisualizationTab, mapStateToProps, mapDispatchToProps);\n","import React, { PureComponent } from 'react';\n\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { PanelPluginMeta } from '@grafana/data';\n\ninterface Props {\n  plugin: PanelPluginMeta;\n  searchQuery: string;\n  onChange: (query: string) => void;\n  onClose: () => void;\n}\n\nexport class VizPickerSearch extends PureComponent<Props> {\n  render() {\n    const { searchQuery, onChange, onClose } = this.props;\n    return (\n      <>\n        <FilterInput\n          labelClassName=\"gf-form--has-input-icon\"\n          inputClassName=\"gf-form-input width-13\"\n          placeholder=\"\"\n          onChange={onChange}\n          value={searchQuery}\n          ref={element => element && element.focus()}\n        />\n        <button className=\"btn btn-link toolbar__close\" onClick={onClose}>\n          <i className=\"fa fa-chevron-up\" />\n        </button>\n      </>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport config from 'app/core/config';\nimport VizTypePickerPlugin from './VizTypePickerPlugin';\nimport { EmptySearchResult } from '@grafana/ui';\nimport { PanelPluginMeta } from '@grafana/data';\n\nexport interface Props {\n  current: PanelPluginMeta;\n  onTypeChange: (newType: PanelPluginMeta) => void;\n  searchQuery: string;\n  onClose: () => void;\n}\n\nexport class VizTypePicker extends PureComponent<Props> {\n  searchInput: HTMLElement;\n  pluginList = this.getPanelPlugins;\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  get maxSelectedIndex() {\n    const filteredPluginList = this.getFilteredPluginList();\n    return filteredPluginList.length - 1;\n  }\n\n  get getPanelPlugins(): PanelPluginMeta[] {\n    const allPanels = config.panels;\n\n    return Object.keys(allPanels)\n      .filter(key => allPanels[key]['hideFromList'] === false)\n      .map(key => allPanels[key])\n      .sort((a: PanelPluginMeta, b: PanelPluginMeta) => a.sort - b.sort);\n  }\n\n  renderVizPlugin = (plugin: PanelPluginMeta, index: number) => {\n    const { onTypeChange } = this.props;\n    const isCurrent = plugin.id === this.props.current.id;\n\n    return (\n      <VizTypePickerPlugin key={plugin.id} isCurrent={isCurrent} plugin={plugin} onClick={() => onTypeChange(plugin)} />\n    );\n  };\n\n  getFilteredPluginList = (): PanelPluginMeta[] => {\n    const { searchQuery } = this.props;\n    const regex = new RegExp(searchQuery, 'i');\n    const pluginList = this.pluginList;\n\n    const filtered = pluginList.filter(item => {\n      return regex.test(item.name);\n    });\n\n    return filtered;\n  };\n\n  render() {\n    const filteredPluginList = this.getFilteredPluginList();\n    const hasResults = filteredPluginList.length > 0;\n    return (\n      <div className=\"viz-picker\">\n        <div className=\"viz-picker-list\">\n          {hasResults ? (\n            filteredPluginList.map((plugin, index) => this.renderVizPlugin(plugin, index))\n          ) : (\n            <EmptySearchResult>Could not find anything matching your query</EmptySearchResult>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { PanelPluginMeta } from '@grafana/data';\n\ninterface Props {\n  isCurrent: boolean;\n  plugin: PanelPluginMeta;\n  onClick: () => void;\n}\n\nconst VizTypePickerPlugin = React.memo(\n  ({ isCurrent, plugin, onClick }: Props) => {\n    const cssClass = classNames({\n      'viz-picker__item': true,\n      'viz-picker__item--current': isCurrent,\n    });\n\n    return (\n      <div className={cssClass} onClick={onClick} title={plugin.name}>\n        <div className=\"viz-picker__item-name\">{plugin.name}</div>\n        <img className=\"viz-picker__item-img\" src={plugin.info.logos.small} />\n      </div>\n    );\n  },\n  (prevProps, nextProps) => {\n    if (prevProps.isCurrent === nextProps.isCurrent) {\n      return true;\n    }\n    return false;\n  }\n);\n\nexport default VizTypePickerPlugin;\n","import { getPanelEditorTab, panelEditorInitCompleted, PanelEditorTab, PanelEditorTabIds } from './reducers';\nimport { ThunkResult } from '../../../../types';\nimport { updateLocation } from '../../../../core/actions';\n\nexport const refreshPanelEditor = (props: {\n  hasQueriesTab?: boolean;\n  usesGraphPlugin?: boolean;\n  alertingEnabled?: boolean;\n}): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    let activeTab = getState().panelEditor.activeTab || PanelEditorTabIds.Queries;\n    const { hasQueriesTab, usesGraphPlugin, alertingEnabled } = props;\n\n    const tabs: PanelEditorTab[] = [\n      getPanelEditorTab(PanelEditorTabIds.Queries),\n      getPanelEditorTab(PanelEditorTabIds.Visualization),\n      getPanelEditorTab(PanelEditorTabIds.Advanced),\n    ];\n\n    // handle panels that do not have queries tab\n    if (!hasQueriesTab) {\n      // remove queries tab\n      tabs.shift();\n      // switch tab\n      if (activeTab === PanelEditorTabIds.Queries) {\n        activeTab = PanelEditorTabIds.Visualization;\n      }\n    }\n\n    if (alertingEnabled && usesGraphPlugin) {\n      tabs.push(getPanelEditorTab(PanelEditorTabIds.Alert));\n    }\n\n    dispatch(panelEditorInitCompleted({ activeTab, tabs }));\n  };\n};\n\nexport const changePanelEditorTab = (activeTab: PanelEditorTab): ThunkResult<void> => {\n  return async dispatch => {\n    dispatch(updateLocation({ query: { tab: activeTab.id, openVizPicker: null }, partial: true }));\n  };\n};\n","import memoizeOne from 'memoize-one';\nimport { LocationState } from '../../../../types';\nimport { PanelEditorState, PanelEditorTabIds } from './reducers';\n\nexport const getActiveTabAndTabs = memoizeOne((location: LocationState, panelEditor: PanelEditorState) => {\n  const panelEditorTab = panelEditor.tabs.length > 0 ? panelEditor.tabs[0].id : PanelEditorTabIds.Queries;\n  return {\n    activeTab: location.query.tab || panelEditorTab,\n    tabs: panelEditor.tabs,\n  };\n});\n","// Services & Utils\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { DashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { AnnotationsSrv } from 'app/features/annotations/annotations_srv';\nimport { VariableSrv } from 'app/features/templating/variable_srv';\nimport { KeybindingSrv } from 'app/core/services/keybindingSrv';\n\n// Actions\nimport { updateLocation } from 'app/core/actions';\nimport { notifyApp } from 'app/core/actions';\nimport locationUtil from 'app/core/utils/location_util';\nimport {\n  dashboardInitFetching,\n  dashboardInitCompleted,\n  dashboardInitFailed,\n  dashboardInitSlow,\n  dashboardInitServices,\n  clearDashboardQueriesToUpdate,\n} from './actions';\n\n// Types\nimport { DashboardRouteInfo, StoreState, ThunkDispatch, ThunkResult, DashboardDTO } from 'app/types';\nimport { DashboardModel } from './DashboardModel';\nimport { DataQuery } from '@grafana/data';\n\nexport interface InitDashboardArgs {\n  $injector: any;\n  $scope: any;\n  urlUid?: string;\n  urlSlug?: string;\n  urlType?: string;\n  urlFolderId?: string;\n  routeInfo: DashboardRouteInfo;\n  fixUrl: boolean;\n}\n\nasync function redirectToNewUrl(slug: string, dispatch: ThunkDispatch, currentPath: string) {\n  const res = await getBackendSrv().getDashboardBySlug(slug);\n\n  if (res) {\n    let newUrl = res.meta.url;\n\n    // fix solo route urls\n    if (currentPath.indexOf('dashboard-solo') !== -1) {\n      newUrl = newUrl.replace('/d/', '/d-solo/');\n    }\n\n    const url = locationUtil.stripBaseFromUrl(newUrl);\n    dispatch(updateLocation({ path: url, partial: true, replace: true }));\n  }\n}\n\nasync function fetchDashboard(\n  args: InitDashboardArgs,\n  dispatch: ThunkDispatch,\n  getState: () => StoreState\n): Promise<DashboardDTO | null> {\n  try {\n    switch (args.routeInfo) {\n      case DashboardRouteInfo.Home: {\n        // load home dash\n        const dashDTO: DashboardDTO = await getBackendSrv().get('/api/dashboards/home');\n\n        // if user specified a custom home dashboard redirect to that\n        if (dashDTO.redirectUri) {\n          const newUrl = locationUtil.stripBaseFromUrl(dashDTO.redirectUri);\n          dispatch(updateLocation({ path: newUrl, replace: true }));\n          return null;\n        }\n\n        // disable some actions on the default home dashboard\n        dashDTO.meta.canSave = false;\n        dashDTO.meta.canShare = false;\n        dashDTO.meta.canStar = false;\n        return dashDTO;\n      }\n      case DashboardRouteInfo.Normal: {\n        // for old db routes we redirect\n        if (args.urlType === 'db') {\n          redirectToNewUrl(args.urlSlug, dispatch, getState().location.path);\n          return null;\n        }\n\n        const loaderSrv: DashboardLoaderSrv = args.$injector.get('dashboardLoaderSrv');\n        const dashDTO: DashboardDTO = await loaderSrv.loadDashboard(args.urlType, args.urlSlug, args.urlUid);\n\n        if (args.fixUrl && dashDTO.meta.url) {\n          // check if the current url is correct (might be old slug)\n          const dashboardUrl = locationUtil.stripBaseFromUrl(dashDTO.meta.url);\n          const currentPath = getState().location.path;\n\n          if (dashboardUrl !== currentPath) {\n            // replace url to not create additional history items and then return so that initDashboard below isn't executed multiple times.\n            dispatch(updateLocation({ path: dashboardUrl, partial: true, replace: true }));\n            return null;\n          }\n        }\n        return dashDTO;\n      }\n      case DashboardRouteInfo.New: {\n        return getNewDashboardModelData(args.urlFolderId);\n      }\n      default:\n        throw { message: 'Unknown route ' + args.routeInfo };\n    }\n  } catch (err) {\n    dispatch(dashboardInitFailed({ message: 'Failed to fetch dashboard', error: err }));\n    console.log(err);\n    return null;\n  }\n}\n\n/**\n * This action (or saga) does everything needed to bootstrap a dashboard & dashboard model.\n * First it handles the process of fetching the dashboard, correcting the url if required (causing redirects/url updates)\n *\n * This is used both for single dashboard & solo panel routes, home & new dashboard routes.\n *\n * Then it handles the initializing of the old angular services that the dashboard components & panels still depend on\n *\n */\nexport function initDashboard(args: InitDashboardArgs): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    // set fetching state\n    dispatch(dashboardInitFetching());\n\n    // Detect slow loading / initializing and set state flag\n    // This is in order to not show loading indication for fast loading dashboards as it creates blinking/flashing\n    setTimeout(() => {\n      if (getState().dashboard.model === null) {\n        dispatch(dashboardInitSlow());\n      }\n    }, 500);\n\n    // fetch dashboard data\n    const dashDTO = await fetchDashboard(args, dispatch, getState);\n\n    // returns null if there was a redirect or error\n    if (!dashDTO) {\n      return;\n    }\n\n    // set initializing state\n    dispatch(dashboardInitServices());\n\n    // create model\n    let dashboard: DashboardModel;\n    try {\n      dashboard = new DashboardModel(dashDTO.dashboard, dashDTO.meta);\n    } catch (err) {\n      dispatch(dashboardInitFailed({ message: 'Failed create dashboard model', error: err }));\n      console.log(err);\n      return;\n    }\n\n    // add missing orgId query param\n    const storeState = getState();\n    if (!storeState.location.query.orgId) {\n      dispatch(updateLocation({ query: { orgId: storeState.user.orgId }, partial: true, replace: true }));\n    }\n\n    // init services\n    const timeSrv: TimeSrv = args.$injector.get('timeSrv');\n    const annotationsSrv: AnnotationsSrv = args.$injector.get('annotationsSrv');\n    const variableSrv: VariableSrv = args.$injector.get('variableSrv');\n    const keybindingSrv: KeybindingSrv = args.$injector.get('keybindingSrv');\n    const unsavedChangesSrv = args.$injector.get('unsavedChangesSrv');\n    const dashboardSrv: DashboardSrv = args.$injector.get('dashboardSrv');\n\n    timeSrv.init(dashboard);\n    annotationsSrv.init(dashboard);\n\n    const { panelId, queries } = storeState.dashboard.modifiedQueries;\n    dashboard.meta.fromExplore = !!(panelId && queries);\n\n    // template values service needs to initialize completely before\n    // the rest of the dashboard can load\n    try {\n      await variableSrv.init(dashboard);\n    } catch (err) {\n      dispatch(notifyApp(createErrorNotification('Templating init failed', err)));\n      console.log(err);\n    }\n\n    try {\n      dashboard.processRepeats();\n      dashboard.updateSubmenuVisibility();\n\n      // handle auto fix experimental feature\n      const queryParams = getState().location.query;\n      if (queryParams.autofitpanels) {\n        dashboard.autoFitPanels(window.innerHeight, queryParams.kiosk);\n      }\n\n      // init unsaved changes tracking\n      unsavedChangesSrv.init(dashboard, args.$scope);\n      keybindingSrv.setupDashboardBindings(args.$scope, dashboard);\n    } catch (err) {\n      dispatch(notifyApp(createErrorNotification('Dashboard init failed', err)));\n      console.log(err);\n    }\n\n    if (dashboard.meta.fromExplore) {\n      updateQueriesWhenComingFromExplore(dispatch, dashboard, panelId, queries);\n    }\n\n    // legacy srv state\n    dashboardSrv.setCurrent(dashboard);\n\n    // yay we are done\n    dispatch(dashboardInitCompleted(dashboard));\n  };\n}\n\nfunction getNewDashboardModelData(urlFolderId?: string): any {\n  const data = {\n    meta: {\n      canStar: false,\n      canShare: false,\n      isNew: true,\n      folderId: 0,\n    },\n    dashboard: {\n      title: 'New dashboard',\n      panels: [\n        {\n          type: 'add-panel',\n          gridPos: { x: 0, y: 0, w: 12, h: 9 },\n          title: 'Panel Title',\n        },\n      ],\n    },\n  };\n\n  if (urlFolderId) {\n    data.meta.folderId = parseInt(urlFolderId, 10);\n  }\n\n  return data;\n}\n\nfunction updateQueriesWhenComingFromExplore(\n  dispatch: ThunkDispatch,\n  dashboard: DashboardModel,\n  originPanelId: number,\n  queries: DataQuery[]\n) {\n  const panelArrId = dashboard.panels.findIndex(panel => panel.id === originPanelId);\n\n  if (panelArrId > -1) {\n    dashboard.panels[panelArrId].targets = queries;\n  }\n\n  // Clear update state now that we're done\n  dispatch(clearDashboardQueriesToUpdate());\n}\n","import { updateLocation } from 'app/core/actions';\nimport { store } from 'app/store/store';\nimport config from 'app/core/config';\nimport { getDataSourceSrv, getLocationSrv } from '@grafana/runtime';\nimport { PanelMenuItem } from '@grafana/data';\n\nimport { copyPanel, duplicatePanel, editPanelJson, removePanel, sharePanel } from 'app/features/dashboard/utils/panel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { contextSrv } from '../../../core/services/context_srv';\nimport { navigateToExplore } from '../../explore/state/actions';\nimport { getExploreUrl } from '../../../core/utils/explore';\nimport { getTimeSrv } from '../services/TimeSrv';\n\nexport const getPanelMenu = (dashboard: DashboardModel, panel: PanelModel) => {\n  const onViewPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    store.dispatch(\n      updateLocation({\n        query: {\n          panelId: panel.id,\n          edit: null,\n          fullscreen: true,\n        },\n        partial: true,\n      })\n    );\n  };\n\n  const onEditPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    store.dispatch(\n      updateLocation({\n        query: {\n          panelId: panel.id,\n          edit: true,\n          fullscreen: true,\n        },\n        partial: true,\n      })\n    );\n  };\n\n  const onNewEditPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    store.dispatch(\n      updateLocation({\n        query: {\n          editPanel: panel.id,\n        },\n        partial: true,\n      })\n    );\n  };\n\n  const onSharePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    sharePanel(dashboard, panel);\n  };\n\n  const onInspectPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    getLocationSrv().update({\n      partial: true,\n      query: {\n        inspect: panel.id,\n      },\n    });\n  };\n\n  const onMore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n  };\n\n  const onDuplicatePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    duplicatePanel(dashboard, panel);\n  };\n\n  const onCopyPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    copyPanel(panel);\n  };\n\n  const onEditPanelJson = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    editPanelJson(dashboard, panel);\n  };\n\n  const onRemovePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    removePanel(dashboard, panel, true);\n  };\n\n  const onNavigateToExplore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    const openInNewWindow = event.ctrlKey || event.metaKey ? (url: string) => window.open(url) : undefined;\n    store.dispatch(navigateToExplore(panel, { getDataSourceSrv, getTimeSrv, getExploreUrl, openInNewWindow }) as any);\n  };\n\n  const menu: PanelMenuItem[] = [];\n\n  menu.push({\n    text: 'View',\n    iconClassName: 'gicon gicon-viewer',\n    onClick: onViewPanel,\n    shortcut: 'v',\n  });\n\n  if (dashboard.canEditPanel(panel)) {\n    menu.push({\n      text: 'Edit',\n      iconClassName: 'gicon gicon-editor',\n      onClick: onEditPanel,\n      shortcut: 'e',\n    });\n  }\n\n  menu.push({\n    text: 'Share',\n    iconClassName: 'fa fa-fw fa-share',\n    onClick: onSharePanel,\n    shortcut: 'p s',\n  });\n\n  if (contextSrv.hasAccessToExplore() && panel.datasource) {\n    menu.push({\n      text: 'Explore',\n      iconClassName: 'gicon gicon-explore',\n      shortcut: 'x',\n      onClick: onNavigateToExplore,\n    });\n  }\n\n  if (config.featureToggles.inspect) {\n    menu.push({\n      text: 'Inspect',\n      iconClassName: 'fa fa-fw fa-info-circle',\n      onClick: onInspectPanel,\n      shortcut: 'p i',\n    });\n  }\n\n  if (config.featureToggles.newEdit) {\n    menu.push({\n      text: 'New edit',\n      iconClassName: 'gicon gicon-editor',\n      onClick: onNewEditPanel,\n      shortcut: 'p i',\n    });\n  }\n\n  const subMenu: PanelMenuItem[] = [];\n\n  if (!panel.fullscreen && dashboard.canEditPanel(panel)) {\n    subMenu.push({\n      text: 'Duplicate',\n      onClick: onDuplicatePanel,\n      shortcut: 'p d',\n    });\n\n    subMenu.push({\n      text: 'Copy',\n      onClick: onCopyPanel,\n    });\n  }\n\n  subMenu.push({\n    text: 'Panel JSON',\n    onClick: onEditPanelJson,\n  });\n\n  menu.push({\n    type: 'submenu',\n    text: 'More...',\n    iconClassName: 'fa fa-fw fa-cube',\n    subMenu: subMenu,\n    onClick: onMore,\n  });\n\n  if (dashboard.canEditPanel(panel)) {\n    menu.push({ type: 'divider' });\n\n    menu.push({\n      text: 'Remove',\n      iconClassName: 'fa fa-fw fa-trash',\n      onClick: onRemovePanel,\n      shortcut: 'p r',\n    });\n  }\n\n  return menu;\n};\n","import coreModule from 'app/core/core_module';\n\nconst obj2string = (obj: any) => {\n  return Object.keys(obj)\n    .reduce((acc, curr) => acc.concat(curr + '=' + obj[curr]), [])\n    .join();\n};\n\nexport class GeneralTabCtrl {\n  panelCtrl: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.panelCtrl = $scope.ctrl;\n\n    const updatePanel = () => {\n      console.log('panel.render()');\n      this.panelCtrl.panel.render();\n    };\n\n    const generateValueFromPanel = (scope: any) => {\n      const { panel } = scope.ctrl;\n      const panelPropsToTrack = ['title', 'description', 'transparent', 'repeat', 'repeatDirection', 'minSpan'];\n      const panelPropsString = panelPropsToTrack\n        .map(prop => prop + '=' + (panel[prop] && panel[prop].toString ? panel[prop].toString() : panel[prop]))\n        .join();\n      const panelLinks = panel.links || [];\n      const panelLinksString = panelLinks.map(obj2string).join();\n      return panelPropsString + panelLinksString;\n    };\n\n    $scope.$watch(generateValueFromPanel, updatePanel, true);\n  }\n}\n\n/** @ngInject */\nexport function generalTab() {\n  'use strict';\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/panel/partials/general_tab.html',\n    controller: GeneralTabCtrl,\n  };\n}\n\ncoreModule.directive('panelGeneralTab', generalTab);\n","import React, { FC } from 'react';\nimport { AlphaNotice } from '@grafana/ui';\nimport { PluginState } from '@grafana/data';\nimport { css } from 'emotion';\n\ninterface Props {\n  state?: PluginState;\n}\n\nfunction getPluginStateInfoText(state?: PluginState): string | null {\n  switch (state) {\n    case PluginState.alpha:\n      return 'Alpha Plugin: This plugin is a work in progress and updates may include breaking changes';\n    case PluginState.beta:\n      return 'Beta Plugin: There could be bugs and minor breaking changes to this plugin';\n  }\n  return null;\n}\n\nconst PluginStateinfo: FC<Props> = props => {\n  const text = getPluginStateInfoText(props.state);\n\n  if (!text) {\n    return null;\n  }\n\n  return (\n    <AlphaNotice\n      state={props.state}\n      text={text}\n      className={css`\n        margin-left: 16px;\n      `}\n    />\n  );\n};\n\nexport default PluginStateinfo;\n"],"mappingssrqEA;AACA;AAWA;AAAA;AAIA;AAAA;AAkCA;AACA;AACA;AAlCA;;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAQA;AACA;AAAA;;;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAEA;AAQA;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AAgBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmBA;AAxDA;AACA;AACA;AAEA;AACA;AACA;AAiCA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAaA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAyDA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAOA;AACA;AACA;AACA;AAMA;;AAoCA;AA1KA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;;AAAA;AAOA;AACA;AACA;;;;;AACA;AAmFA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAOA;AACA;AAIA;AACA;AAAA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AC3NA;AACA;AACA;AAEA;AACA;AAYA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAsBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA2CA;AArFA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA0BA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AAIA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AAOA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AC7GA;AACA;AAEA;AACA;AAEA;AACA;AAaA;AAAA;AAWA;AAAA;AAVA;AACA;AACA;AACA;AACA;AAIA;AAoBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AA1DA;;AACA;AAEA;AACA;AACA;AAEA;;;;;;AACA;AACA;AAEA;AACA;;AAAA;AACA;;;;;AACA;AA8CA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAGA;AAKA;AACA;AAGA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzHA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAaA;AAAA;AACA;AAAA;AAqCA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AAEA;AAIA;AAxHA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAyFA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAGA;AAaA;AACA;AAAA;;;;;;;;;;;;;;AC7LA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAGA;AACA;AACA;AAOA;AAAA;AACA;AAAA;AAcA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApDA;AACA;AACA;AAEA;;AACA;AAEA;AACA;AACA;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AACA;;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAIA;AAKA;AAGA;AACA;AAAA;;;;;;;;;;;;;;ACnHA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAoBA;AAAA;AAIA;AAAA;AAFA;AA2BA;AACA;AACA;AA0DA;AACA;AACA;AAEA;AACA;AACA;AAxFA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAMA;;;;;;AACA;AACA;AACA;AAEA;AAGA;AACA;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;;;;;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAUA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAWA;AAGA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAcA;AAWA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3NA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAYA;AAsBA;AAAA;AAIA;AAAA;AAHA;AA6GA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AA1LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAsEA;AAAA;AACA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAiBA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxWA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAuBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAiDA;AA/CA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAQA;AAMA;AACA;AACA;AACA;;AAAA;AAEA;AAEA;AAGA;AAEA;;AAAA;AAQA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACzHA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAGA;AAEA;AAKA;AAKA;AAEA;;AAEA;AACA;AACA;AACA;;AA+BA;AA7BA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;AC7GA;AAGA;AACA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AAYA;AAGA;;AAQA;AANA;AACA;AACA;AAEA;AACA;AACA;AAAA;;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAMA;AACA;AACA;AACA;AAIA;AACA;AACA;AAMA;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AAcA;AAAA;AAOA;AAAA;AANA;AAIA;AAuBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAnCA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AACA;AAAA;AACA;AACA;;;AAAA;AAoBA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAOA;AACA;AAAA;;;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AAAA;AACA;AAEA;AACA;AAYA;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AAEA;AACA;AACA;AA4BA;AAAA;AAKA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AApBA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAaA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAAA;AAIA;AAEA;AACA;AAKA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAQA;AAnGA;AACA;AACA;AAkGA;AAAA;AArGA;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAMA;AAAA;AAIA;AAAA;AA4BA;AACA;AACA;AACA;AACA;;AA9BA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAUA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAeA;AAAA;AACA;AAAA;AAaA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAlCA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AA2BA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAGA;AACA;AAAA;AAEA;AAEA;AAEA;AAQA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5IA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AASA;AACA;AAEA;AACA;AAiBA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA2BA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AASA;AACA;AAIA;;AAuDA;AAnPA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAuKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AACA;AAEA;;AAKA;AAqBA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACtTA;AACA;AAEA;AACA;AAMA;AACA;AAmBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAyCA;AAvCA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AAmBA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AACA;AAkBA;AAAA;AAIA;AAAA;AA6CA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AA7JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAsHA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAKA;AACA;AAGA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACvNA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAgBA;AAAA;AAyCA;AAAA;AAxCA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAAA;AACA;;AAAA;AAEA;AAEA;AACA;AAeA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AA1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAoFA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAYA;AACA;AACA;AAWA;AAEA;AAKA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/NA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAoBA;AAAA;AAKA;AAAA;AAgBA;AACA;AACA;AACA;AAuGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAQA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AA3LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAOA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAwEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AAOA;AAIA;AACA;AAAA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;ACtRA;AAEA;AAUA;AAAA;AAAA;;AAmBA;AAlBA;AACA;AACA;AAEA;AAQA;AACA;AAIA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AAEA;AACA;AACA;AAUA;AAAA;AAIA;AAAA;AAFA;AAoBA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAnCA;AAEA;AAAA;AACA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAAA;AAuBA;AAAA;AACA;AACA;AACA;AAEA;AASA;AACA;AAAA;;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;AChCA;AAEA;AAEA;AAKA;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AACA;AACA;AAEA;AACA;;AACA;;;AACA;AACA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AAcA;;;;;AACA;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AACA;AAEA;AAIA;;;;;;AAEA;;AACA;AAiBA;AAuBA;;;AAtCA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;AAGA;AACA;AACA;;;;;AAEA;AAEA;;;;;;;;AAQA;AACA;AAAA;AACA;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;AAKA;;AAAA;;;;AAEA;AACA;;;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AClQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AChMA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AASA;AAEA;;;;;;A","sourceRoot":""}
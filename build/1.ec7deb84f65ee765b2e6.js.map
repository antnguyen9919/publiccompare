{"version":3,"file":"1.ec7deb84f65ee765b2e6.js","sources":["webpack:///./public/app/core/components/PasswordInput/PasswordInput.tsx","webpack:///./public/app/features/profile/ChangePasswordForm.tsx","webpack:///./public/app/features/profile/ChangePasswordPage.tsx"],"sourcesContent":["import React, { ChangeEvent, forwardRef } from 'react';\nimport { Input, FormLabel } from '@grafana/ui';\n\nexport interface Props {\n  label: string;\n  value: string | undefined;\n  onChange: (value: string) => void;\n}\n\nexport const PasswordInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\n  <>\n    <FormLabel className=\"width-8\">{props.label}</FormLabel>\n    <Input\n      className=\"gf-form-input max-width-22\"\n      type=\"password\"\n      onChange={(event: ChangeEvent<HTMLInputElement>) => props.onChange(event.target.value)}\n      value={props.value}\n    />\n  </>\n));\n","import React, { PureComponent, MouseEvent } from 'react';\nimport config from 'app/core/config';\nimport { Button, LinkButton } from '@grafana/ui';\nimport { ChangePasswordFields } from 'app/core/utils/UserProvider';\nimport { PasswordInput } from 'app/core/components/PasswordInput/PasswordInput';\n\nexport interface Props {\n  isSaving: boolean;\n  onChangePassword: (payload: ChangePasswordFields) => void;\n}\n\nexport interface State {\n  oldPassword: string;\n  newPassword: string;\n  confirmNew: string;\n}\n\nexport class ChangePasswordForm extends PureComponent<Props, State> {\n  state: State = {\n    oldPassword: '',\n    newPassword: '',\n    confirmNew: '',\n  };\n\n  onOldPasswordChange = (oldPassword: string) => {\n    this.setState({ oldPassword });\n  };\n\n  onNewPasswordChange = (newPassword: string) => {\n    this.setState({ newPassword });\n  };\n\n  onConfirmPasswordChange = (confirmNew: string) => {\n    this.setState({ confirmNew });\n  };\n\n  onSubmitChangePassword = (event: MouseEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    this.props.onChangePassword({ ...this.state });\n  };\n\n  render() {\n    const { oldPassword, newPassword, confirmNew } = this.state;\n    const { isSaving } = this.props;\n    const { ldapEnabled, authProxyEnabled } = config;\n\n    if (ldapEnabled || authProxyEnabled) {\n      return <p>You cannot change password when ldap or auth proxy authentication is enabled.</p>;\n    }\n\n    return (\n      <form name=\"userForm\" className=\"gf-form-group\">\n        <div className=\"gf-form max-width-30\">\n          <PasswordInput label=\"Old Password\" onChange={this.onOldPasswordChange} value={oldPassword} />\n        </div>\n        <div className=\"gf-form max-width-30\">\n          <PasswordInput label=\"New Password\" onChange={this.onNewPasswordChange} value={newPassword} />\n        </div>\n        <div className=\"gf-form max-width-30\">\n          <PasswordInput label=\"Confirm Password\" onChange={this.onConfirmPasswordChange} value={confirmNew} />\n        </div>\n        <div className=\"gf-form-button-row\">\n          <Button variant=\"primary\" onClick={this.onSubmitChangePassword} disabled={isSaving}>\n            Change Password\n          </Button>\n          <LinkButton variant=\"transparent\" href={`${config.appSubUrl}/profile`}>\n            Cancel\n          </LinkButton>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default ChangePasswordForm;\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { StoreState } from 'app/types';\nimport { NavModel } from '@grafana/data';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { UserProvider } from 'app/core/utils/UserProvider';\nimport Page from 'app/core/components/Page/Page';\nimport { ChangePasswordForm } from './ChangePasswordForm';\n\nexport interface Props {\n  navModel: NavModel;\n}\n\nexport class ChangePasswordPage extends PureComponent<Props> {\n  render() {\n    const { navModel } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <UserProvider>\n          {({ changePassword }, states) => (\n            <Page.Contents>\n              <h3 className=\"page-sub-heading\">Change Your Password</h3>\n              <ChangePasswordForm onChangePassword={changePassword} isSaving={states.changePassword} />\n            </Page.Contents>\n          )}\n        </UserProvider>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, `change-password`),\n  };\n}\n\nconst mapDispatchToProps = {};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(ChangePasswordPage));\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AAEA;AAaA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAiCA;AA/BA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAMA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EA;AACA;AACA;AAGA;AACA;AACA;AACA;AAMA;AAAA;AAAA;;AAgBA;AAfA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAHA;AASA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;A","sourceRoot":""}
{"version":3,"file":"default~DashboardPage~SoloPanelPage~explore.ec7deb84f65ee765b2e6.js","sources":["webpack:///./node_modules/react-virtualized-auto-sizer/dist/index.esm.js","webpack:///./public/app/core/components/Animations/FadeIn.tsx","webpack:///./public/app/core/components/Select/DataSourcePicker.tsx","webpack:///./public/app/features/explore/state/actions.ts","webpack:///./public/app/features/explore/state/selectors.ts","webpack:///./public/app/features/profile/state/selectors.ts"],"sourcesContent":["import { createElement, PureComponent } from 'react';\n\n/**\n * Detect Element Resize.\n * https://github.com/sdecima/javascript-detect-element-resize\n * Sebastian Decima\n *\n * Forked from version 0.5.3; includes the following modifications:\n * 1) Guard against unsafe 'window' and 'document' references (to support SSR).\n * 2) Defer initialization code via a top-level function wrapper (to support SSR).\n * 3) Avoid unnecessary reflows by not measuring size for scroll events bubbling from children.\n * 4) Add nonce for style element.\n **/\n\nfunction createDetectElementResize(nonce) {\n  // Check `document` and `window` in case of server-side rendering\n  var _window;\n  if (typeof window !== 'undefined') {\n    _window = window;\n  } else if (typeof self !== 'undefined') {\n    _window = self;\n  } else {\n    _window = global;\n  }\n\n  var attachEvent = typeof document !== 'undefined' && document.attachEvent;\n\n  if (!attachEvent) {\n    var requestFrame = function () {\n      var raf = _window.requestAnimationFrame || _window.mozRequestAnimationFrame || _window.webkitRequestAnimationFrame || function (fn) {\n        return _window.setTimeout(fn, 20);\n      };\n      return function (fn) {\n        return raf(fn);\n      };\n    }();\n\n    var cancelFrame = function () {\n      var cancel = _window.cancelAnimationFrame || _window.mozCancelAnimationFrame || _window.webkitCancelAnimationFrame || _window.clearTimeout;\n      return function (id) {\n        return cancel(id);\n      };\n    }();\n\n    var resetTriggers = function resetTriggers(element) {\n      var triggers = element.__resizeTriggers__,\n          expand = triggers.firstElementChild,\n          contract = triggers.lastElementChild,\n          expandChild = expand.firstElementChild;\n      contract.scrollLeft = contract.scrollWidth;\n      contract.scrollTop = contract.scrollHeight;\n      expandChild.style.width = expand.offsetWidth + 1 + 'px';\n      expandChild.style.height = expand.offsetHeight + 1 + 'px';\n      expand.scrollLeft = expand.scrollWidth;\n      expand.scrollTop = expand.scrollHeight;\n    };\n\n    var checkTriggers = function checkTriggers(element) {\n      return element.offsetWidth != element.__resizeLast__.width || element.offsetHeight != element.__resizeLast__.height;\n    };\n\n    var scrollListener = function scrollListener(e) {\n      // Don't measure (which forces) reflow for scrolls that happen inside of children!\n      if (e.target.className.indexOf('contract-trigger') < 0 && e.target.className.indexOf('expand-trigger') < 0) {\n        return;\n      }\n\n      var element = this;\n      resetTriggers(this);\n      if (this.__resizeRAF__) {\n        cancelFrame(this.__resizeRAF__);\n      }\n      this.__resizeRAF__ = requestFrame(function () {\n        if (checkTriggers(element)) {\n          element.__resizeLast__.width = element.offsetWidth;\n          element.__resizeLast__.height = element.offsetHeight;\n          element.__resizeListeners__.forEach(function (fn) {\n            fn.call(element, e);\n          });\n        }\n      });\n    };\n\n    /* Detect CSS Animations support to detect element display/re-attach */\n    var animation = false,\n        keyframeprefix = '',\n        animationstartevent = 'animationstart',\n        domPrefixes = 'Webkit Moz O ms'.split(' '),\n        startEvents = 'webkitAnimationStart animationstart oAnimationStart MSAnimationStart'.split(' '),\n        pfx = '';\n    {\n      var elm = document.createElement('fakeelement');\n      if (elm.style.animationName !== undefined) {\n        animation = true;\n      }\n\n      if (animation === false) {\n        for (var i = 0; i < domPrefixes.length; i++) {\n          if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {\n            pfx = domPrefixes[i];\n            keyframeprefix = '-' + pfx.toLowerCase() + '-';\n            animationstartevent = startEvents[i];\n            animation = true;\n            break;\n          }\n        }\n      }\n    }\n\n    var animationName = 'resizeanim';\n    var animationKeyframes = '@' + keyframeprefix + 'keyframes ' + animationName + ' { from { opacity: 0; } to { opacity: 0; } } ';\n    var animationStyle = keyframeprefix + 'animation: 1ms ' + animationName + '; ';\n  }\n\n  var createStyles = function createStyles(doc) {\n    if (!doc.getElementById('detectElementResize')) {\n      //opacity:0 works around a chrome bug https://code.google.com/p/chromium/issues/detail?id=286360\n      var css = (animationKeyframes ? animationKeyframes : '') + '.resize-triggers { ' + (animationStyle ? animationStyle : '') + 'visibility: hidden; opacity: 0; } ' + '.resize-triggers, .resize-triggers > div, .contract-trigger:before { content: \" \"; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',\n          head = doc.head || doc.getElementsByTagName('head')[0],\n          style = doc.createElement('style');\n\n      style.id = 'detectElementResize';\n      style.type = 'text/css';\n\n      if (nonce != null) {\n        style.setAttribute('nonce', nonce);\n      }\n\n      if (style.styleSheet) {\n        style.styleSheet.cssText = css;\n      } else {\n        style.appendChild(doc.createTextNode(css));\n      }\n\n      head.appendChild(style);\n    }\n  };\n\n  var addResizeListener = function addResizeListener(element, fn) {\n    if (attachEvent) {\n      element.attachEvent('onresize', fn);\n    } else {\n      if (!element.__resizeTriggers__) {\n        var doc = element.ownerDocument;\n        var elementStyle = _window.getComputedStyle(element);\n        if (elementStyle && elementStyle.position == 'static') {\n          element.style.position = 'relative';\n        }\n        createStyles(doc);\n        element.__resizeLast__ = {};\n        element.__resizeListeners__ = [];\n        (element.__resizeTriggers__ = doc.createElement('div')).className = 'resize-triggers';\n        element.__resizeTriggers__.innerHTML = '<div class=\"expand-trigger\"><div></div></div>' + '<div class=\"contract-trigger\"></div>';\n        element.appendChild(element.__resizeTriggers__);\n        resetTriggers(element);\n        element.addEventListener('scroll', scrollListener, true);\n\n        /* Listen for a css animation to detect element display/re-attach */\n        if (animationstartevent) {\n          element.__resizeTriggers__.__animationListener__ = function animationListener(e) {\n            if (e.animationName == animationName) {\n              resetTriggers(element);\n            }\n          };\n          element.__resizeTriggers__.addEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);\n        }\n      }\n      element.__resizeListeners__.push(fn);\n    }\n  };\n\n  var removeResizeListener = function removeResizeListener(element, fn) {\n    if (attachEvent) {\n      element.detachEvent('onresize', fn);\n    } else {\n      element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);\n      if (!element.__resizeListeners__.length) {\n        element.removeEventListener('scroll', scrollListener, true);\n        if (element.__resizeTriggers__.__animationListener__) {\n          element.__resizeTriggers__.removeEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);\n          element.__resizeTriggers__.__animationListener__ = null;\n        }\n        try {\n          element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);\n        } catch (e) {\n          // Preact compat; see developit/preact-compat/issues/228\n        }\n      }\n    }\n  };\n\n  return {\n    addResizeListener: addResizeListener,\n    removeResizeListener: removeResizeListener\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar AutoSizer = function (_React$PureComponent) {\n  inherits(AutoSizer, _React$PureComponent);\n\n  function AutoSizer() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, AutoSizer);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = AutoSizer.__proto__ || Object.getPrototypeOf(AutoSizer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      height: _this.props.defaultHeight || 0,\n      width: _this.props.defaultWidth || 0\n    }, _this._onResize = function () {\n      var _this$props = _this.props,\n          disableHeight = _this$props.disableHeight,\n          disableWidth = _this$props.disableWidth,\n          onResize = _this$props.onResize;\n\n\n      if (_this._parentNode) {\n        // Guard against AutoSizer component being removed from the DOM immediately after being added.\n        // This can result in invalid style values which can result in NaN values if we don't handle them.\n        // See issue #150 for more context.\n\n        var _height = _this._parentNode.offsetHeight || 0;\n        var _width = _this._parentNode.offsetWidth || 0;\n\n        var _style = window.getComputedStyle(_this._parentNode) || {};\n        var paddingLeft = parseInt(_style.paddingLeft, 10) || 0;\n        var paddingRight = parseInt(_style.paddingRight, 10) || 0;\n        var paddingTop = parseInt(_style.paddingTop, 10) || 0;\n        var paddingBottom = parseInt(_style.paddingBottom, 10) || 0;\n\n        var newHeight = _height - paddingTop - paddingBottom;\n        var newWidth = _width - paddingLeft - paddingRight;\n\n        if (!disableHeight && _this.state.height !== newHeight || !disableWidth && _this.state.width !== newWidth) {\n          _this.setState({\n            height: _height - paddingTop - paddingBottom,\n            width: _width - paddingLeft - paddingRight\n          });\n\n          onResize({ height: _height, width: _width });\n        }\n      }\n    }, _this._setRef = function (autoSizer) {\n      _this._autoSizer = autoSizer;\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(AutoSizer, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var nonce = this.props.nonce;\n\n      if (this._autoSizer && this._autoSizer.parentNode && this._autoSizer.parentNode.ownerDocument && this._autoSizer.parentNode.ownerDocument.defaultView && this._autoSizer.parentNode instanceof this._autoSizer.parentNode.ownerDocument.defaultView.HTMLElement) {\n        // Delay access of parentNode until mount.\n        // This handles edge-cases where the component has already been unmounted before its ref has been set,\n        // As well as libraries like react-lite which have a slightly different lifecycle.\n        this._parentNode = this._autoSizer.parentNode;\n\n        // Defer requiring resize handler in order to support server-side rendering.\n        // See issue #41\n        this._detectElementResize = createDetectElementResize(nonce);\n        this._detectElementResize.addResizeListener(this._parentNode, this._onResize);\n\n        this._onResize();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this._detectElementResize && this._parentNode) {\n        this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          disableHeight = _props.disableHeight,\n          disableWidth = _props.disableWidth,\n          style = _props.style;\n      var _state = this.state,\n          height = _state.height,\n          width = _state.width;\n\n      // Outer div should not force width/height since that may prevent containers from shrinking.\n      // Inner component should overflow and use calculated width/height.\n      // See issue #68 for more information.\n\n      var outerStyle = { overflow: 'visible' };\n      var childParams = {};\n\n      // Avoid rendering children before the initial measurements have been collected.\n      // At best this would just be wasting cycles.\n      var bailoutOnChildren = false;\n\n      if (!disableHeight) {\n        if (height === 0) {\n          bailoutOnChildren = true;\n        }\n        outerStyle.height = 0;\n        childParams.height = height;\n      }\n\n      if (!disableWidth) {\n        if (width === 0) {\n          bailoutOnChildren = true;\n        }\n        outerStyle.width = 0;\n        childParams.width = width;\n      }\n\n      return createElement(\n        'div',\n        {\n          className: className,\n          ref: this._setRef,\n          style: _extends({}, outerStyle, style) },\n        !bailoutOnChildren && children(childParams)\n      );\n    }\n  }]);\n  return AutoSizer;\n}(PureComponent);\n\nAutoSizer.defaultProps = {\n  onResize: function onResize() {},\n  disableHeight: false,\n  disableWidth: false,\n  style: {}\n};\n\nexport default AutoSizer;\n","import React, { FC, CSSProperties } from 'react';\nimport Transition, { ExitHandler } from 'react-transition-group/Transition';\n\ninterface Props {\n  duration: number;\n  children: JSX.Element;\n  in: boolean;\n  unmountOnExit?: boolean;\n  onExited?: ExitHandler;\n}\n\nexport const FadeIn: FC<Props> = props => {\n  const defaultStyle: CSSProperties = {\n    transition: `opacity ${props.duration}ms linear`,\n    opacity: 0,\n  };\n\n  const transitionStyles: { [str: string]: CSSProperties } = {\n    exited: { opacity: 0, display: 'none' },\n    entering: { opacity: 0 },\n    entered: { opacity: 1 },\n    exiting: { opacity: 0 },\n  };\n\n  return (\n    <Transition\n      in={props.in}\n      timeout={props.duration}\n      unmountOnExit={props.unmountOnExit || false}\n      onExited={props.onExited}\n    >\n      {state => (\n        <div\n          style={{\n            ...defaultStyle,\n            ...transitionStyles[state],\n          }}\n        >\n          {props.children}\n        </div>\n      )}\n    </Transition>\n  );\n};\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport { Select } from '@grafana/ui';\nimport { SelectableValue, DataSourceSelectItem } from '@grafana/data';\n\nexport interface Props {\n  onChange: (ds: DataSourceSelectItem) => void;\n  datasources: DataSourceSelectItem[];\n  current: DataSourceSelectItem;\n  hideTextValue?: boolean;\n  onBlur?: () => void;\n  autoFocus?: boolean;\n  openMenuOnFocus?: boolean;\n  showLoading?: boolean;\n}\n\nexport class DataSourcePicker extends PureComponent<Props> {\n  static defaultProps: Partial<Props> = {\n    autoFocus: false,\n    openMenuOnFocus: false,\n  };\n\n  searchInput: HTMLElement;\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  onChange = (item: SelectableValue<string>) => {\n    const ds = this.props.datasources.find(ds => ds.name === item.value);\n    this.props.onChange(ds);\n  };\n\n  render() {\n    const { datasources, current, autoFocus, hideTextValue, onBlur, openMenuOnFocus, showLoading } = this.props;\n\n    const options = datasources.map(ds => ({\n      value: ds.name,\n      label: ds.name,\n      imgUrl: ds.meta.info.logos.small,\n    }));\n\n    const value = current && {\n      label: current.name.substr(0, 37),\n      value: current.name,\n      imgUrl: current.meta.info.logos.small,\n      loading: showLoading,\n      hideText: hideTextValue,\n    };\n\n    return (\n      <div className=\"gf-form-inline\">\n        <Select\n          className=\"ds-picker\"\n          isMulti={false}\n          isClearable={false}\n          backspaceRemovesValue={false}\n          onChange={this.onChange}\n          options={options}\n          autoFocus={autoFocus}\n          onBlur={onBlur}\n          openMenuOnFocus={openMenuOnFocus}\n          maxMenuHeight={500}\n          placeholder=\"Select datasource\"\n          noOptionsMessage={() => 'No datasources found'}\n          value={value}\n        />\n      </div>\n    );\n  }\n}\n\nexport default DataSourcePicker;\n","// Libraries\nimport { map, throttleTime } from 'rxjs/operators';\nimport { identity } from 'rxjs';\nimport { ActionCreatorWithPayload, PayloadAction } from '@reduxjs/toolkit';\nimport { DataSourceSrv } from '@grafana/runtime';\nimport { RefreshPicker } from '@grafana/ui';\nimport {\n  AbsoluteTimeRange,\n  DataQuery,\n  DataSourceApi,\n  dateTimeForTimeZone,\n  isDateTime,\n  LoadingState,\n  LogsDedupStrategy,\n  PanelData,\n  QueryFixAction,\n  RawTimeRange,\n  TimeRange,\n} from '@grafana/data';\n// Services & Utils\nimport store from 'app/core/store';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { Emitter } from 'app/core/core';\nimport {\n  buildQueryTransaction,\n  clearQueryKeys,\n  ensureQueries,\n  generateEmptyQuery,\n  generateNewKeyAndAddRefIdIfMissing,\n  GetExploreUrlArguments,\n  getTimeRange,\n  getTimeRangeFromUrl,\n  hasNonEmptyQuery,\n  lastUsedDatasourceKeyForOrgId,\n  parseUrlState,\n  serializeStateToUrlParam,\n  stopQueryState,\n  updateHistory,\n} from 'app/core/utils/explore';\n// Types\nimport { ExploreItemState, ExploreUrlState, ThunkResult } from 'app/types';\n\nimport { ExploreId, ExploreMode, ExploreUIState, QueryOptions } from 'app/types/explore';\nimport {\n  addQueryRowAction,\n  changeModeAction,\n  changeQueryAction,\n  changeRangeAction,\n  changeRefreshIntervalAction,\n  ChangeRefreshIntervalPayload,\n  changeSizeAction,\n  ChangeSizePayload,\n  clearQueriesAction,\n  historyUpdatedAction,\n  initializeExploreAction,\n  loadDatasourceMissingAction,\n  loadDatasourcePendingAction,\n  loadDatasourceReadyAction,\n  LoadDatasourceReadyPayload,\n  modifyQueriesAction,\n  queriesImportedAction,\n  queryStoreSubscriptionAction,\n  queryStreamUpdatedAction,\n  scanStartAction,\n  scanStopAction,\n  setQueriesAction,\n  setUrlReplacedAction,\n  splitCloseAction,\n  splitOpenAction,\n  syncTimesAction,\n  toggleGraphAction,\n  ToggleGraphPayload,\n  toggleTableAction,\n  ToggleTablePayload,\n  updateDatasourceInstanceAction,\n  updateUIStateAction,\n} from './actionTypes';\nimport { getTimeZone } from 'app/features/profile/state/selectors';\nimport { getShiftedTimeRange } from 'app/core/utils/timePicker';\nimport { updateLocation } from '../../../core/actions';\nimport { getTimeSrv, TimeSrv } from '../../dashboard/services/TimeSrv';\nimport { preProcessPanelData, runRequest } from '../../dashboard/state/runRequest';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { getExploreDatasources } from './selectors';\n\n/**\n * Updates UI state and save it to the URL\n */\nconst updateExploreUIState = (exploreId: ExploreId, uiStateFragment: Partial<ExploreUIState>): ThunkResult<void> => {\n  return dispatch => {\n    dispatch(updateUIStateAction({ exploreId, ...uiStateFragment }));\n    dispatch(stateSave());\n  };\n};\n\n/**\n * Adds a query row after the row with the given index.\n */\nexport function addQueryRow(exploreId: ExploreId, index: number): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const queries = getState().explore[exploreId].queries;\n    const query = generateEmptyQuery(queries, index);\n\n    dispatch(addQueryRowAction({ exploreId, index, query }));\n  };\n}\n\n/**\n * Loads a new datasource identified by the given name.\n */\nexport function changeDatasource(exploreId: ExploreId, datasource: string): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    let newDataSourceInstance: DataSourceApi = null;\n\n    if (!datasource) {\n      newDataSourceInstance = await getDatasourceSrv().get();\n    } else {\n      newDataSourceInstance = await getDatasourceSrv().get(datasource);\n    }\n\n    const currentDataSourceInstance = getState().explore[exploreId].datasourceInstance;\n    const queries = getState().explore[exploreId].queries;\n    const orgId = getState().user.orgId;\n    const datasourceVersion = newDataSourceInstance.getVersion && (await newDataSourceInstance.getVersion());\n\n    // HACK: Switch to logs mode if coming from Prometheus to Loki\n    const prometheusToLoki =\n      currentDataSourceInstance?.meta?.name === 'Prometheus' && newDataSourceInstance?.meta?.name === 'Loki';\n\n    dispatch(\n      updateDatasourceInstanceAction({\n        exploreId,\n        datasourceInstance: newDataSourceInstance,\n        version: datasourceVersion,\n        mode: prometheusToLoki ? ExploreMode.Logs : undefined,\n      })\n    );\n\n    await dispatch(importQueries(exploreId, queries, currentDataSourceInstance, newDataSourceInstance));\n\n    if (getState().explore[exploreId].isLive) {\n      dispatch(changeRefreshInterval(exploreId, RefreshPicker.offOption.value));\n    }\n\n    await dispatch(loadDatasource(exploreId, newDataSourceInstance, orgId));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Change the display mode in Explore.\n */\nexport function changeMode(exploreId: ExploreId, mode: ExploreMode): ThunkResult<void> {\n  return dispatch => {\n    dispatch(changeModeAction({ exploreId, mode }));\n  };\n}\n\n/**\n * Query change handler for the query row with the given index.\n * If `override` is reset the query modifications and run the queries. Use this to set queries via a link.\n */\nexport function changeQuery(\n  exploreId: ExploreId,\n  query: DataQuery,\n  index: number,\n  override = false\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Null query means reset\n    if (query === null) {\n      const queries = getState().explore[exploreId].queries;\n      const { refId, key } = queries[index];\n      query = generateNewKeyAndAddRefIdIfMissing({ refId, key }, queries, index);\n    }\n\n    dispatch(changeQueryAction({ exploreId, query, index, override }));\n    if (override) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Keep track of the Explore container size, in particular the width.\n * The width will be used to calculate graph intervals (number of datapoints).\n */\nexport function changeSize(\n  exploreId: ExploreId,\n  { height, width }: { height: number; width: number }\n): PayloadAction<ChangeSizePayload> {\n  return changeSizeAction({ exploreId, height, width });\n}\n\nexport const updateTimeRange = (options: {\n  exploreId: ExploreId;\n  rawRange?: RawTimeRange;\n  absoluteRange?: AbsoluteTimeRange;\n}): ThunkResult<void> => {\n  return (dispatch, getState) => {\n    const { syncedTimes } = getState().explore;\n    if (syncedTimes) {\n      dispatch(updateTime({ ...options, exploreId: ExploreId.left }));\n      dispatch(runQueries(ExploreId.left));\n      dispatch(updateTime({ ...options, exploreId: ExploreId.right }));\n      dispatch(runQueries(ExploreId.right));\n    } else {\n      dispatch(updateTime({ ...options }));\n      dispatch(runQueries(options.exploreId));\n    }\n  };\n};\n/**\n * Change the refresh interval of Explore. Called from the Refresh picker.\n */\nexport function changeRefreshInterval(\n  exploreId: ExploreId,\n  refreshInterval: string\n): PayloadAction<ChangeRefreshIntervalPayload> {\n  return changeRefreshIntervalAction({ exploreId, refreshInterval });\n}\n\n/**\n * Clear all queries and results.\n */\nexport function clearQueries(exploreId: ExploreId): ThunkResult<void> {\n  return dispatch => {\n    dispatch(scanStopAction({ exploreId }));\n    dispatch(clearQueriesAction({ exploreId }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Loads all explore data sources and sets the chosen datasource.\n * If there are no datasources a missing datasource action is dispatched.\n */\nexport function loadExploreDatasourcesAndSetDatasource(\n  exploreId: ExploreId,\n  datasourceName: string\n): ThunkResult<void> {\n  return dispatch => {\n    const exploreDatasources = getExploreDatasources();\n\n    if (exploreDatasources.length >= 1) {\n      dispatch(changeDatasource(exploreId, datasourceName));\n    } else {\n      dispatch(loadDatasourceMissingAction({ exploreId }));\n    }\n  };\n}\n\n/**\n * Initialize Explore state with state from the URL and the React component.\n * Call this only on components for with the Explore state has not been initialized.\n */\nexport function initializeExplore(\n  exploreId: ExploreId,\n  datasourceName: string,\n  queries: DataQuery[],\n  range: TimeRange,\n  mode: ExploreMode,\n  containerWidth: number,\n  eventBridge: Emitter,\n  ui: ExploreUIState,\n  originPanelId: number\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    dispatch(loadExploreDatasourcesAndSetDatasource(exploreId, datasourceName));\n    dispatch(\n      initializeExploreAction({\n        exploreId,\n        containerWidth,\n        eventBridge,\n        queries,\n        range,\n        mode,\n        ui,\n        originPanelId,\n      })\n    );\n    dispatch(updateTime({ exploreId }));\n  };\n}\n\n/**\n * Datasource loading was successfully completed.\n */\nexport const loadDatasourceReady = (\n  exploreId: ExploreId,\n  instance: DataSourceApi,\n  orgId: number\n): PayloadAction<LoadDatasourceReadyPayload> => {\n  const historyKey = `grafana.explore.history.${instance.meta.id}`;\n  const history = store.getObject(historyKey, []);\n  // Save last-used datasource\n\n  store.set(lastUsedDatasourceKeyForOrgId(orgId), instance.name);\n\n  return loadDatasourceReadyAction({\n    exploreId,\n    history,\n  });\n};\n\n/**\n * Import queries from previous datasource if possible eg Loki and Prometheus have similar query language so the\n * labels part can be reused to get similar data.\n * @param exploreId\n * @param queries\n * @param sourceDataSource\n * @param targetDataSource\n */\nexport const importQueries = (\n  exploreId: ExploreId,\n  queries: DataQuery[],\n  sourceDataSource: DataSourceApi,\n  targetDataSource: DataSourceApi\n): ThunkResult<void> => {\n  return async dispatch => {\n    if (!sourceDataSource) {\n      // explore not initialized\n      dispatch(queriesImportedAction({ exploreId, queries }));\n      return;\n    }\n\n    let importedQueries = queries;\n    // Check if queries can be imported from previously selected datasource\n    if (sourceDataSource.meta.id === targetDataSource.meta.id) {\n      // Keep same queries if same type of datasource\n      importedQueries = [...queries];\n    } else if (targetDataSource.importQueries) {\n      // Datasource-specific importers\n      importedQueries = await targetDataSource.importQueries(queries, sourceDataSource.meta);\n    } else {\n      // Default is blank queries\n      importedQueries = ensureQueries();\n    }\n\n    const nextQueries = ensureQueries(importedQueries);\n\n    dispatch(queriesImportedAction({ exploreId, queries: nextQueries }));\n  };\n};\n\n/**\n * Main action to asynchronously load a datasource. Dispatches lots of smaller actions for feedback.\n */\nexport const loadDatasource = (exploreId: ExploreId, instance: DataSourceApi, orgId: number): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    const datasourceName = instance.name;\n\n    // Keep ID to track selection\n    dispatch(loadDatasourcePendingAction({ exploreId, requestedDatasourceName: datasourceName }));\n\n    if (instance.init) {\n      try {\n        instance.init();\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\n      // User already changed datasource, discard results\n      return;\n    }\n\n    dispatch(loadDatasourceReady(exploreId, instance, orgId));\n  };\n};\n\n/**\n * Action to modify a query given a datasource-specific modifier action.\n * @param exploreId Explore area\n * @param modification Action object with a type, e.g., ADD_FILTER\n * @param index Optional query row index. If omitted, the modification is applied to all query rows.\n * @param modifier Function that executes the modification, typically `datasourceInstance.modifyQueries`.\n */\nexport function modifyQueries(\n  exploreId: ExploreId,\n  modification: QueryFixAction,\n  modifier: any,\n  index?: number\n): ThunkResult<void> {\n  return dispatch => {\n    dispatch(modifyQueriesAction({ exploreId, modification, index, modifier }));\n    if (!modification.preventSubmit) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Main action to run queries and dispatches sub-actions based on which result viewers are active\n */\nexport const runQueries = (exploreId: ExploreId): ThunkResult<void> => {\n  return (dispatch, getState) => {\n    dispatch(updateTime({ exploreId }));\n\n    const exploreItemState = getState().explore[exploreId];\n    const {\n      datasourceInstance,\n      queries,\n      containerWidth,\n      isLive: live,\n      range,\n      scanning,\n      queryResponse,\n      querySubscription,\n      history,\n      mode,\n      showingGraph,\n      showingTable,\n    } = exploreItemState;\n\n    if (!hasNonEmptyQuery(queries)) {\n      dispatch(clearQueriesAction({ exploreId }));\n      dispatch(stateSave()); // Remember to save to state and update location\n      return;\n    }\n\n    // Some datasource's query builders allow per-query interval limits,\n    // but we're using the datasource interval limit for now\n    const minInterval = datasourceInstance.interval;\n\n    stopQueryState(querySubscription);\n\n    const queryOptions: QueryOptions = {\n      minInterval,\n      // maxDataPoints is used in:\n      // Loki - used for logs streaming for buffer size, with undefined it falls back to datasource config if it supports that.\n      // Elastic - limits the number of datapoints for the counts query and for logs it has hardcoded limit.\n      // Influx - used to correctly display logs in graph\n      maxDataPoints: mode === ExploreMode.Logs && datasourceInstance.name === 'Loki' ? undefined : containerWidth,\n      liveStreaming: live,\n      showingGraph,\n      showingTable,\n      mode,\n    };\n\n    const datasourceId = datasourceInstance.meta.id;\n    const transaction = buildQueryTransaction(queries, queryOptions, range, scanning);\n\n    let firstResponse = true;\n\n    const newQuerySub = runRequest(datasourceInstance, transaction.request)\n      .pipe(\n        // Simple throttle for live tailing, in case of > 1000 rows per interval we spend about 200ms on processing and\n        // rendering. In case this is optimized this can be tweaked, but also it should be only as fast as user\n        // actually can see what is happening.\n        live ? throttleTime(500) : identity,\n        map((data: PanelData) => preProcessPanelData(data, queryResponse))\n      )\n      .subscribe((data: PanelData) => {\n        if (!data.error && firstResponse) {\n          // Side-effect: Saving history in localstorage\n          const nextHistory = updateHistory(history, datasourceId, queries);\n          dispatch(historyUpdatedAction({ exploreId, history: nextHistory }));\n\n          // We save queries to the URL here so that only successfully run queries change the URL.\n          dispatch(stateSave());\n        }\n\n        firstResponse = false;\n\n        dispatch(queryStreamUpdatedAction({ exploreId, response: data }));\n\n        // Keep scanning for results if this was the last scanning transaction\n        if (getState().explore[exploreId].scanning) {\n          if (data.state === LoadingState.Done && data.series.length === 0) {\n            const range = getShiftedTimeRange(-1, getState().explore[exploreId].range);\n            dispatch(updateTime({ exploreId, absoluteRange: range }));\n            dispatch(runQueries(exploreId));\n          } else {\n            // We can stop scanning if we have a result\n            dispatch(scanStopAction({ exploreId }));\n          }\n        }\n      });\n\n    dispatch(queryStoreSubscriptionAction({ exploreId, querySubscription: newQuerySub }));\n  };\n};\n\nconst toRawTimeRange = (range: TimeRange): RawTimeRange => {\n  let from = range.raw.from;\n  if (isDateTime(from)) {\n    from = from.valueOf().toString(10);\n  }\n\n  let to = range.raw.to;\n  if (isDateTime(to)) {\n    to = to.valueOf().toString(10);\n  }\n\n  return {\n    from,\n    to,\n  };\n};\n\n/**\n * Save local redux state back to the URL. Should be called when there is some change that should affect the URL.\n * Not all of the redux state is reflected in URL though.\n */\nexport const stateSave = (): ThunkResult<void> => {\n  return (dispatch, getState) => {\n    const { left, right, split } = getState().explore;\n    const orgId = getState().user.orgId.toString();\n    const replace = left && left.urlReplaced === false;\n    const urlStates: { [index: string]: string } = { orgId };\n    const leftUrlState: ExploreUrlState = {\n      datasource: left.datasourceInstance.name,\n      queries: left.queries.map(clearQueryKeys),\n      range: toRawTimeRange(left.range),\n      mode: left.mode,\n      ui: {\n        showingGraph: left.showingGraph,\n        showingLogs: true,\n        showingTable: left.showingTable,\n        dedupStrategy: left.dedupStrategy,\n      },\n    };\n    urlStates.left = serializeStateToUrlParam(leftUrlState, true);\n    if (split) {\n      const rightUrlState: ExploreUrlState = {\n        datasource: right.datasourceInstance.name,\n        queries: right.queries.map(clearQueryKeys),\n        range: toRawTimeRange(right.range),\n        mode: right.mode,\n        ui: {\n          showingGraph: right.showingGraph,\n          showingLogs: true,\n          showingTable: right.showingTable,\n          dedupStrategy: right.dedupStrategy,\n        },\n      };\n\n      urlStates.right = serializeStateToUrlParam(rightUrlState, true);\n    }\n\n    dispatch(updateLocation({ query: urlStates, replace }));\n    if (replace) {\n      dispatch(setUrlReplacedAction({ exploreId: ExploreId.left }));\n    }\n  };\n};\n\nexport const updateTime = (config: {\n  exploreId: ExploreId;\n  rawRange?: RawTimeRange;\n  absoluteRange?: AbsoluteTimeRange;\n}): ThunkResult<void> => {\n  return (dispatch, getState) => {\n    const { exploreId, absoluteRange: absRange, rawRange: actionRange } = config;\n    const itemState = getState().explore[exploreId];\n    const timeZone = getTimeZone(getState().user);\n    const { range: rangeInState } = itemState;\n    let rawRange: RawTimeRange = rangeInState.raw;\n\n    if (absRange) {\n      rawRange = {\n        from: dateTimeForTimeZone(timeZone, absRange.from),\n        to: dateTimeForTimeZone(timeZone, absRange.to),\n      };\n    }\n\n    if (actionRange) {\n      rawRange = actionRange;\n    }\n\n    const range = getTimeRange(timeZone, rawRange);\n    const absoluteRange: AbsoluteTimeRange = { from: range.from.valueOf(), to: range.to.valueOf() };\n\n    getTimeSrv().init({\n      time: range.raw,\n      refresh: false,\n      getTimezone: () => timeZone,\n      timeRangeUpdated: (): any => undefined,\n    });\n\n    dispatch(changeRangeAction({ exploreId, range, absoluteRange }));\n  };\n};\n\n/**\n * Start a scan for more results using the given scanner.\n * @param exploreId Explore area\n * @param scanner Function that a) returns a new time range and b) triggers a query run for the new range\n */\nexport function scanStart(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Register the scanner\n    dispatch(scanStartAction({ exploreId }));\n    // Scanning must trigger query run, and return the new range\n    const range = getShiftedTimeRange(-1, getState().explore[exploreId].range);\n    // Set the new range to be displayed\n    dispatch(updateTime({ exploreId, absoluteRange: range }));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Reset queries to the given queries. Any modifications will be discarded.\n * Use this action for clicks on query examples. Triggers a query run.\n */\nexport function setQueries(exploreId: ExploreId, rawQueries: DataQuery[]): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Inject react keys into query objects\n    const queries = getState().explore[exploreId].queries;\n    const nextQueries = rawQueries.map((query, index) => generateNewKeyAndAddRefIdIfMissing(query, queries, index));\n    dispatch(setQueriesAction({ exploreId, queries: nextQueries }));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Close the split view and save URL state.\n */\nexport function splitClose(itemId: ExploreId): ThunkResult<void> {\n  return dispatch => {\n    dispatch(splitCloseAction({ itemId }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Open the split view and copy the left state to be the right state.\n * The right state is automatically initialized.\n * The copy keeps all query modifications but wipes the query results.\n */\nexport function splitOpen(): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Clone left state to become the right state\n    const leftState = getState().explore[ExploreId.left];\n    const queryState = getState().location.query[ExploreId.left] as string;\n    const urlState = parseUrlState(queryState);\n    const itemState: ExploreItemState = {\n      ...leftState,\n      queries: leftState.queries.slice(),\n      urlState,\n    };\n    dispatch(splitOpenAction({ itemState }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Syncs time interval, if they are not synced on both panels in a split mode.\n * Unsyncs time interval, if they are synced on both panels in a split mode.\n */\nexport function syncTimes(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    if (exploreId === ExploreId.left) {\n      const leftState = getState().explore.left;\n      dispatch(updateTimeRange({ exploreId: ExploreId.right, rawRange: leftState.range.raw }));\n    } else {\n      const rightState = getState().explore.right;\n      dispatch(updateTimeRange({ exploreId: ExploreId.left, rawRange: rightState.range.raw }));\n    }\n    const isTimeSynced = getState().explore.syncedTimes;\n    dispatch(syncTimesAction({ syncedTimes: !isTimeSynced }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Creates action to collapse graph/logs/table panel. When panel is collapsed,\n * queries won't be run\n */\nconst togglePanelActionCreator = (\n  actionCreator: ActionCreatorWithPayload<ToggleGraphPayload> | ActionCreatorWithPayload<ToggleTablePayload>\n) => (exploreId: ExploreId, isPanelVisible: boolean): ThunkResult<void> => {\n  return dispatch => {\n    let uiFragmentStateUpdate: Partial<ExploreUIState>;\n    const shouldRunQueries = !isPanelVisible;\n\n    switch (actionCreator.type) {\n      case toggleGraphAction.type:\n        uiFragmentStateUpdate = { showingGraph: !isPanelVisible };\n        break;\n      case toggleTableAction.type:\n        uiFragmentStateUpdate = { showingTable: !isPanelVisible };\n        break;\n    }\n\n    dispatch(actionCreator({ exploreId }));\n    dispatch(updateExploreUIState(exploreId, uiFragmentStateUpdate));\n\n    if (shouldRunQueries) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n};\n\n/**\n * Expand/collapse the graph result viewer. When collapsed, graph queries won't be run.\n */\nexport const toggleGraph = togglePanelActionCreator(toggleGraphAction);\n\n/**\n * Expand/collapse the table result viewer. When collapsed, table queries won't be run.\n */\nexport const toggleTable = togglePanelActionCreator(toggleTableAction);\n\n/**\n * Change logs deduplication strategy and update URL.\n */\nexport const changeDedupStrategy = (exploreId: ExploreId, dedupStrategy: LogsDedupStrategy): ThunkResult<void> => {\n  return dispatch => {\n    dispatch(updateExploreUIState(exploreId, { dedupStrategy }));\n  };\n};\n\n/**\n * Reacts to changes in URL state that we need to sync back to our redux state. Checks the internal update variable\n * to see which parts change and need to be synced.\n * @param exploreId\n */\nexport function refreshExplore(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const itemState = getState().explore[exploreId];\n    if (!itemState.initialized) {\n      return;\n    }\n\n    const { urlState, update, containerWidth, eventBridge } = itemState;\n    const { datasource, queries, range: urlRange, mode, ui, originPanelId } = urlState;\n    const refreshQueries: DataQuery[] = [];\n    for (let index = 0; index < queries.length; index++) {\n      const query = queries[index];\n      refreshQueries.push(generateNewKeyAndAddRefIdIfMissing(query, refreshQueries, index));\n    }\n    const timeZone = getTimeZone(getState().user);\n    const range = getTimeRangeFromUrl(urlRange, timeZone);\n\n    // need to refresh datasource\n    if (update.datasource) {\n      const initialQueries = ensureQueries(queries);\n      dispatch(\n        initializeExplore(\n          exploreId,\n          datasource,\n          initialQueries,\n          range,\n          mode,\n          containerWidth,\n          eventBridge,\n          ui,\n          originPanelId\n        )\n      );\n      return;\n    }\n\n    if (update.range) {\n      dispatch(updateTime({ exploreId, rawRange: range.raw }));\n    }\n\n    // need to refresh ui state\n    if (update.ui) {\n      dispatch(updateUIStateAction({ ...ui, exploreId }));\n    }\n\n    // need to refresh queries\n    if (update.queries) {\n      dispatch(setQueriesAction({ exploreId, queries: refreshQueries }));\n    }\n\n    // need to refresh mode\n    if (update.mode) {\n      dispatch(changeModeAction({ exploreId, mode }));\n    }\n\n    // always run queries when refresh is needed\n    if (update.queries || update.ui || update.range) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\nexport interface NavigateToExploreDependencies {\n  getDataSourceSrv: () => DataSourceSrv;\n  getTimeSrv: () => TimeSrv;\n  getExploreUrl: (args: GetExploreUrlArguments) => Promise<string>;\n  openInNewWindow?: (url: string) => void;\n}\n\nexport const navigateToExplore = (\n  panel: PanelModel,\n  dependencies: NavigateToExploreDependencies\n): ThunkResult<void> => {\n  return async dispatch => {\n    const { getDataSourceSrv, getTimeSrv, getExploreUrl, openInNewWindow } = dependencies;\n    const datasourceSrv = getDataSourceSrv();\n    const datasource = await datasourceSrv.get(panel.datasource);\n    const path = await getExploreUrl({\n      panel,\n      panelTargets: panel.targets,\n      panelDatasource: datasource,\n      datasourceSrv,\n      timeSrv: getTimeSrv(),\n    });\n\n    if (openInNewWindow) {\n      openInNewWindow(path);\n      return;\n    }\n\n    const query = {}; // strips any angular query param\n    dispatch(updateLocation({ path, query }));\n  };\n};\n","import { createSelector } from 'reselect';\nimport { ExploreItemState } from 'app/types';\nimport { filterLogLevels, dedupLogRows } from 'app/core/logs_model';\nimport { getDatasourceSrv } from '../../plugins/datasource_srv';\nimport { DataSourceSelectItem } from '@grafana/data';\n\nconst logsRowsSelector = (state: ExploreItemState) => state.logsResult && state.logsResult.rows;\nconst hiddenLogLevelsSelector = (state: ExploreItemState) => state.hiddenLogLevels;\nconst dedupStrategySelector = (state: ExploreItemState) => state.dedupStrategy;\nexport const deduplicatedRowsSelector = createSelector(\n  logsRowsSelector,\n  hiddenLogLevelsSelector,\n  dedupStrategySelector,\n  function dedupRows(rows, hiddenLogLevels, dedupStrategy) {\n    if (!(rows && rows.length)) {\n      return rows;\n    }\n    const filteredRows = filterLogLevels(rows, new Set(hiddenLogLevels));\n    return dedupLogRows(filteredRows, dedupStrategy);\n  }\n);\n\nexport const getExploreDatasources = (): DataSourceSelectItem[] => {\n  return getDatasourceSrv()\n    .getExternal()\n    .map(\n      (ds: any) =>\n        ({\n          value: ds.name,\n          name: ds.name,\n          meta: ds.meta,\n        } as DataSourceSelectItem)\n    );\n};\n","import { UserState } from 'app/types';\n\nexport const getTimeZone = (state: UserState) => state.timeZone;\n"],"mappingshZA;AACA;AAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAmBA;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AAEA;AACA;AAcA;AAAA;AAQA;AAAA;AAIA;AACA;AACA;AACA;;AALA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAiBA;AApDA;AACA;AACA;AACA;AAkDA;AAAA;AAtDA;AAwDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EA;AACA;AACA;AAGA;AACA;AAaA;AACA;AACA;AAEA;AAmBA;AACA;AAkCA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;;;;;;AACA;AAEA;AACA;;AAAA;;AAEA;;AAAA;;;AAGA;AACA;AACA;AACA;AAAA;AAAA;;AAAA;;;AAAA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAGA;;AAAA;AAEA;AACA;AACA;AAEA;;AAAA;AACA;;;;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAIA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AAWA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA;AACA;AAEA;;AAEA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AAMA;;;;;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AACA;AAEA;;AADA;AACA;;;AAEA;AACA;;;AAGA;AAEA;;;;AACA;AACA;AAEA;;AAEA;AACA;AACA;;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAaA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AAIA;;;;;AACA;AACA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AANA;AAQA;AACA;AACA;AACA;AAEA;AACA;;;;AACA;AACA;;;;;;;;;;;;;AC7yBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;;;;;A","sourceRoot":""}
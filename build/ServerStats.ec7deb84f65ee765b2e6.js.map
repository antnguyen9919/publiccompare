{"version":3,"file":"ServerStats.ec7deb84f65ee765b2e6.js","sources":["webpack:///./public/app/features/admin/ServerStats.tsx","webpack:///./public/app/features/admin/state/apis.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getServerStats, ServerStat } from './state/apis';\nimport Page from 'app/core/components/Page/Page';\nimport { NavModel } from '@grafana/data';\n\ninterface Props {\n  navModel: NavModel;\n  getServerStats: () => Promise<ServerStat[]>;\n}\n\ninterface State {\n  stats: ServerStat[];\n  isLoading: boolean;\n}\n\nexport class ServerStats extends PureComponent<Props, State> {\n  state: State = {\n    stats: [],\n    isLoading: true,\n  };\n\n  async componentDidMount() {\n    try {\n      const stats = await this.props.getServerStats();\n      this.setState({ stats, isLoading: false });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  render() {\n    const { navModel } = this.props;\n    const { stats, isLoading } = this.state;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <table className=\"filter-table form-inline\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Value</th>\n              </tr>\n            </thead>\n            <tbody>{stats.map(StatItem)}</tbody>\n          </table>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction StatItem(stat: ServerStat) {\n  return (\n    <tr key={stat.name}>\n      <td>{stat.name}</td>\n      <td>{stat.value}</td>\n    </tr>\n  );\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'server-stats'),\n  getServerStats: getServerStats,\n});\n\nexport default hot(module)(connect(mapStateToProps)(ServerStats));\n","import { getBackendSrv } from '@grafana/runtime';\n\nexport interface ServerStat {\n  name: string;\n  value: number;\n}\n\nexport const getServerStats = async (): Promise<ServerStat[]> => {\n  try {\n    const res = await getBackendSrv().get('api/admin/stats');\n    return [\n      { name: 'Total users', value: res.users },\n      { name: 'Total admins', value: res.admins },\n      { name: 'Total editors', value: res.editors },\n      { name: 'Total viewers', value: res.viewers },\n      { name: 'Active users (seen last 30 days)', value: res.activeUsers },\n      { name: 'Active admins (seen last 30 days)', value: res.activeAdmins },\n      { name: 'Active editors (seen last 30 days)', value: res.activeEditors },\n      { name: 'Active viewers (seen last 30 days)', value: res.activeViewers },\n      { name: 'Active sessions', value: res.activeSessions },\n      { name: 'Total dashboards', value: res.dashboards },\n      { name: 'Total orgs', value: res.orgs },\n      { name: 'Total playlists', value: res.playlists },\n      { name: 'Total snapshots', value: res.snapshots },\n      { name: 'Total dashboard tags', value: res.tags },\n      { name: 'Total starred dashboards', value: res.stars },\n      { name: 'Total alerts', value: res.alerts },\n    ];\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAaA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AA+BA;AA7BA;;;;;;;AAEA;;AAAA;AACA;;;;AAEA;;;;;;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAKA;AACA;AAAA;;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;ACtEA;AAOA;;;;;;AAEA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;;;;AAEA;;;;;A","sourceRoot":""}
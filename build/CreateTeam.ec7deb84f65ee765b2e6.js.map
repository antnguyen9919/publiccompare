{"version":3,"file":"CreateTeam.ec7deb84f65ee765b2e6.js","sources":["webpack:///./public/app/features/teams/CreateTeam.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { hot } from 'react-hot-loader';\nimport { FormField, Button } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { updateLocation } from '../../core/actions';\nimport { connect } from 'react-redux';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\n\nexport interface Props {\n  navModel: NavModel;\n  updateLocation: typeof updateLocation;\n}\n\ninterface State {\n  name: string;\n  email: string;\n}\n\nexport class CreateTeam extends PureComponent<Props, State> {\n  state: State = {\n    name: '',\n    email: '',\n  };\n\n  create = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const { name, email } = this.state;\n\n    const result = await getBackendSrv().post('/api/teams', { name, email });\n    if (result.teamId) {\n      this.props.updateLocation({ path: `/org/teams/edit/${result.teamId}` });\n    }\n  };\n\n  onEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      email: event.target.value,\n    });\n  };\n\n  onNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      name: event.target.value,\n    });\n  };\n\n  render() {\n    const { navModel } = this.props;\n    const { name, email } = this.state;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <>\n            <h3 className=\"page-sub-heading\">New Team</h3>\n\n            <form className=\"gf-form-group\" onSubmit={this.create}>\n              <FormField\n                className=\"gf-form\"\n                label=\"Name\"\n                value={name}\n                onChange={this.onNameChange}\n                inputWidth={30}\n                labelWidth={10}\n                required\n              />\n              <FormField\n                type=\"email\"\n                className=\"gf-form\"\n                label=\"Email\"\n                value={email}\n                onChange={this.onEmailChange}\n                inputWidth={30}\n                labelWidth={10}\n                placeholder=\"email@test.com\"\n                tooltip=\"This is optional and is primarily used for allowing custom team avatars.\"\n              />\n              <div className=\"gf-form-button-row\">\n                <Button type=\"submit\" variant=\"primary\">\n                  Create\n                </Button>\n              </div>\n            </form>\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'teams'),\n  };\n}\n\nconst mapDispatchToProps = {\n  updateLocation,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(CreateTeam));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAaA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AAEA;AAEA;;AAAA;AACA;AACA;AACA;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AA4CA;AA1CA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AASA;AAWA;AACA;AASA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;A","sourceRoot":""}
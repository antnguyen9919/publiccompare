{"version":3,"file":"PluginListPage.ec7deb84f65ee765b2e6.js","sources":["webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///./public/app/core/components/OrgActionBar/OrgActionBar.tsx","webpack:///./public/app/features/plugins/PluginList.tsx","webpack:///./public/app/features/plugins/PluginListItem.tsx","webpack:///./public/app/features/plugins/PluginListPage.tsx","webpack:///./public/app/features/plugins/state/selectors.ts"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\n\nexport interface Props {\n  value: string | undefined;\n  placeholder?: string;\n  labelClassName?: string;\n  inputClassName?: string;\n  onChange: (value: string) => void;\n}\n\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\n  <label className={props.labelClassName}>\n    <input\n      ref={ref}\n      type=\"text\"\n      className={props.inputClassName}\n      value={unEscapeStringFromRegex(props.value)}\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\n      placeholder={props.placeholder ? props.placeholder : null}\n    />\n    <i className=\"gf-form-input-icon fa fa-search\" />\n  </label>\n));\n","import React, { PureComponent } from 'react';\nimport LayoutSelector, { LayoutMode } from '../LayoutSelector/LayoutSelector';\nimport { FilterInput } from '../FilterInput/FilterInput';\n\nexport interface Props {\n  searchQuery: string;\n  layoutMode?: LayoutMode;\n  onSetLayoutMode?: (mode: LayoutMode) => {};\n  setSearchQuery: (value: string) => {};\n  linkButton: { href: string; title: string };\n  target?: string;\n}\n\nexport default class OrgActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, layoutMode, onSetLayoutMode, linkButton, setSearchQuery, target } = this.props;\n    const linkProps = { href: linkButton.href };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            labelClassName=\"gf-form--has-input-icon\"\n            inputClassName=\"gf-form-input width-20\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            placeholder={'Filter by name or type'}\n          />\n          <LayoutSelector mode={layoutMode} onLayoutModeChanged={(mode: LayoutMode) => onSetLayoutMode(mode)} />\n        </div>\n        <div className=\"page-action-bar__spacer\" />\n        <a className=\"btn btn-primary\" {...linkProps}>\n          {linkButton.title}\n        </a>\n      </div>\n    );\n  }\n}\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport PluginListItem from './PluginListItem';\nimport { PluginMeta } from '@grafana/data';\nimport { LayoutMode, LayoutModes } from '../../core/components/LayoutSelector/LayoutSelector';\n\ninterface Props {\n  plugins: PluginMeta[];\n  layoutMode: LayoutMode;\n}\n\nconst PluginList: FC<Props> = props => {\n  const { plugins, layoutMode } = props;\n\n  const listStyle = classNames({\n    'card-section': true,\n    'card-list-layout-grid': layoutMode === LayoutModes.Grid,\n    'card-list-layout-list': layoutMode === LayoutModes.List,\n  });\n\n  return (\n    <section className={listStyle}>\n      <ol className=\"card-list\">\n        {plugins.map((plugin, index) => {\n          return <PluginListItem plugin={plugin} key={`${plugin.name}-${index}`} />;\n        })}\n      </ol>\n    </section>\n  );\n};\n\nexport default PluginList;\n","import React, { FC } from 'react';\nimport { PluginMeta } from '@grafana/data';\n\ninterface Props {\n  plugin: PluginMeta;\n}\n\nconst PluginListItem: FC<Props> = props => {\n  const { plugin } = props;\n\n  return (\n    <li className=\"card-item-wrapper\">\n      <a className=\"card-item\" href={`plugins/${plugin.id}/`}>\n        <div className=\"card-item-header\">\n          <div className=\"card-item-type\">{plugin.type}</div>\n          {plugin.hasUpdate && (\n            <div className=\"card-item-notice\">\n              <span bs-tooltip=\"plugin.latestVersion\">Update available!</span>\n            </div>\n          )}\n        </div>\n        <div className=\"card-item-body\">\n          <figure className=\"card-item-figure\">\n            <img src={plugin.info.logos.small} />\n          </figure>\n          <div className=\"card-item-details\">\n            <div className=\"card-item-name\">{plugin.name}</div>\n            <div className=\"card-item-sub-name\">{`By ${plugin.info.author.name}`}</div>\n          </div>\n        </div>\n      </a>\n    </li>\n  );\n};\n\nexport default PluginListItem;\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport OrgActionBar from 'app/core/components/OrgActionBar/OrgActionBar';\nimport PluginList from './PluginList';\nimport { loadPlugins } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getLayoutMode, getPlugins, getPluginsSearchQuery } from './state/selectors';\nimport { LayoutMode } from 'app/core/components/LayoutSelector/LayoutSelector';\nimport { NavModel, PluginMeta } from '@grafana/data';\nimport { StoreState } from 'app/types';\nimport { setPluginsLayoutMode, setPluginsSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  plugins: PluginMeta[];\n  layoutMode: LayoutMode;\n  searchQuery: string;\n  hasFetched: boolean;\n  loadPlugins: typeof loadPlugins;\n  setPluginsLayoutMode: typeof setPluginsLayoutMode;\n  setPluginsSearchQuery: typeof setPluginsSearchQuery;\n}\n\nexport class PluginListPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.fetchPlugins();\n  }\n\n  async fetchPlugins() {\n    await this.props.loadPlugins();\n  }\n\n  render() {\n    const {\n      hasFetched,\n      navModel,\n      plugins,\n      layoutMode,\n      setPluginsLayoutMode,\n      setPluginsSearchQuery,\n      searchQuery,\n    } = this.props;\n\n    const linkButton = {\n      href: 'https://grafana.com/plugins?utm_source=grafana_plugin_list',\n      title: 'Find more plugins on Grafana.com',\n    };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            <OrgActionBar\n              searchQuery={searchQuery}\n              layoutMode={layoutMode}\n              onSetLayoutMode={mode => setPluginsLayoutMode(mode)}\n              setSearchQuery={query => setPluginsSearchQuery(query)}\n              linkButton={linkButton}\n            />\n            {hasFetched && plugins && plugins && <PluginList plugins={plugins} layoutMode={layoutMode} />}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'plugins'),\n    plugins: getPlugins(state.plugins),\n    layoutMode: getLayoutMode(state.plugins),\n    searchQuery: getPluginsSearchQuery(state.plugins),\n    hasFetched: state.plugins.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadPlugins,\n  setPluginsLayoutMode,\n  setPluginsSearchQuery,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(PluginListPage));\n","import { PluginsState } from 'app/types/plugins';\n\nexport const getPlugins = (state: PluginsState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.plugins.filter(item => {\n    return regex.test(item.name) || regex.test(item.info.author.name) || regex.test(item.info.description);\n  });\n};\n\nexport const getPluginsSearchQuery = (state: PluginsState) => state.searchQuery;\nexport const getLayoutMode = (state: PluginsState) => state.layoutMode;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAEA;AAQA;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AAWA;AAAA;AAAA;;AA4BA;AA3BA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAOA;AAEA;AACA;AAKA;AACA;AAAA;;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAIA;AAEA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAaA;AAAA;AAAA;;AA0CA;AAzCA;AACA;AACA;AAEA;;;;AACA;;AAAA;;;;;AACA;AAEA;AACA;AAUA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AAKA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;A","sourceRoot":""}
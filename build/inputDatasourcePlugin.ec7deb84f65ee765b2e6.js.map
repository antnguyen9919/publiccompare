{"version":3,"file":"inputDatasourcePlugin.ec7deb84f65ee765b2e6.js","sources":["webpack:///./public/app/plugins/datasource/input/InputConfigEditor.tsx","webpack:///./public/app/plugins/datasource/input/InputDatasource.ts","webpack:///./public/app/plugins/datasource/input/InputQueryEditor.tsx","webpack:///./public/app/plugins/datasource/input/module.ts","webpack:///./public/app/plugins/datasource/input/utils.ts"],"sourcesContent":["// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { InputOptions } from './types';\n\nimport { TableInputCSV } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, DataFrame, MutableDataFrame } from '@grafana/data';\nimport { dataFrameToCSV } from './utils';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<InputOptions> {}\n\ninterface State {\n  text: string;\n}\n\nexport class InputConfigEditor extends PureComponent<Props, State> {\n  state = {\n    text: '',\n  };\n\n  componentDidMount() {\n    const { options } = this.props;\n    if (options.jsonData.data) {\n      const text = dataFrameToCSV(options.jsonData.data);\n      this.setState({ text });\n    }\n  }\n\n  onSeriesParsed = (data: DataFrame[], text: string) => {\n    const { options, onOptionsChange } = this.props;\n    if (!data) {\n      data = [new MutableDataFrame()];\n    }\n    // data is a property on 'jsonData'\n    const jsonData = {\n      ...options.jsonData,\n      data,\n    };\n\n    onOptionsChange({\n      ...options,\n      jsonData,\n    });\n    this.setState({ text });\n  };\n\n  render() {\n    const { text } = this.state;\n    return (\n      <div>\n        <div className=\"gf-form-group\">\n          <h4>Shared Data:</h4>\n          <span>Enter CSV</span>\n          <TableInputCSV text={text} onSeriesParsed={this.onSeriesParsed} width={'100%'} height={200} />\n        </div>\n\n        <div className=\"grafana-info-box\">\n          This data is stored in the datasource json and is returned to every user in the initial request for any\n          datasource. This is an appropriate place to enter a few values. Large datasets will perform better in other\n          datasources.\n          <br />\n          <br />\n          <b>NOTE:</b> Changes to this data will only be reflected after a browser refresh.\n        </div>\n      </div>\n    );\n  }\n}\n","// Types\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MetricFindValue,\n  DataFrame,\n  DataFrameDTO,\n  toDataFrame,\n} from '@grafana/data';\n\nimport { InputQuery, InputOptions } from './types';\n\nexport class InputDatasource extends DataSourceApi<InputQuery, InputOptions> {\n  data: DataFrame[] = [];\n\n  constructor(instanceSettings: DataSourceInstanceSettings<InputOptions>) {\n    super(instanceSettings);\n\n    if (instanceSettings.jsonData.data) {\n      this.data = instanceSettings.jsonData.data.map(v => toDataFrame(v));\n    }\n  }\n\n  /**\n   * Convert a query to a simple text string\n   */\n  getQueryDisplayText(query: InputQuery): string {\n    if (query.data) {\n      return 'Panel Data: ' + describeDataFrame(query.data);\n    }\n    return `Shared Data From: ${this.name} (${describeDataFrame(this.data)})`;\n  }\n\n  metricFindQuery(query: string, options?: any): Promise<MetricFindValue[]> {\n    return new Promise((resolve, reject) => {\n      const names = [];\n      for (const series of this.data) {\n        for (const field of series.fields) {\n          // TODO, match query/options?\n          names.push({\n            text: field.name,\n          });\n        }\n      }\n      resolve(names);\n    });\n  }\n\n  query(options: DataQueryRequest<InputQuery>): Promise<DataQueryResponse> {\n    const results: DataFrame[] = [];\n    for (const query of options.targets) {\n      if (query.hide) {\n        continue;\n      }\n      let data = this.data;\n      if (query.data) {\n        data = query.data.map(v => toDataFrame(v));\n      }\n      for (let i = 0; i < data.length; i++) {\n        results.push({\n          ...data[i],\n          refId: query.refId,\n        });\n      }\n    }\n    return Promise.resolve({ data: results });\n  }\n\n  testDatasource() {\n    return new Promise((resolve, reject) => {\n      let rowCount = 0;\n      let info = `${this.data.length} Series:`;\n      for (const series of this.data) {\n        const length = series.length;\n        info += ` [${series.fields.length} Fields, ${length} Rows]`;\n        rowCount += length;\n      }\n\n      if (rowCount > 0) {\n        resolve({\n          status: 'success',\n          message: info,\n        });\n      }\n      reject({\n        status: 'error',\n        message: 'No Data Entered',\n      });\n    });\n  }\n}\n\nfunction getLength(data?: DataFrameDTO | DataFrame) {\n  if (!data || !data.fields || !data.fields.length) {\n    return 0;\n  }\n  if (data.hasOwnProperty('length')) {\n    return (data as DataFrame).length;\n  }\n  return data.fields[0].values.length;\n}\n\nexport function describeDataFrame(data: Array<DataFrameDTO | DataFrame>): string {\n  if (!data || !data.length) {\n    return '';\n  }\n  if (data.length > 1) {\n    const count = data.reduce((acc, series) => {\n      return acc + getLength(series);\n    }, 0);\n    return `${data.length} Series, ${count} Rows`;\n  }\n  const series = data[0];\n  if (!series.fields) {\n    return 'Missing Fields';\n  }\n  const length = getLength(series);\n  return `${series.fields.length} Fields, ${length} Rows`;\n}\n\nexport default InputDatasource;\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { InputDatasource, describeDataFrame } from './InputDatasource';\nimport { InputQuery, InputOptions } from './types';\n\nimport { FormLabel, Select, TableInputCSV } from '@grafana/ui';\nimport { DataFrame, toCSV, SelectableValue, MutableDataFrame, QueryEditorProps } from '@grafana/data';\n\nimport { dataFrameToCSV } from './utils';\n\ntype Props = QueryEditorProps<InputDatasource, InputQuery, InputOptions>;\n\nconst options = [\n  { value: 'panel', label: 'Panel', description: 'Save data in the panel configuration.' },\n  { value: 'shared', label: 'Shared', description: 'Save data in the shared datasource object.' },\n];\n\ninterface State {\n  text: string;\n}\n\nexport class InputQueryEditor extends PureComponent<Props, State> {\n  state = {\n    text: '',\n  };\n\n  onComponentDidMount() {\n    const { query } = this.props;\n    const text = dataFrameToCSV(query.data);\n    this.setState({ text });\n  }\n\n  onSourceChange = (item: SelectableValue<string>) => {\n    const { datasource, query, onChange, onRunQuery } = this.props;\n    let data: DataFrame[] | undefined = undefined;\n    if (item.value === 'panel') {\n      if (query.data) {\n        return;\n      }\n      data = [...datasource.data];\n      if (!data) {\n        data = [new MutableDataFrame()];\n      }\n      this.setState({ text: toCSV(data) });\n    }\n    onChange({ ...query, data });\n    onRunQuery();\n  };\n\n  onSeriesParsed = (data: DataFrame[], text: string) => {\n    const { query, onChange, onRunQuery } = this.props;\n    this.setState({ text });\n    if (!data) {\n      data = [new MutableDataFrame()];\n    }\n    onChange({ ...query, data });\n    onRunQuery();\n  };\n\n  render() {\n    const { datasource, query } = this.props;\n    const { id, name } = datasource;\n    const { text } = this.state;\n\n    const selected = query.data ? options[0] : options[1];\n    return (\n      <div>\n        <div className=\"gf-form\">\n          <FormLabel width={4}>Data</FormLabel>\n          <Select width={6} options={options} value={selected} onChange={this.onSourceChange} />\n\n          <div className=\"btn btn-link\">\n            {query.data ? (\n              describeDataFrame(query.data)\n            ) : (\n              <a href={`datasources/edit/${id}/`}>\n                {name}: {describeDataFrame(datasource.data)} &nbsp;&nbsp;\n                <i className=\"fa fa-pencil-square-o\" />\n              </a>\n            )}\n          </div>\n        </div>\n        {query.data && <TableInputCSV text={text} onSeriesParsed={this.onSeriesParsed} width={'100%'} height={200} />}\n      </div>\n    );\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { InputDatasource } from './InputDatasource';\n\nimport { InputQueryEditor } from './InputQueryEditor';\nimport { InputConfigEditor } from './InputConfigEditor';\nimport { InputOptions, InputQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<InputDatasource, InputQuery, InputOptions>(InputDatasource)\n  .setConfigEditor(InputConfigEditor)\n  .setQueryEditor(InputQueryEditor);\n","import { toDataFrame, DataFrameDTO, toCSV } from '@grafana/data';\n\nexport function dataFrameToCSV(dto?: DataFrameDTO[]) {\n  if (!dto || !dto.length) {\n    return '';\n  }\n  return toCSV(dto.map(v => toDataFrame(v)));\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAKA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAIA;AACA;;AAuBA;AA/CA;AACA;AACA;AACA;AACA;AACA;AACA;AAoBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;;AAIA;AACA;AACA;AACA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AAaA;AAAA;AAGA;AAAA;AAFA;AAKA;AACA;AACA;;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;;AACA;;AACA;AAAA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA;;;;;;;;;AACA;AACA;AACA;AAEA;;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;;;;;;;;;AACA;AACA;AAEA;AAAA;AACA;;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;AC1HA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA6BA;AA5DA;AACA;AACA;AACA;AACA;AA6BA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAKA;;AAAA;;AACA;AAKA;AAGA;AACA;AAAA;;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}
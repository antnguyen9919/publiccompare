{"version":3,"file":"OrgDetailsPage.ec7deb84f65ee765b2e6.js","sources":["webpack:///./public/app/features/org/OrgDetailsPage.tsx","webpack:///./public/app/features/org/OrgProfile.tsx","webpack:///./public/app/features/org/state/actions.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { NavModel } from '@grafana/data';\n\nimport Page from 'app/core/components/Page/Page';\nimport OrgProfile from './OrgProfile';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { loadOrganization, updateOrganization } from './state/actions';\nimport { Organization, StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { setOrganizationName } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  organization: Organization;\n  loadOrganization: typeof loadOrganization;\n  setOrganizationName: typeof setOrganizationName;\n  updateOrganization: typeof updateOrganization;\n}\n\nexport class OrgDetailsPage extends PureComponent<Props> {\n  async componentDidMount() {\n    await this.props.loadOrganization();\n  }\n\n  onOrgNameChange = (name: string) => {\n    this.props.setOrganizationName(name);\n  };\n\n  onUpdateOrganization = () => {\n    this.props.updateOrganization();\n  };\n\n  render() {\n    const { navModel, organization } = this.props;\n    const isLoading = Object.keys(organization).length === 0;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          {!isLoading && (\n            <div>\n              <OrgProfile\n                onOrgNameChange={name => this.onOrgNameChange(name)}\n                onSubmit={this.onUpdateOrganization}\n                orgName={organization.name}\n              />\n              <SharedPreferences resourceUri=\"org\" />\n            </div>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'org-settings'),\n    organization: state.organization.organization,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadOrganization,\n  setOrganizationName,\n  updateOrganization,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(OrgDetailsPage));\n","import React, { ChangeEvent, FC } from 'react';\nimport { Input } from '@grafana/ui';\n\nexport interface Props {\n  orgName: string;\n  onSubmit: () => void;\n  onOrgNameChange: (orgName: string) => void;\n}\n\nconst OrgProfile: FC<Props> = ({ onSubmit, onOrgNameChange, orgName }) => {\n  return (\n    <div>\n      <h3 className=\"page-sub-heading\">Organization profile</h3>\n      <form\n        name=\"orgForm\"\n        className=\"gf-form-group\"\n        onSubmit={event => {\n          event.preventDefault();\n          onSubmit();\n        }}\n      >\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form max-width-28\">\n            <span className=\"gf-form-label\">Organization name</span>\n            <Input\n              className=\"gf-form-input\"\n              type=\"text\"\n              onChange={(event: ChangeEvent<HTMLInputElement>) => onOrgNameChange(event.target.value)}\n              value={orgName}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-button-row\">\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Save\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default OrgProfile;\n","import { ThunkResult } from 'app/types';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { organizationLoaded } from './reducers';\n\nexport function loadOrganization(): ThunkResult<any> {\n  return async dispatch => {\n    const organizationResponse = await getBackendSrv().get('/api/org');\n    dispatch(organizationLoaded(organizationResponse));\n\n    return organizationResponse;\n  };\n}\n\nexport function updateOrganization(): ThunkResult<any> {\n  return async (dispatch, getStore) => {\n    const organization = getStore().organization.organization;\n\n    await getBackendSrv().put('/api/org', { name: organization.name });\n\n    dispatch(loadOrganization());\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAUA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAEA;AACA;AACA;;AAuBA;AAjCA;;;;AACA;;AAAA;;;;;AACA;AAUA;AAAA;AACA;AACA;AAEA;AAEA;AAGA;AAKA;AAMA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AAOA;AAEA;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AAEA;AAAA;AACA;;;;AACA;;AAAA;AACA;AAEA;;;AACA;AACA;AAEA;AAAA;AACA;;;;;AACA;AAEA;;AAAA;AAEA;;;;AACA;AACA;;;;;A","sourceRoot":""}